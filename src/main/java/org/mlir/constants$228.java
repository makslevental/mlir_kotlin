// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$228 {

    static final FunctionDescriptor mlirCreateAsyncAsyncFuncToAsyncRuntime$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateAsyncAsyncFuncToAsyncRuntime$MH = RuntimeHelper.downcallHandle(
        "mlirCreateAsyncAsyncFuncToAsyncRuntime",
        constants$228.mlirCreateAsyncAsyncFuncToAsyncRuntime$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncAsyncFuncToAsyncRuntime$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncAsyncFuncToAsyncRuntime$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncAsyncFuncToAsyncRuntime",
        constants$228.mlirRegisterAsyncAsyncFuncToAsyncRuntime$FUNC
    );
    static final FunctionDescriptor mlirCreateAsyncAsyncParallelFor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateAsyncAsyncParallelFor$MH = RuntimeHelper.downcallHandle(
        "mlirCreateAsyncAsyncParallelFor",
        constants$228.mlirCreateAsyncAsyncParallelFor$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncAsyncParallelFor$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncAsyncParallelFor$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncAsyncParallelFor",
        constants$228.mlirRegisterAsyncAsyncParallelFor$FUNC
    );
    static final FunctionDescriptor mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting$MH = RuntimeHelper.downcallHandle(
        "mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting",
        constants$228.mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting",
        constants$228.mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting$FUNC
    );
}


