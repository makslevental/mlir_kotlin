// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$301 {

    static final FunctionDescriptor mlirUniformQuantizedPerAxisTypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        Constants$root.C_INT$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirUniformQuantizedPerAxisTypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirUniformQuantizedPerAxisTypeGet",
        constants$301.mlirUniformQuantizedPerAxisTypeGet$FUNC
    );
    static final FunctionDescriptor mlirUniformQuantizedPerAxisTypeGetNumDims$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirUniformQuantizedPerAxisTypeGetNumDims$MH = RuntimeHelper.downcallHandle(
        "mlirUniformQuantizedPerAxisTypeGetNumDims",
        constants$301.mlirUniformQuantizedPerAxisTypeGetNumDims$FUNC
    );
    static final FunctionDescriptor mlirUniformQuantizedPerAxisTypeGetScale$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirUniformQuantizedPerAxisTypeGetScale$MH = RuntimeHelper.downcallHandle(
        "mlirUniformQuantizedPerAxisTypeGetScale",
        constants$301.mlirUniformQuantizedPerAxisTypeGetScale$FUNC
    );
    static final FunctionDescriptor mlirUniformQuantizedPerAxisTypeGetZeroPoint$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirUniformQuantizedPerAxisTypeGetZeroPoint$MH = RuntimeHelper.downcallHandle(
        "mlirUniformQuantizedPerAxisTypeGetZeroPoint",
        constants$301.mlirUniformQuantizedPerAxisTypeGetZeroPoint$FUNC
    );
    static final FunctionDescriptor mlirUniformQuantizedPerAxisTypeGetQuantizedDimension$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirUniformQuantizedPerAxisTypeGetQuantizedDimension$MH = RuntimeHelper.downcallHandle(
        "mlirUniformQuantizedPerAxisTypeGetQuantizedDimension",
        constants$301.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension$FUNC
    );
    static final FunctionDescriptor mlirUniformQuantizedPerAxisTypeIsFixedPoint$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirUniformQuantizedPerAxisTypeIsFixedPoint$MH = RuntimeHelper.downcallHandle(
        "mlirUniformQuantizedPerAxisTypeIsFixedPoint",
        constants$301.mlirUniformQuantizedPerAxisTypeIsFixedPoint$FUNC
    );
}


