// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$312 {

    static final FunctionDescriptor mlirRegisterTransformsPrintOpStats$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsPrintOpStats$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsPrintOpStats",
        constants$312.mlirRegisterTransformsPrintOpStats$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsSCCP$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsSCCP$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsSCCP",
        constants$312.mlirCreateTransformsSCCP$FUNC
    );
    static final FunctionDescriptor mlirRegisterTransformsSCCP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsSCCP$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsSCCP",
        constants$312.mlirRegisterTransformsSCCP$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsStripDebugInfo$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsStripDebugInfo$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsStripDebugInfo",
        constants$312.mlirCreateTransformsStripDebugInfo$FUNC
    );
    static final FunctionDescriptor mlirRegisterTransformsStripDebugInfo$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsStripDebugInfo$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsStripDebugInfo",
        constants$312.mlirRegisterTransformsStripDebugInfo$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsSymbolDCE$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsSymbolDCE$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsSymbolDCE",
        constants$312.mlirCreateTransformsSymbolDCE$FUNC
    );
}


