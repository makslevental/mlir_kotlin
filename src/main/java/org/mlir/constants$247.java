// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$247 {

    static final FunctionDescriptor mlirRegisterConversionConvertSPIRVToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertSPIRVToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertSPIRVToLLVMPass",
        constants$247.mlirRegisterConversionConvertSPIRVToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertShapeConstraints$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertShapeConstraints$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertShapeConstraints",
        constants$247.mlirCreateConversionConvertShapeConstraints$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertShapeConstraints$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertShapeConstraints$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertShapeConstraints",
        constants$247.mlirRegisterConversionConvertShapeConstraints$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertShapeToStandard$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertShapeToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertShapeToStandard",
        constants$247.mlirCreateConversionConvertShapeToStandard$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertShapeToStandard$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertShapeToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertShapeToStandard",
        constants$247.mlirRegisterConversionConvertShapeToStandard$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertTensorToLinalg$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertTensorToLinalg$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertTensorToLinalg",
        constants$247.mlirCreateConversionConvertTensorToLinalg$FUNC
    );
}


