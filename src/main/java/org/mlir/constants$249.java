// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$249 {

    static final FunctionDescriptor mlirRegisterConversionConvertVectorToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertVectorToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertVectorToLLVMPass",
        constants$249.mlirRegisterConversionConvertVectorToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertVectorToSCF$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertVectorToSCF$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertVectorToSCF",
        constants$249.mlirCreateConversionConvertVectorToSCF$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertVectorToSCF$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertVectorToSCF$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertVectorToSCF",
        constants$249.mlirRegisterConversionConvertVectorToSCF$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertVectorToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertVectorToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertVectorToSPIRV",
        constants$249.mlirCreateConversionConvertVectorToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertVectorToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertVectorToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertVectorToSPIRV",
        constants$249.mlirRegisterConversionConvertVectorToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass",
        constants$249.mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass$FUNC
    );
}


