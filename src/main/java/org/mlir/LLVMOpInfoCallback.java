// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface LLVMOpInfoCallback {

    int apply(java.lang.foreign.MemoryAddress DisInfo, long PC, long Offset, long OpSize, long InstSize, int TagType, java.lang.foreign.MemoryAddress TagBuf);
    static MemorySegment allocate(LLVMOpInfoCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(LLVMOpInfoCallback.class, fi, constants$308.LLVMOpInfoCallback$FUNC, session);
    }
    static LLVMOpInfoCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _DisInfo, long _PC, long _Offset, long _OpSize, long _InstSize, int _TagType, java.lang.foreign.MemoryAddress _TagBuf) -> {
            try {
                return (int)constants$308.LLVMOpInfoCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_DisInfo, _PC, _Offset, _OpSize, _InstSize, _TagType, (java.lang.foreign.Addressable)_TagBuf);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


