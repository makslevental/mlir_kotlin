// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$248 {

    static final FunctionDescriptor mlirRegisterConversionConvertTensorToLinalg$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertTensorToLinalg$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertTensorToLinalg",
        constants$248.mlirRegisterConversionConvertTensorToLinalg$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertTensorToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertTensorToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertTensorToSPIRV",
        constants$248.mlirCreateConversionConvertTensorToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertTensorToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertTensorToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertTensorToSPIRV",
        constants$248.mlirRegisterConversionConvertTensorToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertVectorToGPU$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertVectorToGPU$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertVectorToGPU",
        constants$248.mlirCreateConversionConvertVectorToGPU$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertVectorToGPU$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertVectorToGPU$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertVectorToGPU",
        constants$248.mlirRegisterConversionConvertVectorToGPU$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertVectorToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertVectorToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertVectorToLLVMPass",
        constants$248.mlirCreateConversionConvertVectorToLLVMPass$FUNC
    );
}


