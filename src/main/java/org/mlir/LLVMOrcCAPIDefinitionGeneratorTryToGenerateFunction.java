// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress GeneratorObj, java.lang.foreign.MemoryAddress Ctx, java.lang.foreign.MemoryAddress LookupState, int Kind, java.lang.foreign.MemoryAddress JD, int JDLookupFlags, java.lang.foreign.MemoryAddress LookupSet, long LookupSetSize);
    static MemorySegment allocate(LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction fi, MemorySession session) {
        return RuntimeHelper.upcallStub(LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction.class, fi, constants$205.LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction$FUNC, session);
    }
    static LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _GeneratorObj, java.lang.foreign.MemoryAddress _Ctx, java.lang.foreign.MemoryAddress _LookupState, int _Kind, java.lang.foreign.MemoryAddress _JD, int _JDLookupFlags, java.lang.foreign.MemoryAddress _LookupSet, long _LookupSetSize) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$205.LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_GeneratorObj, (java.lang.foreign.Addressable)_Ctx, (java.lang.foreign.Addressable)_LookupState, _Kind, (java.lang.foreign.Addressable)_JD, _JDLookupFlags, (java.lang.foreign.Addressable)_LookupSet, _LookupSetSize);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


