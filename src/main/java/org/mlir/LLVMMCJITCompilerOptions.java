// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class LLVMMCJITCompilerOptions {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("OptLevel"),
        Constants$root.C_INT$LAYOUT.withName("CodeModel"),
        Constants$root.C_INT$LAYOUT.withName("NoFramePointerElim"),
        Constants$root.C_INT$LAYOUT.withName("EnableFastISel"),
        Constants$root.C_POINTER$LAYOUT.withName("MCJMM")
    ).withName("LLVMMCJITCompilerOptions");
    public static MemoryLayout $LAYOUT() {
        return LLVMMCJITCompilerOptions.$struct$LAYOUT;
    }
    static final VarHandle OptLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OptLevel"));
    public static VarHandle OptLevel$VH() {
        return LLVMMCJITCompilerOptions.OptLevel$VH;
    }
    public static int OptLevel$get(MemorySegment seg) {
        return (int)LLVMMCJITCompilerOptions.OptLevel$VH.get(seg);
    }
    public static void OptLevel$set( MemorySegment seg, int x) {
        LLVMMCJITCompilerOptions.OptLevel$VH.set(seg, x);
    }
    public static int OptLevel$get(MemorySegment seg, long index) {
        return (int)LLVMMCJITCompilerOptions.OptLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OptLevel$set(MemorySegment seg, long index, int x) {
        LLVMMCJITCompilerOptions.OptLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CodeModel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CodeModel"));
    public static VarHandle CodeModel$VH() {
        return LLVMMCJITCompilerOptions.CodeModel$VH;
    }
    public static int CodeModel$get(MemorySegment seg) {
        return (int)LLVMMCJITCompilerOptions.CodeModel$VH.get(seg);
    }
    public static void CodeModel$set( MemorySegment seg, int x) {
        LLVMMCJITCompilerOptions.CodeModel$VH.set(seg, x);
    }
    public static int CodeModel$get(MemorySegment seg, long index) {
        return (int)LLVMMCJITCompilerOptions.CodeModel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CodeModel$set(MemorySegment seg, long index, int x) {
        LLVMMCJITCompilerOptions.CodeModel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NoFramePointerElim$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NoFramePointerElim"));
    public static VarHandle NoFramePointerElim$VH() {
        return LLVMMCJITCompilerOptions.NoFramePointerElim$VH;
    }
    public static int NoFramePointerElim$get(MemorySegment seg) {
        return (int)LLVMMCJITCompilerOptions.NoFramePointerElim$VH.get(seg);
    }
    public static void NoFramePointerElim$set( MemorySegment seg, int x) {
        LLVMMCJITCompilerOptions.NoFramePointerElim$VH.set(seg, x);
    }
    public static int NoFramePointerElim$get(MemorySegment seg, long index) {
        return (int)LLVMMCJITCompilerOptions.NoFramePointerElim$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NoFramePointerElim$set(MemorySegment seg, long index, int x) {
        LLVMMCJITCompilerOptions.NoFramePointerElim$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EnableFastISel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnableFastISel"));
    public static VarHandle EnableFastISel$VH() {
        return LLVMMCJITCompilerOptions.EnableFastISel$VH;
    }
    public static int EnableFastISel$get(MemorySegment seg) {
        return (int)LLVMMCJITCompilerOptions.EnableFastISel$VH.get(seg);
    }
    public static void EnableFastISel$set( MemorySegment seg, int x) {
        LLVMMCJITCompilerOptions.EnableFastISel$VH.set(seg, x);
    }
    public static int EnableFastISel$get(MemorySegment seg, long index) {
        return (int)LLVMMCJITCompilerOptions.EnableFastISel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableFastISel$set(MemorySegment seg, long index, int x) {
        LLVMMCJITCompilerOptions.EnableFastISel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MCJMM$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MCJMM"));
    public static VarHandle MCJMM$VH() {
        return LLVMMCJITCompilerOptions.MCJMM$VH;
    }
    public static MemoryAddress MCJMM$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)LLVMMCJITCompilerOptions.MCJMM$VH.get(seg);
    }
    public static void MCJMM$set( MemorySegment seg, MemoryAddress x) {
        LLVMMCJITCompilerOptions.MCJMM$VH.set(seg, x);
    }
    public static MemoryAddress MCJMM$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)LLVMMCJITCompilerOptions.MCJMM$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MCJMM$set(MemorySegment seg, long index, MemoryAddress x) {
        LLVMMCJITCompilerOptions.MCJMM$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


