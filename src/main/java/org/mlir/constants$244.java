// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$244 {

    static final FunctionDescriptor mlirRegisterConversionConvertMathToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertMathToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertMathToSPIRV",
        constants$244.mlirRegisterConversionConvertMathToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertMemRefToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertMemRefToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertMemRefToSPIRV",
        constants$244.mlirCreateConversionConvertMemRefToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertMemRefToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertMemRefToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertMemRefToSPIRV",
        constants$244.mlirRegisterConversionConvertMemRefToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertNVGPUToNVVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertNVGPUToNVVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertNVGPUToNVVMPass",
        constants$244.mlirCreateConversionConvertNVGPUToNVVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertNVGPUToNVVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertNVGPUToNVVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertNVGPUToNVVMPass",
        constants$244.mlirRegisterConversionConvertNVGPUToNVVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertOpenACCToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertOpenACCToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertOpenACCToLLVMPass",
        constants$244.mlirCreateConversionConvertOpenACCToLLVMPass$FUNC
    );
}


