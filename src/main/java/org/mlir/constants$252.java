// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$252 {

    static final FunctionDescriptor mlirRegisterConversionSCFToControlFlow$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionSCFToControlFlow$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionSCFToControlFlow",
        constants$252.mlirRegisterConversionSCFToControlFlow$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionSCFToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionSCFToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionSCFToSPIRV",
        constants$252.mlirCreateConversionSCFToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionSCFToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionSCFToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionSCFToSPIRV",
        constants$252.mlirRegisterConversionSCFToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionTosaToArith$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionTosaToArith$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionTosaToArith",
        constants$252.mlirCreateConversionTosaToArith$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionTosaToArith$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionTosaToArith$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionTosaToArith",
        constants$252.mlirRegisterConversionTosaToArith$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionTosaToLinalg$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionTosaToLinalg$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionTosaToLinalg",
        constants$252.mlirCreateConversionTosaToLinalg$FUNC
    );
}


