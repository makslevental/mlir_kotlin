// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class Bindings_1 {

    public static int LLVMAMDGPUESCallConv() {
        return (int)96L;
    }
    public static int LLVMArgumentValueKind() {
        return (int)0L;
    }
    public static int LLVMBasicBlockValueKind() {
        return (int)1L;
    }
    public static int LLVMMemoryUseValueKind() {
        return (int)2L;
    }
    public static int LLVMMemoryDefValueKind() {
        return (int)3L;
    }
    public static int LLVMMemoryPhiValueKind() {
        return (int)4L;
    }
    public static int LLVMFunctionValueKind() {
        return (int)5L;
    }
    public static int LLVMGlobalAliasValueKind() {
        return (int)6L;
    }
    public static int LLVMGlobalIFuncValueKind() {
        return (int)7L;
    }
    public static int LLVMGlobalVariableValueKind() {
        return (int)8L;
    }
    public static int LLVMBlockAddressValueKind() {
        return (int)9L;
    }
    public static int LLVMConstantExprValueKind() {
        return (int)10L;
    }
    public static int LLVMConstantArrayValueKind() {
        return (int)11L;
    }
    public static int LLVMConstantStructValueKind() {
        return (int)12L;
    }
    public static int LLVMConstantVectorValueKind() {
        return (int)13L;
    }
    public static int LLVMUndefValueValueKind() {
        return (int)14L;
    }
    public static int LLVMConstantAggregateZeroValueKind() {
        return (int)15L;
    }
    public static int LLVMConstantDataArrayValueKind() {
        return (int)16L;
    }
    public static int LLVMConstantDataVectorValueKind() {
        return (int)17L;
    }
    public static int LLVMConstantIntValueKind() {
        return (int)18L;
    }
    public static int LLVMConstantFPValueKind() {
        return (int)19L;
    }
    public static int LLVMConstantPointerNullValueKind() {
        return (int)20L;
    }
    public static int LLVMConstantTokenNoneValueKind() {
        return (int)21L;
    }
    public static int LLVMMetadataAsValueValueKind() {
        return (int)22L;
    }
    public static int LLVMInlineAsmValueKind() {
        return (int)23L;
    }
    public static int LLVMInstructionValueKind() {
        return (int)24L;
    }
    public static int LLVMPoisonValueValueKind() {
        return (int)25L;
    }
    public static int LLVMConstantTargetNoneValueKind() {
        return (int)26L;
    }
    public static int LLVMIntEQ() {
        return (int)32L;
    }
    public static int LLVMIntNE() {
        return (int)33L;
    }
    public static int LLVMIntUGT() {
        return (int)34L;
    }
    public static int LLVMIntUGE() {
        return (int)35L;
    }
    public static int LLVMIntULT() {
        return (int)36L;
    }
    public static int LLVMIntULE() {
        return (int)37L;
    }
    public static int LLVMIntSGT() {
        return (int)38L;
    }
    public static int LLVMIntSGE() {
        return (int)39L;
    }
    public static int LLVMIntSLT() {
        return (int)40L;
    }
    public static int LLVMIntSLE() {
        return (int)41L;
    }
    public static int LLVMRealPredicateFalse() {
        return (int)0L;
    }
    public static int LLVMRealOEQ() {
        return (int)1L;
    }
    public static int LLVMRealOGT() {
        return (int)2L;
    }
    public static int LLVMRealOGE() {
        return (int)3L;
    }
    public static int LLVMRealOLT() {
        return (int)4L;
    }
    public static int LLVMRealOLE() {
        return (int)5L;
    }
    public static int LLVMRealONE() {
        return (int)6L;
    }
    public static int LLVMRealORD() {
        return (int)7L;
    }
    public static int LLVMRealUNO() {
        return (int)8L;
    }
    public static int LLVMRealUEQ() {
        return (int)9L;
    }
    public static int LLVMRealUGT() {
        return (int)10L;
    }
    public static int LLVMRealUGE() {
        return (int)11L;
    }
    public static int LLVMRealULT() {
        return (int)12L;
    }
    public static int LLVMRealULE() {
        return (int)13L;
    }
    public static int LLVMRealUNE() {
        return (int)14L;
    }
    public static int LLVMRealPredicateTrue() {
        return (int)15L;
    }
    public static int LLVMLandingPadCatch() {
        return (int)0L;
    }
    public static int LLVMLandingPadFilter() {
        return (int)1L;
    }
    public static int LLVMNotThreadLocal() {
        return (int)0L;
    }
    public static int LLVMGeneralDynamicTLSModel() {
        return (int)1L;
    }
    public static int LLVMLocalDynamicTLSModel() {
        return (int)2L;
    }
    public static int LLVMInitialExecTLSModel() {
        return (int)3L;
    }
    public static int LLVMLocalExecTLSModel() {
        return (int)4L;
    }
    public static int LLVMAtomicOrderingNotAtomic() {
        return (int)0L;
    }
    public static int LLVMAtomicOrderingUnordered() {
        return (int)1L;
    }
    public static int LLVMAtomicOrderingMonotonic() {
        return (int)2L;
    }
    public static int LLVMAtomicOrderingAcquire() {
        return (int)4L;
    }
    public static int LLVMAtomicOrderingRelease() {
        return (int)5L;
    }
    public static int LLVMAtomicOrderingAcquireRelease() {
        return (int)6L;
    }
    public static int LLVMAtomicOrderingSequentiallyConsistent() {
        return (int)7L;
    }
    public static int LLVMAtomicRMWBinOpXchg() {
        return (int)0L;
    }
    public static int LLVMAtomicRMWBinOpAdd() {
        return (int)1L;
    }
    public static int LLVMAtomicRMWBinOpSub() {
        return (int)2L;
    }
    public static int LLVMAtomicRMWBinOpAnd() {
        return (int)3L;
    }
    public static int LLVMAtomicRMWBinOpNand() {
        return (int)4L;
    }
    public static int LLVMAtomicRMWBinOpOr() {
        return (int)5L;
    }
    public static int LLVMAtomicRMWBinOpXor() {
        return (int)6L;
    }
    public static int LLVMAtomicRMWBinOpMax() {
        return (int)7L;
    }
    public static int LLVMAtomicRMWBinOpMin() {
        return (int)8L;
    }
    public static int LLVMAtomicRMWBinOpUMax() {
        return (int)9L;
    }
    public static int LLVMAtomicRMWBinOpUMin() {
        return (int)10L;
    }
    public static int LLVMAtomicRMWBinOpFAdd() {
        return (int)11L;
    }
    public static int LLVMAtomicRMWBinOpFSub() {
        return (int)12L;
    }
    public static int LLVMAtomicRMWBinOpFMax() {
        return (int)13L;
    }
    public static int LLVMAtomicRMWBinOpFMin() {
        return (int)14L;
    }
    public static int LLVMDSError() {
        return (int)0L;
    }
    public static int LLVMDSWarning() {
        return (int)1L;
    }
    public static int LLVMDSRemark() {
        return (int)2L;
    }
    public static int LLVMDSNote() {
        return (int)3L;
    }
    public static int LLVMInlineAsmDialectATT() {
        return (int)0L;
    }
    public static int LLVMInlineAsmDialectIntel() {
        return (int)1L;
    }
    public static int LLVMModuleFlagBehaviorError() {
        return (int)0L;
    }
    public static int LLVMModuleFlagBehaviorWarning() {
        return (int)1L;
    }
    public static int LLVMModuleFlagBehaviorRequire() {
        return (int)2L;
    }
    public static int LLVMModuleFlagBehaviorOverride() {
        return (int)3L;
    }
    public static int LLVMModuleFlagBehaviorAppend() {
        return (int)4L;
    }
    public static int LLVMModuleFlagBehaviorAppendUnique() {
        return (int)5L;
    }
    public static int LLVMAttributeReturnIndex() {
        return (int)0L;
    }
    public static int LLVMAttributeFunctionIndex() {
        return (int)-1L;
    }
    public static MethodHandle LLVMInitializeCore$MH() {
        return RuntimeHelper.requireNonNull(constants$79.LLVMInitializeCore$MH,"LLVMInitializeCore");
    }
    public static void LLVMInitializeCore ( Addressable R) {
        var mh$ = LLVMInitializeCore$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMShutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$80.LLVMShutdown$MH,"LLVMShutdown");
    }
    public static void LLVMShutdown () {
        var mh$ = LLVMShutdown$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$80.LLVMGetVersion$MH,"LLVMGetVersion");
    }
    public static void LLVMGetVersion ( Addressable Major,  Addressable Minor,  Addressable Patch) {
        var mh$ = LLVMGetVersion$MH();
        try {
            mh$.invokeExact(Major, Minor, Patch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$80.LLVMCreateMessage$MH,"LLVMCreateMessage");
    }
    public static MemoryAddress LLVMCreateMessage ( Addressable Message) {
        var mh$ = LLVMCreateMessage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$80.LLVMDisposeMessage$MH,"LLVMDisposeMessage");
    }
    public static void LLVMDisposeMessage ( Addressable Message) {
        var mh$ = LLVMDisposeMessage$MH();
        try {
            mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$81.LLVMContextCreate$MH,"LLVMContextCreate");
    }
    public static MemoryAddress LLVMContextCreate () {
        var mh$ = LLVMContextCreate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGlobalContext$MH() {
        return RuntimeHelper.requireNonNull(constants$81.LLVMGetGlobalContext$MH,"LLVMGetGlobalContext");
    }
    public static MemoryAddress LLVMGetGlobalContext () {
        var mh$ = LLVMGetGlobalContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextSetDiagnosticHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$81.LLVMContextSetDiagnosticHandler$MH,"LLVMContextSetDiagnosticHandler");
    }
    public static void LLVMContextSetDiagnosticHandler ( Addressable C,  Addressable Handler,  Addressable DiagnosticContext) {
        var mh$ = LLVMContextSetDiagnosticHandler$MH();
        try {
            mh$.invokeExact(C, Handler, DiagnosticContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextGetDiagnosticHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$81.LLVMContextGetDiagnosticHandler$MH,"LLVMContextGetDiagnosticHandler");
    }
    public static MemoryAddress LLVMContextGetDiagnosticHandler ( Addressable C) {
        var mh$ = LLVMContextGetDiagnosticHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextGetDiagnosticContext$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LLVMContextGetDiagnosticContext$MH,"LLVMContextGetDiagnosticContext");
    }
    public static MemoryAddress LLVMContextGetDiagnosticContext ( Addressable C) {
        var mh$ = LLVMContextGetDiagnosticContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextSetYieldCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LLVMContextSetYieldCallback$MH,"LLVMContextSetYieldCallback");
    }
    public static void LLVMContextSetYieldCallback ( Addressable C,  Addressable Callback,  Addressable OpaqueHandle) {
        var mh$ = LLVMContextSetYieldCallback$MH();
        try {
            mh$.invokeExact(C, Callback, OpaqueHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextShouldDiscardValueNames$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LLVMContextShouldDiscardValueNames$MH,"LLVMContextShouldDiscardValueNames");
    }
    public static int LLVMContextShouldDiscardValueNames ( Addressable C) {
        var mh$ = LLVMContextShouldDiscardValueNames$MH();
        try {
            return (int)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextSetDiscardValueNames$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LLVMContextSetDiscardValueNames$MH,"LLVMContextSetDiscardValueNames");
    }
    public static void LLVMContextSetDiscardValueNames ( Addressable C,  int Discard) {
        var mh$ = LLVMContextSetDiscardValueNames$MH();
        try {
            mh$.invokeExact(C, Discard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMContextDispose$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LLVMContextDispose$MH,"LLVMContextDispose");
    }
    public static void LLVMContextDispose ( Addressable C) {
        var mh$ = LLVMContextDispose$MH();
        try {
            mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDiagInfoDescription$MH() {
        return RuntimeHelper.requireNonNull(constants$82.LLVMGetDiagInfoDescription$MH,"LLVMGetDiagInfoDescription");
    }
    public static MemoryAddress LLVMGetDiagInfoDescription ( Addressable DI) {
        var mh$ = LLVMGetDiagInfoDescription$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(DI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDiagInfoSeverity$MH() {
        return RuntimeHelper.requireNonNull(constants$83.LLVMGetDiagInfoSeverity$MH,"LLVMGetDiagInfoSeverity");
    }
    public static int LLVMGetDiagInfoSeverity ( Addressable DI) {
        var mh$ = LLVMGetDiagInfoSeverity$MH();
        try {
            return (int)mh$.invokeExact(DI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMDKindIDInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$83.LLVMGetMDKindIDInContext$MH,"LLVMGetMDKindIDInContext");
    }
    public static int LLVMGetMDKindIDInContext ( Addressable C,  Addressable Name,  int SLen) {
        var mh$ = LLVMGetMDKindIDInContext$MH();
        try {
            return (int)mh$.invokeExact(C, Name, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMDKindID$MH() {
        return RuntimeHelper.requireNonNull(constants$83.LLVMGetMDKindID$MH,"LLVMGetMDKindID");
    }
    public static int LLVMGetMDKindID ( Addressable Name,  int SLen) {
        var mh$ = LLVMGetMDKindID$MH();
        try {
            return (int)mh$.invokeExact(Name, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetEnumAttributeKindForName$MH() {
        return RuntimeHelper.requireNonNull(constants$83.LLVMGetEnumAttributeKindForName$MH,"LLVMGetEnumAttributeKindForName");
    }
    public static int LLVMGetEnumAttributeKindForName ( Addressable Name,  long SLen) {
        var mh$ = LLVMGetEnumAttributeKindForName$MH();
        try {
            return (int)mh$.invokeExact(Name, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastEnumAttributeKind$MH() {
        return RuntimeHelper.requireNonNull(constants$83.LLVMGetLastEnumAttributeKind$MH,"LLVMGetLastEnumAttributeKind");
    }
    public static int LLVMGetLastEnumAttributeKind () {
        var mh$ = LLVMGetLastEnumAttributeKind$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateEnumAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$83.LLVMCreateEnumAttribute$MH,"LLVMCreateEnumAttribute");
    }
    public static MemoryAddress LLVMCreateEnumAttribute ( Addressable C,  int KindID,  long Val) {
        var mh$ = LLVMCreateEnumAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, KindID, Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetEnumAttributeKind$MH() {
        return RuntimeHelper.requireNonNull(constants$84.LLVMGetEnumAttributeKind$MH,"LLVMGetEnumAttributeKind");
    }
    public static int LLVMGetEnumAttributeKind ( Addressable A) {
        var mh$ = LLVMGetEnumAttributeKind$MH();
        try {
            return (int)mh$.invokeExact(A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetEnumAttributeValue$MH() {
        return RuntimeHelper.requireNonNull(constants$84.LLVMGetEnumAttributeValue$MH,"LLVMGetEnumAttributeValue");
    }
    public static long LLVMGetEnumAttributeValue ( Addressable A) {
        var mh$ = LLVMGetEnumAttributeValue$MH();
        try {
            return (long)mh$.invokeExact(A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateTypeAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$84.LLVMCreateTypeAttribute$MH,"LLVMCreateTypeAttribute");
    }
    public static MemoryAddress LLVMCreateTypeAttribute ( Addressable C,  int KindID,  Addressable type_ref) {
        var mh$ = LLVMCreateTypeAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, KindID, type_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTypeAttributeValue$MH() {
        return RuntimeHelper.requireNonNull(constants$84.LLVMGetTypeAttributeValue$MH,"LLVMGetTypeAttributeValue");
    }
    public static MemoryAddress LLVMGetTypeAttributeValue ( Addressable A) {
        var mh$ = LLVMGetTypeAttributeValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateStringAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$84.LLVMCreateStringAttribute$MH,"LLVMCreateStringAttribute");
    }
    public static MemoryAddress LLVMCreateStringAttribute ( Addressable C,  Addressable K,  int KLength,  Addressable V,  int VLength) {
        var mh$ = LLVMCreateStringAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, K, KLength, V, VLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetStringAttributeKind$MH() {
        return RuntimeHelper.requireNonNull(constants$84.LLVMGetStringAttributeKind$MH,"LLVMGetStringAttributeKind");
    }
    public static MemoryAddress LLVMGetStringAttributeKind ( Addressable A,  Addressable Length) {
        var mh$ = LLVMGetStringAttributeKind$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(A, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetStringAttributeValue$MH() {
        return RuntimeHelper.requireNonNull(constants$85.LLVMGetStringAttributeValue$MH,"LLVMGetStringAttributeValue");
    }
    public static MemoryAddress LLVMGetStringAttributeValue ( Addressable A,  Addressable Length) {
        var mh$ = LLVMGetStringAttributeValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(A, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsEnumAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$85.LLVMIsEnumAttribute$MH,"LLVMIsEnumAttribute");
    }
    public static int LLVMIsEnumAttribute ( Addressable A) {
        var mh$ = LLVMIsEnumAttribute$MH();
        try {
            return (int)mh$.invokeExact(A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsStringAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$85.LLVMIsStringAttribute$MH,"LLVMIsStringAttribute");
    }
    public static int LLVMIsStringAttribute ( Addressable A) {
        var mh$ = LLVMIsStringAttribute$MH();
        try {
            return (int)mh$.invokeExact(A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsTypeAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$85.LLVMIsTypeAttribute$MH,"LLVMIsTypeAttribute");
    }
    public static int LLVMIsTypeAttribute ( Addressable A) {
        var mh$ = LLVMIsTypeAttribute$MH();
        try {
            return (int)mh$.invokeExact(A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTypeByName2$MH() {
        return RuntimeHelper.requireNonNull(constants$85.LLVMGetTypeByName2$MH,"LLVMGetTypeByName2");
    }
    public static MemoryAddress LLVMGetTypeByName2 ( Addressable C,  Addressable Name) {
        var mh$ = LLVMGetTypeByName2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMModuleCreateWithName$MH() {
        return RuntimeHelper.requireNonNull(constants$85.LLVMModuleCreateWithName$MH,"LLVMModuleCreateWithName");
    }
    public static MemoryAddress LLVMModuleCreateWithName ( Addressable ModuleID) {
        var mh$ = LLVMModuleCreateWithName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ModuleID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMModuleCreateWithNameInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$86.LLVMModuleCreateWithNameInContext$MH,"LLVMModuleCreateWithNameInContext");
    }
    public static MemoryAddress LLVMModuleCreateWithNameInContext ( Addressable ModuleID,  Addressable C) {
        var mh$ = LLVMModuleCreateWithNameInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ModuleID, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCloneModule$MH() {
        return RuntimeHelper.requireNonNull(constants$86.LLVMCloneModule$MH,"LLVMCloneModule");
    }
    public static MemoryAddress LLVMCloneModule ( Addressable M) {
        var mh$ = LLVMCloneModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeModule$MH() {
        return RuntimeHelper.requireNonNull(constants$86.LLVMDisposeModule$MH,"LLVMDisposeModule");
    }
    public static void LLVMDisposeModule ( Addressable M) {
        var mh$ = LLVMDisposeModule$MH();
        try {
            mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetModuleIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$86.LLVMGetModuleIdentifier$MH,"LLVMGetModuleIdentifier");
    }
    public static MemoryAddress LLVMGetModuleIdentifier ( Addressable M,  Addressable Len) {
        var mh$ = LLVMGetModuleIdentifier$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetModuleIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$86.LLVMSetModuleIdentifier$MH,"LLVMSetModuleIdentifier");
    }
    public static void LLVMSetModuleIdentifier ( Addressable M,  Addressable Ident,  long Len) {
        var mh$ = LLVMSetModuleIdentifier$MH();
        try {
            mh$.invokeExact(M, Ident, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSourceFileName$MH() {
        return RuntimeHelper.requireNonNull(constants$86.LLVMGetSourceFileName$MH,"LLVMGetSourceFileName");
    }
    public static MemoryAddress LLVMGetSourceFileName ( Addressable M,  Addressable Len) {
        var mh$ = LLVMGetSourceFileName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetSourceFileName$MH() {
        return RuntimeHelper.requireNonNull(constants$87.LLVMSetSourceFileName$MH,"LLVMSetSourceFileName");
    }
    public static void LLVMSetSourceFileName ( Addressable M,  Addressable Name,  long Len) {
        var mh$ = LLVMSetSourceFileName$MH();
        try {
            mh$.invokeExact(M, Name, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDataLayoutStr$MH() {
        return RuntimeHelper.requireNonNull(constants$87.LLVMGetDataLayoutStr$MH,"LLVMGetDataLayoutStr");
    }
    public static MemoryAddress LLVMGetDataLayoutStr ( Addressable M) {
        var mh$ = LLVMGetDataLayoutStr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDataLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$87.LLVMGetDataLayout$MH,"LLVMGetDataLayout");
    }
    public static MemoryAddress LLVMGetDataLayout ( Addressable M) {
        var mh$ = LLVMGetDataLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetDataLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$87.LLVMSetDataLayout$MH,"LLVMSetDataLayout");
    }
    public static void LLVMSetDataLayout ( Addressable M,  Addressable DataLayoutStr) {
        var mh$ = LLVMSetDataLayout$MH();
        try {
            mh$.invokeExact(M, DataLayoutStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$87.LLVMGetTarget$MH,"LLVMGetTarget");
    }
    public static MemoryAddress LLVMGetTarget ( Addressable M) {
        var mh$ = LLVMGetTarget$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$87.LLVMSetTarget$MH,"LLVMSetTarget");
    }
    public static void LLVMSetTarget ( Addressable M,  Addressable Triple) {
        var mh$ = LLVMSetTarget$MH();
        try {
            mh$.invokeExact(M, Triple);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCopyModuleFlagsMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$88.LLVMCopyModuleFlagsMetadata$MH,"LLVMCopyModuleFlagsMetadata");
    }
    public static MemoryAddress LLVMCopyModuleFlagsMetadata ( Addressable M,  Addressable Len) {
        var mh$ = LLVMCopyModuleFlagsMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeModuleFlagsMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$88.LLVMDisposeModuleFlagsMetadata$MH,"LLVMDisposeModuleFlagsMetadata");
    }
    public static void LLVMDisposeModuleFlagsMetadata ( Addressable Entries) {
        var mh$ = LLVMDisposeModuleFlagsMetadata$MH();
        try {
            mh$.invokeExact(Entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMModuleFlagEntriesGetFlagBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$88.LLVMModuleFlagEntriesGetFlagBehavior$MH,"LLVMModuleFlagEntriesGetFlagBehavior");
    }
    public static int LLVMModuleFlagEntriesGetFlagBehavior ( Addressable Entries,  int Index) {
        var mh$ = LLVMModuleFlagEntriesGetFlagBehavior$MH();
        try {
            return (int)mh$.invokeExact(Entries, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMModuleFlagEntriesGetKey$MH() {
        return RuntimeHelper.requireNonNull(constants$88.LLVMModuleFlagEntriesGetKey$MH,"LLVMModuleFlagEntriesGetKey");
    }
    public static MemoryAddress LLVMModuleFlagEntriesGetKey ( Addressable Entries,  int Index,  Addressable Len) {
        var mh$ = LLVMModuleFlagEntriesGetKey$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Entries, Index, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMModuleFlagEntriesGetMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$88.LLVMModuleFlagEntriesGetMetadata$MH,"LLVMModuleFlagEntriesGetMetadata");
    }
    public static MemoryAddress LLVMModuleFlagEntriesGetMetadata ( Addressable Entries,  int Index) {
        var mh$ = LLVMModuleFlagEntriesGetMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Entries, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetModuleFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$88.LLVMGetModuleFlag$MH,"LLVMGetModuleFlag");
    }
    public static MemoryAddress LLVMGetModuleFlag ( Addressable M,  Addressable Key,  long KeyLen) {
        var mh$ = LLVMGetModuleFlag$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Key, KeyLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddModuleFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$89.LLVMAddModuleFlag$MH,"LLVMAddModuleFlag");
    }
    public static void LLVMAddModuleFlag ( Addressable M,  int Behavior,  Addressable Key,  long KeyLen,  Addressable Val) {
        var mh$ = LLVMAddModuleFlag$MH();
        try {
            mh$.invokeExact(M, Behavior, Key, KeyLen, Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDumpModule$MH() {
        return RuntimeHelper.requireNonNull(constants$89.LLVMDumpModule$MH,"LLVMDumpModule");
    }
    public static void LLVMDumpModule ( Addressable M) {
        var mh$ = LLVMDumpModule$MH();
        try {
            mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPrintModuleToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$89.LLVMPrintModuleToFile$MH,"LLVMPrintModuleToFile");
    }
    public static int LLVMPrintModuleToFile ( Addressable M,  Addressable Filename,  Addressable ErrorMessage) {
        var mh$ = LLVMPrintModuleToFile$MH();
        try {
            return (int)mh$.invokeExact(M, Filename, ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPrintModuleToString$MH() {
        return RuntimeHelper.requireNonNull(constants$89.LLVMPrintModuleToString$MH,"LLVMPrintModuleToString");
    }
    public static MemoryAddress LLVMPrintModuleToString ( Addressable M) {
        var mh$ = LLVMPrintModuleToString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetModuleInlineAsm$MH() {
        return RuntimeHelper.requireNonNull(constants$89.LLVMGetModuleInlineAsm$MH,"LLVMGetModuleInlineAsm");
    }
    public static MemoryAddress LLVMGetModuleInlineAsm ( Addressable M,  Addressable Len) {
        var mh$ = LLVMGetModuleInlineAsm$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetModuleInlineAsm2$MH() {
        return RuntimeHelper.requireNonNull(constants$89.LLVMSetModuleInlineAsm2$MH,"LLVMSetModuleInlineAsm2");
    }
    public static void LLVMSetModuleInlineAsm2 ( Addressable M,  Addressable Asm,  long Len) {
        var mh$ = LLVMSetModuleInlineAsm2$MH();
        try {
            mh$.invokeExact(M, Asm, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAppendModuleInlineAsm$MH() {
        return RuntimeHelper.requireNonNull(constants$90.LLVMAppendModuleInlineAsm$MH,"LLVMAppendModuleInlineAsm");
    }
    public static void LLVMAppendModuleInlineAsm ( Addressable M,  Addressable Asm,  long Len) {
        var mh$ = LLVMAppendModuleInlineAsm$MH();
        try {
            mh$.invokeExact(M, Asm, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetInlineAsm$MH() {
        return RuntimeHelper.requireNonNull(constants$90.LLVMGetInlineAsm$MH,"LLVMGetInlineAsm");
    }
    public static MemoryAddress LLVMGetInlineAsm ( Addressable Ty,  Addressable AsmString,  long AsmStringSize,  Addressable Constraints,  long ConstraintsSize,  int HasSideEffects,  int IsAlignStack,  int Dialect,  int CanThrow) {
        var mh$ = LLVMGetInlineAsm$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty, AsmString, AsmStringSize, Constraints, ConstraintsSize, HasSideEffects, IsAlignStack, Dialect, CanThrow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetModuleContext$MH() {
        return RuntimeHelper.requireNonNull(constants$90.LLVMGetModuleContext$MH,"LLVMGetModuleContext");
    }
    public static MemoryAddress LLVMGetModuleContext ( Addressable M) {
        var mh$ = LLVMGetModuleContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTypeByName$MH() {
        return RuntimeHelper.requireNonNull(constants$90.LLVMGetTypeByName$MH,"LLVMGetTypeByName");
    }
    public static MemoryAddress LLVMGetTypeByName ( Addressable M,  Addressable Name) {
        var mh$ = LLVMGetTypeByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstNamedMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$90.LLVMGetFirstNamedMetadata$MH,"LLVMGetFirstNamedMetadata");
    }
    public static MemoryAddress LLVMGetFirstNamedMetadata ( Addressable M) {
        var mh$ = LLVMGetFirstNamedMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastNamedMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$90.LLVMGetLastNamedMetadata$MH,"LLVMGetLastNamedMetadata");
    }
    public static MemoryAddress LLVMGetLastNamedMetadata ( Addressable M) {
        var mh$ = LLVMGetLastNamedMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextNamedMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$91.LLVMGetNextNamedMetadata$MH,"LLVMGetNextNamedMetadata");
    }
    public static MemoryAddress LLVMGetNextNamedMetadata ( Addressable NamedMDNode) {
        var mh$ = LLVMGetNextNamedMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NamedMDNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousNamedMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$91.LLVMGetPreviousNamedMetadata$MH,"LLVMGetPreviousNamedMetadata");
    }
    public static MemoryAddress LLVMGetPreviousNamedMetadata ( Addressable NamedMDNode) {
        var mh$ = LLVMGetPreviousNamedMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NamedMDNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$91.LLVMGetNamedMetadata$MH,"LLVMGetNamedMetadata");
    }
    public static MemoryAddress LLVMGetNamedMetadata ( Addressable M,  Addressable Name,  long NameLen) {
        var mh$ = LLVMGetNamedMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetOrInsertNamedMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$91.LLVMGetOrInsertNamedMetadata$MH,"LLVMGetOrInsertNamedMetadata");
    }
    public static MemoryAddress LLVMGetOrInsertNamedMetadata ( Addressable M,  Addressable Name,  long NameLen) {
        var mh$ = LLVMGetOrInsertNamedMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedMetadataName$MH() {
        return RuntimeHelper.requireNonNull(constants$91.LLVMGetNamedMetadataName$MH,"LLVMGetNamedMetadataName");
    }
    public static MemoryAddress LLVMGetNamedMetadataName ( Addressable NamedMD,  Addressable NameLen) {
        var mh$ = LLVMGetNamedMetadataName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NamedMD, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedMetadataNumOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$91.LLVMGetNamedMetadataNumOperands$MH,"LLVMGetNamedMetadataNumOperands");
    }
    public static int LLVMGetNamedMetadataNumOperands ( Addressable M,  Addressable Name) {
        var mh$ = LLVMGetNamedMetadataNumOperands$MH();
        try {
            return (int)mh$.invokeExact(M, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedMetadataOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$92.LLVMGetNamedMetadataOperands$MH,"LLVMGetNamedMetadataOperands");
    }
    public static void LLVMGetNamedMetadataOperands ( Addressable M,  Addressable Name,  Addressable Dest) {
        var mh$ = LLVMGetNamedMetadataOperands$MH();
        try {
            mh$.invokeExact(M, Name, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddNamedMetadataOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$92.LLVMAddNamedMetadataOperand$MH,"LLVMAddNamedMetadataOperand");
    }
    public static void LLVMAddNamedMetadataOperand ( Addressable M,  Addressable Name,  Addressable Val) {
        var mh$ = LLVMAddNamedMetadataOperand$MH();
        try {
            mh$.invokeExact(M, Name, Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDebugLocDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$92.LLVMGetDebugLocDirectory$MH,"LLVMGetDebugLocDirectory");
    }
    public static MemoryAddress LLVMGetDebugLocDirectory ( Addressable Val,  Addressable Length) {
        var mh$ = LLVMGetDebugLocDirectory$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDebugLocFilename$MH() {
        return RuntimeHelper.requireNonNull(constants$92.LLVMGetDebugLocFilename$MH,"LLVMGetDebugLocFilename");
    }
    public static MemoryAddress LLVMGetDebugLocFilename ( Addressable Val,  Addressable Length) {
        var mh$ = LLVMGetDebugLocFilename$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDebugLocLine$MH() {
        return RuntimeHelper.requireNonNull(constants$92.LLVMGetDebugLocLine$MH,"LLVMGetDebugLocLine");
    }
    public static int LLVMGetDebugLocLine ( Addressable Val) {
        var mh$ = LLVMGetDebugLocLine$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDebugLocColumn$MH() {
        return RuntimeHelper.requireNonNull(constants$92.LLVMGetDebugLocColumn$MH,"LLVMGetDebugLocColumn");
    }
    public static int LLVMGetDebugLocColumn ( Addressable Val) {
        var mh$ = LLVMGetDebugLocColumn$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$93.LLVMAddFunction$MH,"LLVMAddFunction");
    }
    public static MemoryAddress LLVMAddFunction ( Addressable M,  Addressable Name,  Addressable FunctionTy) {
        var mh$ = LLVMAddFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name, FunctionTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$93.LLVMGetNamedFunction$MH,"LLVMGetNamedFunction");
    }
    public static MemoryAddress LLVMGetNamedFunction ( Addressable M,  Addressable Name) {
        var mh$ = LLVMGetNamedFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$93.LLVMGetFirstFunction$MH,"LLVMGetFirstFunction");
    }
    public static MemoryAddress LLVMGetFirstFunction ( Addressable M) {
        var mh$ = LLVMGetFirstFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$93.LLVMGetLastFunction$MH,"LLVMGetLastFunction");
    }
    public static MemoryAddress LLVMGetLastFunction ( Addressable M) {
        var mh$ = LLVMGetLastFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$93.LLVMGetNextFunction$MH,"LLVMGetNextFunction");
    }
    public static MemoryAddress LLVMGetNextFunction ( Addressable Fn) {
        var mh$ = LLVMGetNextFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$93.LLVMGetPreviousFunction$MH,"LLVMGetPreviousFunction");
    }
    public static MemoryAddress LLVMGetPreviousFunction ( Addressable Fn) {
        var mh$ = LLVMGetPreviousFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetModuleInlineAsm$MH() {
        return RuntimeHelper.requireNonNull(constants$94.LLVMSetModuleInlineAsm$MH,"LLVMSetModuleInlineAsm");
    }
    public static void LLVMSetModuleInlineAsm ( Addressable M,  Addressable Asm) {
        var mh$ = LLVMSetModuleInlineAsm$MH();
        try {
            mh$.invokeExact(M, Asm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTypeKind$MH() {
        return RuntimeHelper.requireNonNull(constants$94.LLVMGetTypeKind$MH,"LLVMGetTypeKind");
    }
    public static int LLVMGetTypeKind ( Addressable Ty) {
        var mh$ = LLVMGetTypeKind$MH();
        try {
            return (int)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTypeIsSized$MH() {
        return RuntimeHelper.requireNonNull(constants$94.LLVMTypeIsSized$MH,"LLVMTypeIsSized");
    }
    public static int LLVMTypeIsSized ( Addressable Ty) {
        var mh$ = LLVMTypeIsSized$MH();
        try {
            return (int)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTypeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$94.LLVMGetTypeContext$MH,"LLVMGetTypeContext");
    }
    public static MemoryAddress LLVMGetTypeContext ( Addressable Ty) {
        var mh$ = LLVMGetTypeContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDumpType$MH() {
        return RuntimeHelper.requireNonNull(constants$94.LLVMDumpType$MH,"LLVMDumpType");
    }
    public static void LLVMDumpType ( Addressable Val) {
        var mh$ = LLVMDumpType$MH();
        try {
            mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPrintTypeToString$MH() {
        return RuntimeHelper.requireNonNull(constants$94.LLVMPrintTypeToString$MH,"LLVMPrintTypeToString");
    }
    public static MemoryAddress LLVMPrintTypeToString ( Addressable Val) {
        var mh$ = LLVMPrintTypeToString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt1TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$95.LLVMInt1TypeInContext$MH,"LLVMInt1TypeInContext");
    }
    public static MemoryAddress LLVMInt1TypeInContext ( Addressable C) {
        var mh$ = LLVMInt1TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt8TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$95.LLVMInt8TypeInContext$MH,"LLVMInt8TypeInContext");
    }
    public static MemoryAddress LLVMInt8TypeInContext ( Addressable C) {
        var mh$ = LLVMInt8TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt16TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$95.LLVMInt16TypeInContext$MH,"LLVMInt16TypeInContext");
    }
    public static MemoryAddress LLVMInt16TypeInContext ( Addressable C) {
        var mh$ = LLVMInt16TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt32TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$95.LLVMInt32TypeInContext$MH,"LLVMInt32TypeInContext");
    }
    public static MemoryAddress LLVMInt32TypeInContext ( Addressable C) {
        var mh$ = LLVMInt32TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt64TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$95.LLVMInt64TypeInContext$MH,"LLVMInt64TypeInContext");
    }
    public static MemoryAddress LLVMInt64TypeInContext ( Addressable C) {
        var mh$ = LLVMInt64TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt128TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$95.LLVMInt128TypeInContext$MH,"LLVMInt128TypeInContext");
    }
    public static MemoryAddress LLVMInt128TypeInContext ( Addressable C) {
        var mh$ = LLVMInt128TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$96.LLVMIntTypeInContext$MH,"LLVMIntTypeInContext");
    }
    public static MemoryAddress LLVMIntTypeInContext ( Addressable C,  int NumBits) {
        var mh$ = LLVMIntTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, NumBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt1Type$MH() {
        return RuntimeHelper.requireNonNull(constants$96.LLVMInt1Type$MH,"LLVMInt1Type");
    }
    public static MemoryAddress LLVMInt1Type () {
        var mh$ = LLVMInt1Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt8Type$MH() {
        return RuntimeHelper.requireNonNull(constants$96.LLVMInt8Type$MH,"LLVMInt8Type");
    }
    public static MemoryAddress LLVMInt8Type () {
        var mh$ = LLVMInt8Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt16Type$MH() {
        return RuntimeHelper.requireNonNull(constants$96.LLVMInt16Type$MH,"LLVMInt16Type");
    }
    public static MemoryAddress LLVMInt16Type () {
        var mh$ = LLVMInt16Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt32Type$MH() {
        return RuntimeHelper.requireNonNull(constants$96.LLVMInt32Type$MH,"LLVMInt32Type");
    }
    public static MemoryAddress LLVMInt32Type () {
        var mh$ = LLVMInt32Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt64Type$MH() {
        return RuntimeHelper.requireNonNull(constants$96.LLVMInt64Type$MH,"LLVMInt64Type");
    }
    public static MemoryAddress LLVMInt64Type () {
        var mh$ = LLVMInt64Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInt128Type$MH() {
        return RuntimeHelper.requireNonNull(constants$97.LLVMInt128Type$MH,"LLVMInt128Type");
    }
    public static MemoryAddress LLVMInt128Type () {
        var mh$ = LLVMInt128Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntType$MH() {
        return RuntimeHelper.requireNonNull(constants$97.LLVMIntType$MH,"LLVMIntType");
    }
    public static MemoryAddress LLVMIntType ( int NumBits) {
        var mh$ = LLVMIntType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NumBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetIntTypeWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$97.LLVMGetIntTypeWidth$MH,"LLVMGetIntTypeWidth");
    }
    public static int LLVMGetIntTypeWidth ( Addressable IntegerTy) {
        var mh$ = LLVMGetIntTypeWidth$MH();
        try {
            return (int)mh$.invokeExact(IntegerTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMHalfTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$97.LLVMHalfTypeInContext$MH,"LLVMHalfTypeInContext");
    }
    public static MemoryAddress LLVMHalfTypeInContext ( Addressable C) {
        var mh$ = LLVMHalfTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBFloatTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$97.LLVMBFloatTypeInContext$MH,"LLVMBFloatTypeInContext");
    }
    public static MemoryAddress LLVMBFloatTypeInContext ( Addressable C) {
        var mh$ = LLVMBFloatTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFloatTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$97.LLVMFloatTypeInContext$MH,"LLVMFloatTypeInContext");
    }
    public static MemoryAddress LLVMFloatTypeInContext ( Addressable C) {
        var mh$ = LLVMFloatTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDoubleTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$98.LLVMDoubleTypeInContext$MH,"LLVMDoubleTypeInContext");
    }
    public static MemoryAddress LLVMDoubleTypeInContext ( Addressable C) {
        var mh$ = LLVMDoubleTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMX86FP80TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$98.LLVMX86FP80TypeInContext$MH,"LLVMX86FP80TypeInContext");
    }
    public static MemoryAddress LLVMX86FP80TypeInContext ( Addressable C) {
        var mh$ = LLVMX86FP80TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFP128TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$98.LLVMFP128TypeInContext$MH,"LLVMFP128TypeInContext");
    }
    public static MemoryAddress LLVMFP128TypeInContext ( Addressable C) {
        var mh$ = LLVMFP128TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPPCFP128TypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$98.LLVMPPCFP128TypeInContext$MH,"LLVMPPCFP128TypeInContext");
    }
    public static MemoryAddress LLVMPPCFP128TypeInContext ( Addressable C) {
        var mh$ = LLVMPPCFP128TypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMHalfType$MH() {
        return RuntimeHelper.requireNonNull(constants$98.LLVMHalfType$MH,"LLVMHalfType");
    }
    public static MemoryAddress LLVMHalfType () {
        var mh$ = LLVMHalfType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBFloatType$MH() {
        return RuntimeHelper.requireNonNull(constants$98.LLVMBFloatType$MH,"LLVMBFloatType");
    }
    public static MemoryAddress LLVMBFloatType () {
        var mh$ = LLVMBFloatType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFloatType$MH() {
        return RuntimeHelper.requireNonNull(constants$99.LLVMFloatType$MH,"LLVMFloatType");
    }
    public static MemoryAddress LLVMFloatType () {
        var mh$ = LLVMFloatType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDoubleType$MH() {
        return RuntimeHelper.requireNonNull(constants$99.LLVMDoubleType$MH,"LLVMDoubleType");
    }
    public static MemoryAddress LLVMDoubleType () {
        var mh$ = LLVMDoubleType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMX86FP80Type$MH() {
        return RuntimeHelper.requireNonNull(constants$99.LLVMX86FP80Type$MH,"LLVMX86FP80Type");
    }
    public static MemoryAddress LLVMX86FP80Type () {
        var mh$ = LLVMX86FP80Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFP128Type$MH() {
        return RuntimeHelper.requireNonNull(constants$99.LLVMFP128Type$MH,"LLVMFP128Type");
    }
    public static MemoryAddress LLVMFP128Type () {
        var mh$ = LLVMFP128Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPPCFP128Type$MH() {
        return RuntimeHelper.requireNonNull(constants$99.LLVMPPCFP128Type$MH,"LLVMPPCFP128Type");
    }
    public static MemoryAddress LLVMPPCFP128Type () {
        var mh$ = LLVMPPCFP128Type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFunctionType$MH() {
        return RuntimeHelper.requireNonNull(constants$99.LLVMFunctionType$MH,"LLVMFunctionType");
    }
    public static MemoryAddress LLVMFunctionType ( Addressable ReturnType,  Addressable ParamTypes,  int ParamCount,  int IsVarArg) {
        var mh$ = LLVMFunctionType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ReturnType, ParamTypes, ParamCount, IsVarArg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsFunctionVarArg$MH() {
        return RuntimeHelper.requireNonNull(constants$100.LLVMIsFunctionVarArg$MH,"LLVMIsFunctionVarArg");
    }
    public static int LLVMIsFunctionVarArg ( Addressable FunctionTy) {
        var mh$ = LLVMIsFunctionVarArg$MH();
        try {
            return (int)mh$.invokeExact(FunctionTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetReturnType$MH() {
        return RuntimeHelper.requireNonNull(constants$100.LLVMGetReturnType$MH,"LLVMGetReturnType");
    }
    public static MemoryAddress LLVMGetReturnType ( Addressable FunctionTy) {
        var mh$ = LLVMGetReturnType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(FunctionTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCountParamTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$100.LLVMCountParamTypes$MH,"LLVMCountParamTypes");
    }
    public static int LLVMCountParamTypes ( Addressable FunctionTy) {
        var mh$ = LLVMCountParamTypes$MH();
        try {
            return (int)mh$.invokeExact(FunctionTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetParamTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$100.LLVMGetParamTypes$MH,"LLVMGetParamTypes");
    }
    public static void LLVMGetParamTypes ( Addressable FunctionTy,  Addressable Dest) {
        var mh$ = LLVMGetParamTypes$MH();
        try {
            mh$.invokeExact(FunctionTy, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStructTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$100.LLVMStructTypeInContext$MH,"LLVMStructTypeInContext");
    }
    public static MemoryAddress LLVMStructTypeInContext ( Addressable C,  Addressable ElementTypes,  int ElementCount,  int Packed) {
        var mh$ = LLVMStructTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, ElementTypes, ElementCount, Packed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStructType$MH() {
        return RuntimeHelper.requireNonNull(constants$100.LLVMStructType$MH,"LLVMStructType");
    }
    public static MemoryAddress LLVMStructType ( Addressable ElementTypes,  int ElementCount,  int Packed) {
        var mh$ = LLVMStructType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementTypes, ElementCount, Packed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStructCreateNamed$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LLVMStructCreateNamed$MH,"LLVMStructCreateNamed");
    }
    public static MemoryAddress LLVMStructCreateNamed ( Addressable C,  Addressable Name) {
        var mh$ = LLVMStructCreateNamed$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetStructName$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LLVMGetStructName$MH,"LLVMGetStructName");
    }
    public static MemoryAddress LLVMGetStructName ( Addressable Ty) {
        var mh$ = LLVMGetStructName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStructSetBody$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LLVMStructSetBody$MH,"LLVMStructSetBody");
    }
    public static void LLVMStructSetBody ( Addressable StructTy,  Addressable ElementTypes,  int ElementCount,  int Packed) {
        var mh$ = LLVMStructSetBody$MH();
        try {
            mh$.invokeExact(StructTy, ElementTypes, ElementCount, Packed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCountStructElementTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LLVMCountStructElementTypes$MH,"LLVMCountStructElementTypes");
    }
    public static int LLVMCountStructElementTypes ( Addressable StructTy) {
        var mh$ = LLVMCountStructElementTypes$MH();
        try {
            return (int)mh$.invokeExact(StructTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetStructElementTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LLVMGetStructElementTypes$MH,"LLVMGetStructElementTypes");
    }
    public static void LLVMGetStructElementTypes ( Addressable StructTy,  Addressable Dest) {
        var mh$ = LLVMGetStructElementTypes$MH();
        try {
            mh$.invokeExact(StructTy, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStructGetTypeAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$101.LLVMStructGetTypeAtIndex$MH,"LLVMStructGetTypeAtIndex");
    }
    public static MemoryAddress LLVMStructGetTypeAtIndex ( Addressable StructTy,  int i) {
        var mh$ = LLVMStructGetTypeAtIndex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(StructTy, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsPackedStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$102.LLVMIsPackedStruct$MH,"LLVMIsPackedStruct");
    }
    public static int LLVMIsPackedStruct ( Addressable StructTy) {
        var mh$ = LLVMIsPackedStruct$MH();
        try {
            return (int)mh$.invokeExact(StructTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsOpaqueStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$102.LLVMIsOpaqueStruct$MH,"LLVMIsOpaqueStruct");
    }
    public static int LLVMIsOpaqueStruct ( Addressable StructTy) {
        var mh$ = LLVMIsOpaqueStruct$MH();
        try {
            return (int)mh$.invokeExact(StructTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsLiteralStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$102.LLVMIsLiteralStruct$MH,"LLVMIsLiteralStruct");
    }
    public static int LLVMIsLiteralStruct ( Addressable StructTy) {
        var mh$ = LLVMIsLiteralStruct$MH();
        try {
            return (int)mh$.invokeExact(StructTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetElementType$MH() {
        return RuntimeHelper.requireNonNull(constants$102.LLVMGetElementType$MH,"LLVMGetElementType");
    }
    public static MemoryAddress LLVMGetElementType ( Addressable Ty) {
        var mh$ = LLVMGetElementType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSubtypes$MH() {
        return RuntimeHelper.requireNonNull(constants$102.LLVMGetSubtypes$MH,"LLVMGetSubtypes");
    }
    public static void LLVMGetSubtypes ( Addressable Tp,  Addressable Arr) {
        var mh$ = LLVMGetSubtypes$MH();
        try {
            mh$.invokeExact(Tp, Arr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumContainedTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$102.LLVMGetNumContainedTypes$MH,"LLVMGetNumContainedTypes");
    }
    public static int LLVMGetNumContainedTypes ( Addressable Tp) {
        var mh$ = LLVMGetNumContainedTypes$MH();
        try {
            return (int)mh$.invokeExact(Tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMArrayType$MH() {
        return RuntimeHelper.requireNonNull(constants$103.LLVMArrayType$MH,"LLVMArrayType");
    }
    public static MemoryAddress LLVMArrayType ( Addressable ElementType,  int ElementCount) {
        var mh$ = LLVMArrayType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementType, ElementCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMArrayType2$MH() {
        return RuntimeHelper.requireNonNull(constants$103.LLVMArrayType2$MH,"LLVMArrayType2");
    }
    public static MemoryAddress LLVMArrayType2 ( Addressable ElementType,  long ElementCount) {
        var mh$ = LLVMArrayType2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementType, ElementCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetArrayLength$MH() {
        return RuntimeHelper.requireNonNull(constants$103.LLVMGetArrayLength$MH,"LLVMGetArrayLength");
    }
    public static int LLVMGetArrayLength ( Addressable ArrayTy) {
        var mh$ = LLVMGetArrayLength$MH();
        try {
            return (int)mh$.invokeExact(ArrayTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetArrayLength2$MH() {
        return RuntimeHelper.requireNonNull(constants$103.LLVMGetArrayLength2$MH,"LLVMGetArrayLength2");
    }
    public static long LLVMGetArrayLength2 ( Addressable ArrayTy) {
        var mh$ = LLVMGetArrayLength2$MH();
        try {
            return (long)mh$.invokeExact(ArrayTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$103.LLVMPointerType$MH,"LLVMPointerType");
    }
    public static MemoryAddress LLVMPointerType ( Addressable ElementType,  int AddressSpace) {
        var mh$ = LLVMPointerType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementType, AddressSpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPointerTypeIsOpaque$MH() {
        return RuntimeHelper.requireNonNull(constants$103.LLVMPointerTypeIsOpaque$MH,"LLVMPointerTypeIsOpaque");
    }
    public static int LLVMPointerTypeIsOpaque ( Addressable Ty) {
        var mh$ = LLVMPointerTypeIsOpaque$MH();
        try {
            return (int)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPointerTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$104.LLVMPointerTypeInContext$MH,"LLVMPointerTypeInContext");
    }
    public static MemoryAddress LLVMPointerTypeInContext ( Addressable C,  int AddressSpace) {
        var mh$ = LLVMPointerTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, AddressSpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPointerAddressSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$104.LLVMGetPointerAddressSpace$MH,"LLVMGetPointerAddressSpace");
    }
    public static int LLVMGetPointerAddressSpace ( Addressable PointerTy) {
        var mh$ = LLVMGetPointerAddressSpace$MH();
        try {
            return (int)mh$.invokeExact(PointerTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMVectorType$MH() {
        return RuntimeHelper.requireNonNull(constants$104.LLVMVectorType$MH,"LLVMVectorType");
    }
    public static MemoryAddress LLVMVectorType ( Addressable ElementType,  int ElementCount) {
        var mh$ = LLVMVectorType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementType, ElementCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMScalableVectorType$MH() {
        return RuntimeHelper.requireNonNull(constants$104.LLVMScalableVectorType$MH,"LLVMScalableVectorType");
    }
    public static MemoryAddress LLVMScalableVectorType ( Addressable ElementType,  int ElementCount) {
        var mh$ = LLVMScalableVectorType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementType, ElementCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetVectorSize$MH() {
        return RuntimeHelper.requireNonNull(constants$104.LLVMGetVectorSize$MH,"LLVMGetVectorSize");
    }
    public static int LLVMGetVectorSize ( Addressable VectorTy) {
        var mh$ = LLVMGetVectorSize$MH();
        try {
            return (int)mh$.invokeExact(VectorTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMVoidTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$104.LLVMVoidTypeInContext$MH,"LLVMVoidTypeInContext");
    }
    public static MemoryAddress LLVMVoidTypeInContext ( Addressable C) {
        var mh$ = LLVMVoidTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMLabelTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$105.LLVMLabelTypeInContext$MH,"LLVMLabelTypeInContext");
    }
    public static MemoryAddress LLVMLabelTypeInContext ( Addressable C) {
        var mh$ = LLVMLabelTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMX86MMXTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$105.LLVMX86MMXTypeInContext$MH,"LLVMX86MMXTypeInContext");
    }
    public static MemoryAddress LLVMX86MMXTypeInContext ( Addressable C) {
        var mh$ = LLVMX86MMXTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMX86AMXTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$105.LLVMX86AMXTypeInContext$MH,"LLVMX86AMXTypeInContext");
    }
    public static MemoryAddress LLVMX86AMXTypeInContext ( Addressable C) {
        var mh$ = LLVMX86AMXTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTokenTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$105.LLVMTokenTypeInContext$MH,"LLVMTokenTypeInContext");
    }
    public static MemoryAddress LLVMTokenTypeInContext ( Addressable C) {
        var mh$ = LLVMTokenTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMetadataTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$105.LLVMMetadataTypeInContext$MH,"LLVMMetadataTypeInContext");
    }
    public static MemoryAddress LLVMMetadataTypeInContext ( Addressable C) {
        var mh$ = LLVMMetadataTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMVoidType$MH() {
        return RuntimeHelper.requireNonNull(constants$105.LLVMVoidType$MH,"LLVMVoidType");
    }
    public static MemoryAddress LLVMVoidType () {
        var mh$ = LLVMVoidType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMLabelType$MH() {
        return RuntimeHelper.requireNonNull(constants$106.LLVMLabelType$MH,"LLVMLabelType");
    }
    public static MemoryAddress LLVMLabelType () {
        var mh$ = LLVMLabelType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMX86MMXType$MH() {
        return RuntimeHelper.requireNonNull(constants$106.LLVMX86MMXType$MH,"LLVMX86MMXType");
    }
    public static MemoryAddress LLVMX86MMXType () {
        var mh$ = LLVMX86MMXType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMX86AMXType$MH() {
        return RuntimeHelper.requireNonNull(constants$106.LLVMX86AMXType$MH,"LLVMX86AMXType");
    }
    public static MemoryAddress LLVMX86AMXType () {
        var mh$ = LLVMX86AMXType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTargetExtTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$106.LLVMTargetExtTypeInContext$MH,"LLVMTargetExtTypeInContext");
    }
    public static MemoryAddress LLVMTargetExtTypeInContext ( Addressable C,  Addressable Name,  Addressable TypeParams,  int TypeParamCount,  Addressable IntParams,  int IntParamCount) {
        var mh$ = LLVMTargetExtTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Name, TypeParams, TypeParamCount, IntParams, IntParamCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTypeOf$MH() {
        return RuntimeHelper.requireNonNull(constants$106.LLVMTypeOf$MH,"LLVMTypeOf");
    }
    public static MemoryAddress LLVMTypeOf ( Addressable Val) {
        var mh$ = LLVMTypeOf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetValueKind$MH() {
        return RuntimeHelper.requireNonNull(constants$106.LLVMGetValueKind$MH,"LLVMGetValueKind");
    }
    public static int LLVMGetValueKind ( Addressable Val) {
        var mh$ = LLVMGetValueKind$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetValueName2$MH() {
        return RuntimeHelper.requireNonNull(constants$107.LLVMGetValueName2$MH,"LLVMGetValueName2");
    }
    public static MemoryAddress LLVMGetValueName2 ( Addressable Val,  Addressable Length) {
        var mh$ = LLVMGetValueName2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetValueName2$MH() {
        return RuntimeHelper.requireNonNull(constants$107.LLVMSetValueName2$MH,"LLVMSetValueName2");
    }
    public static void LLVMSetValueName2 ( Addressable Val,  Addressable Name,  long NameLen) {
        var mh$ = LLVMSetValueName2$MH();
        try {
            mh$.invokeExact(Val, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDumpValue$MH() {
        return RuntimeHelper.requireNonNull(constants$107.LLVMDumpValue$MH,"LLVMDumpValue");
    }
    public static void LLVMDumpValue ( Addressable Val) {
        var mh$ = LLVMDumpValue$MH();
        try {
            mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPrintValueToString$MH() {
        return RuntimeHelper.requireNonNull(constants$107.LLVMPrintValueToString$MH,"LLVMPrintValueToString");
    }
    public static MemoryAddress LLVMPrintValueToString ( Addressable Val) {
        var mh$ = LLVMPrintValueToString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMReplaceAllUsesWith$MH() {
        return RuntimeHelper.requireNonNull(constants$107.LLVMReplaceAllUsesWith$MH,"LLVMReplaceAllUsesWith");
    }
    public static void LLVMReplaceAllUsesWith ( Addressable OldVal,  Addressable NewVal) {
        var mh$ = LLVMReplaceAllUsesWith$MH();
        try {
            mh$.invokeExact(OldVal, NewVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$107.LLVMIsConstant$MH,"LLVMIsConstant");
    }
    public static int LLVMIsConstant ( Addressable Val) {
        var mh$ = LLVMIsConstant$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsUndef$MH() {
        return RuntimeHelper.requireNonNull(constants$108.LLVMIsUndef$MH,"LLVMIsUndef");
    }
    public static int LLVMIsUndef ( Addressable Val) {
        var mh$ = LLVMIsUndef$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsPoison$MH() {
        return RuntimeHelper.requireNonNull(constants$108.LLVMIsPoison$MH,"LLVMIsPoison");
    }
    public static int LLVMIsPoison ( Addressable Val) {
        var mh$ = LLVMIsPoison$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAArgument$MH() {
        return RuntimeHelper.requireNonNull(constants$108.LLVMIsAArgument$MH,"LLVMIsAArgument");
    }
    public static MemoryAddress LLVMIsAArgument ( Addressable Val) {
        var mh$ = LLVMIsAArgument$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsABasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$108.LLVMIsABasicBlock$MH,"LLVMIsABasicBlock");
    }
    public static MemoryAddress LLVMIsABasicBlock ( Addressable Val) {
        var mh$ = LLVMIsABasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAInlineAsm$MH() {
        return RuntimeHelper.requireNonNull(constants$108.LLVMIsAInlineAsm$MH,"LLVMIsAInlineAsm");
    }
    public static MemoryAddress LLVMIsAInlineAsm ( Addressable Val) {
        var mh$ = LLVMIsAInlineAsm$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAUser$MH() {
        return RuntimeHelper.requireNonNull(constants$108.LLVMIsAUser$MH,"LLVMIsAUser");
    }
    public static MemoryAddress LLVMIsAUser ( Addressable Val) {
        var mh$ = LLVMIsAUser$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$109.LLVMIsAConstant$MH,"LLVMIsAConstant");
    }
    public static MemoryAddress LLVMIsAConstant ( Addressable Val) {
        var mh$ = LLVMIsAConstant$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsABlockAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$109.LLVMIsABlockAddress$MH,"LLVMIsABlockAddress");
    }
    public static MemoryAddress LLVMIsABlockAddress ( Addressable Val) {
        var mh$ = LLVMIsABlockAddress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantAggregateZero$MH() {
        return RuntimeHelper.requireNonNull(constants$109.LLVMIsAConstantAggregateZero$MH,"LLVMIsAConstantAggregateZero");
    }
    public static MemoryAddress LLVMIsAConstantAggregateZero ( Addressable Val) {
        var mh$ = LLVMIsAConstantAggregateZero$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantArray$MH() {
        return RuntimeHelper.requireNonNull(constants$109.LLVMIsAConstantArray$MH,"LLVMIsAConstantArray");
    }
    public static MemoryAddress LLVMIsAConstantArray ( Addressable Val) {
        var mh$ = LLVMIsAConstantArray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantDataSequential$MH() {
        return RuntimeHelper.requireNonNull(constants$109.LLVMIsAConstantDataSequential$MH,"LLVMIsAConstantDataSequential");
    }
    public static MemoryAddress LLVMIsAConstantDataSequential ( Addressable Val) {
        var mh$ = LLVMIsAConstantDataSequential$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantDataArray$MH() {
        return RuntimeHelper.requireNonNull(constants$109.LLVMIsAConstantDataArray$MH,"LLVMIsAConstantDataArray");
    }
    public static MemoryAddress LLVMIsAConstantDataArray ( Addressable Val) {
        var mh$ = LLVMIsAConstantDataArray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantDataVector$MH() {
        return RuntimeHelper.requireNonNull(constants$110.LLVMIsAConstantDataVector$MH,"LLVMIsAConstantDataVector");
    }
    public static MemoryAddress LLVMIsAConstantDataVector ( Addressable Val) {
        var mh$ = LLVMIsAConstantDataVector$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantExpr$MH() {
        return RuntimeHelper.requireNonNull(constants$110.LLVMIsAConstantExpr$MH,"LLVMIsAConstantExpr");
    }
    public static MemoryAddress LLVMIsAConstantExpr ( Addressable Val) {
        var mh$ = LLVMIsAConstantExpr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantFP$MH() {
        return RuntimeHelper.requireNonNull(constants$110.LLVMIsAConstantFP$MH,"LLVMIsAConstantFP");
    }
    public static MemoryAddress LLVMIsAConstantFP ( Addressable Val) {
        var mh$ = LLVMIsAConstantFP$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantInt$MH() {
        return RuntimeHelper.requireNonNull(constants$110.LLVMIsAConstantInt$MH,"LLVMIsAConstantInt");
    }
    public static MemoryAddress LLVMIsAConstantInt ( Addressable Val) {
        var mh$ = LLVMIsAConstantInt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantPointerNull$MH() {
        return RuntimeHelper.requireNonNull(constants$110.LLVMIsAConstantPointerNull$MH,"LLVMIsAConstantPointerNull");
    }
    public static MemoryAddress LLVMIsAConstantPointerNull ( Addressable Val) {
        var mh$ = LLVMIsAConstantPointerNull$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$110.LLVMIsAConstantStruct$MH,"LLVMIsAConstantStruct");
    }
    public static MemoryAddress LLVMIsAConstantStruct ( Addressable Val) {
        var mh$ = LLVMIsAConstantStruct$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantTokenNone$MH() {
        return RuntimeHelper.requireNonNull(constants$111.LLVMIsAConstantTokenNone$MH,"LLVMIsAConstantTokenNone");
    }
    public static MemoryAddress LLVMIsAConstantTokenNone ( Addressable Val) {
        var mh$ = LLVMIsAConstantTokenNone$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAConstantVector$MH() {
        return RuntimeHelper.requireNonNull(constants$111.LLVMIsAConstantVector$MH,"LLVMIsAConstantVector");
    }
    public static MemoryAddress LLVMIsAConstantVector ( Addressable Val) {
        var mh$ = LLVMIsAConstantVector$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAGlobalValue$MH() {
        return RuntimeHelper.requireNonNull(constants$111.LLVMIsAGlobalValue$MH,"LLVMIsAGlobalValue");
    }
    public static MemoryAddress LLVMIsAGlobalValue ( Addressable Val) {
        var mh$ = LLVMIsAGlobalValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAGlobalAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$111.LLVMIsAGlobalAlias$MH,"LLVMIsAGlobalAlias");
    }
    public static MemoryAddress LLVMIsAGlobalAlias ( Addressable Val) {
        var mh$ = LLVMIsAGlobalAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAGlobalObject$MH() {
        return RuntimeHelper.requireNonNull(constants$111.LLVMIsAGlobalObject$MH,"LLVMIsAGlobalObject");
    }
    public static MemoryAddress LLVMIsAGlobalObject ( Addressable Val) {
        var mh$ = LLVMIsAGlobalObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$111.LLVMIsAFunction$MH,"LLVMIsAFunction");
    }
    public static MemoryAddress LLVMIsAFunction ( Addressable Val) {
        var mh$ = LLVMIsAFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAGlobalVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$112.LLVMIsAGlobalVariable$MH,"LLVMIsAGlobalVariable");
    }
    public static MemoryAddress LLVMIsAGlobalVariable ( Addressable Val) {
        var mh$ = LLVMIsAGlobalVariable$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$112.LLVMIsAGlobalIFunc$MH,"LLVMIsAGlobalIFunc");
    }
    public static MemoryAddress LLVMIsAGlobalIFunc ( Addressable Val) {
        var mh$ = LLVMIsAGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAUndefValue$MH() {
        return RuntimeHelper.requireNonNull(constants$112.LLVMIsAUndefValue$MH,"LLVMIsAUndefValue");
    }
    public static MemoryAddress LLVMIsAUndefValue ( Addressable Val) {
        var mh$ = LLVMIsAUndefValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAPoisonValue$MH() {
        return RuntimeHelper.requireNonNull(constants$112.LLVMIsAPoisonValue$MH,"LLVMIsAPoisonValue");
    }
    public static MemoryAddress LLVMIsAPoisonValue ( Addressable Val) {
        var mh$ = LLVMIsAPoisonValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$112.LLVMIsAInstruction$MH,"LLVMIsAInstruction");
    }
    public static MemoryAddress LLVMIsAInstruction ( Addressable Val) {
        var mh$ = LLVMIsAInstruction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAUnaryOperator$MH() {
        return RuntimeHelper.requireNonNull(constants$112.LLVMIsAUnaryOperator$MH,"LLVMIsAUnaryOperator");
    }
    public static MemoryAddress LLVMIsAUnaryOperator ( Addressable Val) {
        var mh$ = LLVMIsAUnaryOperator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsABinaryOperator$MH() {
        return RuntimeHelper.requireNonNull(constants$113.LLVMIsABinaryOperator$MH,"LLVMIsABinaryOperator");
    }
    public static MemoryAddress LLVMIsABinaryOperator ( Addressable Val) {
        var mh$ = LLVMIsABinaryOperator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACallInst$MH() {
        return RuntimeHelper.requireNonNull(constants$113.LLVMIsACallInst$MH,"LLVMIsACallInst");
    }
    public static MemoryAddress LLVMIsACallInst ( Addressable Val) {
        var mh$ = LLVMIsACallInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAIntrinsicInst$MH() {
        return RuntimeHelper.requireNonNull(constants$113.LLVMIsAIntrinsicInst$MH,"LLVMIsAIntrinsicInst");
    }
    public static MemoryAddress LLVMIsAIntrinsicInst ( Addressable Val) {
        var mh$ = LLVMIsAIntrinsicInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsADbgInfoIntrinsic$MH() {
        return RuntimeHelper.requireNonNull(constants$113.LLVMIsADbgInfoIntrinsic$MH,"LLVMIsADbgInfoIntrinsic");
    }
    public static MemoryAddress LLVMIsADbgInfoIntrinsic ( Addressable Val) {
        var mh$ = LLVMIsADbgInfoIntrinsic$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsADbgVariableIntrinsic$MH() {
        return RuntimeHelper.requireNonNull(constants$113.LLVMIsADbgVariableIntrinsic$MH,"LLVMIsADbgVariableIntrinsic");
    }
    public static MemoryAddress LLVMIsADbgVariableIntrinsic ( Addressable Val) {
        var mh$ = LLVMIsADbgVariableIntrinsic$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsADbgDeclareInst$MH() {
        return RuntimeHelper.requireNonNull(constants$113.LLVMIsADbgDeclareInst$MH,"LLVMIsADbgDeclareInst");
    }
    public static MemoryAddress LLVMIsADbgDeclareInst ( Addressable Val) {
        var mh$ = LLVMIsADbgDeclareInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsADbgLabelInst$MH() {
        return RuntimeHelper.requireNonNull(constants$114.LLVMIsADbgLabelInst$MH,"LLVMIsADbgLabelInst");
    }
    public static MemoryAddress LLVMIsADbgLabelInst ( Addressable Val) {
        var mh$ = LLVMIsADbgLabelInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAMemIntrinsic$MH() {
        return RuntimeHelper.requireNonNull(constants$114.LLVMIsAMemIntrinsic$MH,"LLVMIsAMemIntrinsic");
    }
    public static MemoryAddress LLVMIsAMemIntrinsic ( Addressable Val) {
        var mh$ = LLVMIsAMemIntrinsic$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAMemCpyInst$MH() {
        return RuntimeHelper.requireNonNull(constants$114.LLVMIsAMemCpyInst$MH,"LLVMIsAMemCpyInst");
    }
    public static MemoryAddress LLVMIsAMemCpyInst ( Addressable Val) {
        var mh$ = LLVMIsAMemCpyInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAMemMoveInst$MH() {
        return RuntimeHelper.requireNonNull(constants$114.LLVMIsAMemMoveInst$MH,"LLVMIsAMemMoveInst");
    }
    public static MemoryAddress LLVMIsAMemMoveInst ( Addressable Val) {
        var mh$ = LLVMIsAMemMoveInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAMemSetInst$MH() {
        return RuntimeHelper.requireNonNull(constants$114.LLVMIsAMemSetInst$MH,"LLVMIsAMemSetInst");
    }
    public static MemoryAddress LLVMIsAMemSetInst ( Addressable Val) {
        var mh$ = LLVMIsAMemSetInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACmpInst$MH() {
        return RuntimeHelper.requireNonNull(constants$114.LLVMIsACmpInst$MH,"LLVMIsACmpInst");
    }
    public static MemoryAddress LLVMIsACmpInst ( Addressable Val) {
        var mh$ = LLVMIsACmpInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFCmpInst$MH() {
        return RuntimeHelper.requireNonNull(constants$115.LLVMIsAFCmpInst$MH,"LLVMIsAFCmpInst");
    }
    public static MemoryAddress LLVMIsAFCmpInst ( Addressable Val) {
        var mh$ = LLVMIsAFCmpInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAICmpInst$MH() {
        return RuntimeHelper.requireNonNull(constants$115.LLVMIsAICmpInst$MH,"LLVMIsAICmpInst");
    }
    public static MemoryAddress LLVMIsAICmpInst ( Addressable Val) {
        var mh$ = LLVMIsAICmpInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAExtractElementInst$MH() {
        return RuntimeHelper.requireNonNull(constants$115.LLVMIsAExtractElementInst$MH,"LLVMIsAExtractElementInst");
    }
    public static MemoryAddress LLVMIsAExtractElementInst ( Addressable Val) {
        var mh$ = LLVMIsAExtractElementInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAGetElementPtrInst$MH() {
        return RuntimeHelper.requireNonNull(constants$115.LLVMIsAGetElementPtrInst$MH,"LLVMIsAGetElementPtrInst");
    }
    public static MemoryAddress LLVMIsAGetElementPtrInst ( Addressable Val) {
        var mh$ = LLVMIsAGetElementPtrInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAInsertElementInst$MH() {
        return RuntimeHelper.requireNonNull(constants$115.LLVMIsAInsertElementInst$MH,"LLVMIsAInsertElementInst");
    }
    public static MemoryAddress LLVMIsAInsertElementInst ( Addressable Val) {
        var mh$ = LLVMIsAInsertElementInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAInsertValueInst$MH() {
        return RuntimeHelper.requireNonNull(constants$115.LLVMIsAInsertValueInst$MH,"LLVMIsAInsertValueInst");
    }
    public static MemoryAddress LLVMIsAInsertValueInst ( Addressable Val) {
        var mh$ = LLVMIsAInsertValueInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsALandingPadInst$MH() {
        return RuntimeHelper.requireNonNull(constants$116.LLVMIsALandingPadInst$MH,"LLVMIsALandingPadInst");
    }
    public static MemoryAddress LLVMIsALandingPadInst ( Addressable Val) {
        var mh$ = LLVMIsALandingPadInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAPHINode$MH() {
        return RuntimeHelper.requireNonNull(constants$116.LLVMIsAPHINode$MH,"LLVMIsAPHINode");
    }
    public static MemoryAddress LLVMIsAPHINode ( Addressable Val) {
        var mh$ = LLVMIsAPHINode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsASelectInst$MH() {
        return RuntimeHelper.requireNonNull(constants$116.LLVMIsASelectInst$MH,"LLVMIsASelectInst");
    }
    public static MemoryAddress LLVMIsASelectInst ( Addressable Val) {
        var mh$ = LLVMIsASelectInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAShuffleVectorInst$MH() {
        return RuntimeHelper.requireNonNull(constants$116.LLVMIsAShuffleVectorInst$MH,"LLVMIsAShuffleVectorInst");
    }
    public static MemoryAddress LLVMIsAShuffleVectorInst ( Addressable Val) {
        var mh$ = LLVMIsAShuffleVectorInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAStoreInst$MH() {
        return RuntimeHelper.requireNonNull(constants$116.LLVMIsAStoreInst$MH,"LLVMIsAStoreInst");
    }
    public static MemoryAddress LLVMIsAStoreInst ( Addressable Val) {
        var mh$ = LLVMIsAStoreInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsABranchInst$MH() {
        return RuntimeHelper.requireNonNull(constants$116.LLVMIsABranchInst$MH,"LLVMIsABranchInst");
    }
    public static MemoryAddress LLVMIsABranchInst ( Addressable Val) {
        var mh$ = LLVMIsABranchInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAIndirectBrInst$MH() {
        return RuntimeHelper.requireNonNull(constants$117.LLVMIsAIndirectBrInst$MH,"LLVMIsAIndirectBrInst");
    }
    public static MemoryAddress LLVMIsAIndirectBrInst ( Addressable Val) {
        var mh$ = LLVMIsAIndirectBrInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAInvokeInst$MH() {
        return RuntimeHelper.requireNonNull(constants$117.LLVMIsAInvokeInst$MH,"LLVMIsAInvokeInst");
    }
    public static MemoryAddress LLVMIsAInvokeInst ( Addressable Val) {
        var mh$ = LLVMIsAInvokeInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAReturnInst$MH() {
        return RuntimeHelper.requireNonNull(constants$117.LLVMIsAReturnInst$MH,"LLVMIsAReturnInst");
    }
    public static MemoryAddress LLVMIsAReturnInst ( Addressable Val) {
        var mh$ = LLVMIsAReturnInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsASwitchInst$MH() {
        return RuntimeHelper.requireNonNull(constants$117.LLVMIsASwitchInst$MH,"LLVMIsASwitchInst");
    }
    public static MemoryAddress LLVMIsASwitchInst ( Addressable Val) {
        var mh$ = LLVMIsASwitchInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAUnreachableInst$MH() {
        return RuntimeHelper.requireNonNull(constants$117.LLVMIsAUnreachableInst$MH,"LLVMIsAUnreachableInst");
    }
    public static MemoryAddress LLVMIsAUnreachableInst ( Addressable Val) {
        var mh$ = LLVMIsAUnreachableInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAResumeInst$MH() {
        return RuntimeHelper.requireNonNull(constants$117.LLVMIsAResumeInst$MH,"LLVMIsAResumeInst");
    }
    public static MemoryAddress LLVMIsAResumeInst ( Addressable Val) {
        var mh$ = LLVMIsAResumeInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACleanupReturnInst$MH() {
        return RuntimeHelper.requireNonNull(constants$118.LLVMIsACleanupReturnInst$MH,"LLVMIsACleanupReturnInst");
    }
    public static MemoryAddress LLVMIsACleanupReturnInst ( Addressable Val) {
        var mh$ = LLVMIsACleanupReturnInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACatchReturnInst$MH() {
        return RuntimeHelper.requireNonNull(constants$118.LLVMIsACatchReturnInst$MH,"LLVMIsACatchReturnInst");
    }
    public static MemoryAddress LLVMIsACatchReturnInst ( Addressable Val) {
        var mh$ = LLVMIsACatchReturnInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACatchSwitchInst$MH() {
        return RuntimeHelper.requireNonNull(constants$118.LLVMIsACatchSwitchInst$MH,"LLVMIsACatchSwitchInst");
    }
    public static MemoryAddress LLVMIsACatchSwitchInst ( Addressable Val) {
        var mh$ = LLVMIsACatchSwitchInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACallBrInst$MH() {
        return RuntimeHelper.requireNonNull(constants$118.LLVMIsACallBrInst$MH,"LLVMIsACallBrInst");
    }
    public static MemoryAddress LLVMIsACallBrInst ( Addressable Val) {
        var mh$ = LLVMIsACallBrInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFuncletPadInst$MH() {
        return RuntimeHelper.requireNonNull(constants$118.LLVMIsAFuncletPadInst$MH,"LLVMIsAFuncletPadInst");
    }
    public static MemoryAddress LLVMIsAFuncletPadInst ( Addressable Val) {
        var mh$ = LLVMIsAFuncletPadInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACatchPadInst$MH() {
        return RuntimeHelper.requireNonNull(constants$118.LLVMIsACatchPadInst$MH,"LLVMIsACatchPadInst");
    }
    public static MemoryAddress LLVMIsACatchPadInst ( Addressable Val) {
        var mh$ = LLVMIsACatchPadInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACleanupPadInst$MH() {
        return RuntimeHelper.requireNonNull(constants$119.LLVMIsACleanupPadInst$MH,"LLVMIsACleanupPadInst");
    }
    public static MemoryAddress LLVMIsACleanupPadInst ( Addressable Val) {
        var mh$ = LLVMIsACleanupPadInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAUnaryInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$119.LLVMIsAUnaryInstruction$MH,"LLVMIsAUnaryInstruction");
    }
    public static MemoryAddress LLVMIsAUnaryInstruction ( Addressable Val) {
        var mh$ = LLVMIsAUnaryInstruction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAAllocaInst$MH() {
        return RuntimeHelper.requireNonNull(constants$119.LLVMIsAAllocaInst$MH,"LLVMIsAAllocaInst");
    }
    public static MemoryAddress LLVMIsAAllocaInst ( Addressable Val) {
        var mh$ = LLVMIsAAllocaInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsACastInst$MH() {
        return RuntimeHelper.requireNonNull(constants$119.LLVMIsACastInst$MH,"LLVMIsACastInst");
    }
    public static MemoryAddress LLVMIsACastInst ( Addressable Val) {
        var mh$ = LLVMIsACastInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAAddrSpaceCastInst$MH() {
        return RuntimeHelper.requireNonNull(constants$119.LLVMIsAAddrSpaceCastInst$MH,"LLVMIsAAddrSpaceCastInst");
    }
    public static MemoryAddress LLVMIsAAddrSpaceCastInst ( Addressable Val) {
        var mh$ = LLVMIsAAddrSpaceCastInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsABitCastInst$MH() {
        return RuntimeHelper.requireNonNull(constants$119.LLVMIsABitCastInst$MH,"LLVMIsABitCastInst");
    }
    public static MemoryAddress LLVMIsABitCastInst ( Addressable Val) {
        var mh$ = LLVMIsABitCastInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFPExtInst$MH() {
        return RuntimeHelper.requireNonNull(constants$120.LLVMIsAFPExtInst$MH,"LLVMIsAFPExtInst");
    }
    public static MemoryAddress LLVMIsAFPExtInst ( Addressable Val) {
        var mh$ = LLVMIsAFPExtInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFPToSIInst$MH() {
        return RuntimeHelper.requireNonNull(constants$120.LLVMIsAFPToSIInst$MH,"LLVMIsAFPToSIInst");
    }
    public static MemoryAddress LLVMIsAFPToSIInst ( Addressable Val) {
        var mh$ = LLVMIsAFPToSIInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFPToUIInst$MH() {
        return RuntimeHelper.requireNonNull(constants$120.LLVMIsAFPToUIInst$MH,"LLVMIsAFPToUIInst");
    }
    public static MemoryAddress LLVMIsAFPToUIInst ( Addressable Val) {
        var mh$ = LLVMIsAFPToUIInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFPTruncInst$MH() {
        return RuntimeHelper.requireNonNull(constants$120.LLVMIsAFPTruncInst$MH,"LLVMIsAFPTruncInst");
    }
    public static MemoryAddress LLVMIsAFPTruncInst ( Addressable Val) {
        var mh$ = LLVMIsAFPTruncInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAIntToPtrInst$MH() {
        return RuntimeHelper.requireNonNull(constants$120.LLVMIsAIntToPtrInst$MH,"LLVMIsAIntToPtrInst");
    }
    public static MemoryAddress LLVMIsAIntToPtrInst ( Addressable Val) {
        var mh$ = LLVMIsAIntToPtrInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAPtrToIntInst$MH() {
        return RuntimeHelper.requireNonNull(constants$120.LLVMIsAPtrToIntInst$MH,"LLVMIsAPtrToIntInst");
    }
    public static MemoryAddress LLVMIsAPtrToIntInst ( Addressable Val) {
        var mh$ = LLVMIsAPtrToIntInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsASExtInst$MH() {
        return RuntimeHelper.requireNonNull(constants$121.LLVMIsASExtInst$MH,"LLVMIsASExtInst");
    }
    public static MemoryAddress LLVMIsASExtInst ( Addressable Val) {
        var mh$ = LLVMIsASExtInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsASIToFPInst$MH() {
        return RuntimeHelper.requireNonNull(constants$121.LLVMIsASIToFPInst$MH,"LLVMIsASIToFPInst");
    }
    public static MemoryAddress LLVMIsASIToFPInst ( Addressable Val) {
        var mh$ = LLVMIsASIToFPInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsATruncInst$MH() {
        return RuntimeHelper.requireNonNull(constants$121.LLVMIsATruncInst$MH,"LLVMIsATruncInst");
    }
    public static MemoryAddress LLVMIsATruncInst ( Addressable Val) {
        var mh$ = LLVMIsATruncInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAUIToFPInst$MH() {
        return RuntimeHelper.requireNonNull(constants$121.LLVMIsAUIToFPInst$MH,"LLVMIsAUIToFPInst");
    }
    public static MemoryAddress LLVMIsAUIToFPInst ( Addressable Val) {
        var mh$ = LLVMIsAUIToFPInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAZExtInst$MH() {
        return RuntimeHelper.requireNonNull(constants$121.LLVMIsAZExtInst$MH,"LLVMIsAZExtInst");
    }
    public static MemoryAddress LLVMIsAZExtInst ( Addressable Val) {
        var mh$ = LLVMIsAZExtInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAExtractValueInst$MH() {
        return RuntimeHelper.requireNonNull(constants$121.LLVMIsAExtractValueInst$MH,"LLVMIsAExtractValueInst");
    }
    public static MemoryAddress LLVMIsAExtractValueInst ( Addressable Val) {
        var mh$ = LLVMIsAExtractValueInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsALoadInst$MH() {
        return RuntimeHelper.requireNonNull(constants$122.LLVMIsALoadInst$MH,"LLVMIsALoadInst");
    }
    public static MemoryAddress LLVMIsALoadInst ( Addressable Val) {
        var mh$ = LLVMIsALoadInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAVAArgInst$MH() {
        return RuntimeHelper.requireNonNull(constants$122.LLVMIsAVAArgInst$MH,"LLVMIsAVAArgInst");
    }
    public static MemoryAddress LLVMIsAVAArgInst ( Addressable Val) {
        var mh$ = LLVMIsAVAArgInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFreezeInst$MH() {
        return RuntimeHelper.requireNonNull(constants$122.LLVMIsAFreezeInst$MH,"LLVMIsAFreezeInst");
    }
    public static MemoryAddress LLVMIsAFreezeInst ( Addressable Val) {
        var mh$ = LLVMIsAFreezeInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAAtomicCmpXchgInst$MH() {
        return RuntimeHelper.requireNonNull(constants$122.LLVMIsAAtomicCmpXchgInst$MH,"LLVMIsAAtomicCmpXchgInst");
    }
    public static MemoryAddress LLVMIsAAtomicCmpXchgInst ( Addressable Val) {
        var mh$ = LLVMIsAAtomicCmpXchgInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAAtomicRMWInst$MH() {
        return RuntimeHelper.requireNonNull(constants$122.LLVMIsAAtomicRMWInst$MH,"LLVMIsAAtomicRMWInst");
    }
    public static MemoryAddress LLVMIsAAtomicRMWInst ( Addressable Val) {
        var mh$ = LLVMIsAAtomicRMWInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAFenceInst$MH() {
        return RuntimeHelper.requireNonNull(constants$122.LLVMIsAFenceInst$MH,"LLVMIsAFenceInst");
    }
    public static MemoryAddress LLVMIsAFenceInst ( Addressable Val) {
        var mh$ = LLVMIsAFenceInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAMDNode$MH() {
        return RuntimeHelper.requireNonNull(constants$123.LLVMIsAMDNode$MH,"LLVMIsAMDNode");
    }
    public static MemoryAddress LLVMIsAMDNode ( Addressable Val) {
        var mh$ = LLVMIsAMDNode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAValueAsMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$123.LLVMIsAValueAsMetadata$MH,"LLVMIsAValueAsMetadata");
    }
    public static MemoryAddress LLVMIsAValueAsMetadata ( Addressable Val) {
        var mh$ = LLVMIsAValueAsMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAMDString$MH() {
        return RuntimeHelper.requireNonNull(constants$123.LLVMIsAMDString$MH,"LLVMIsAMDString");
    }
    public static MemoryAddress LLVMIsAMDString ( Addressable Val) {
        var mh$ = LLVMIsAMDString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetValueName$MH() {
        return RuntimeHelper.requireNonNull(constants$123.LLVMGetValueName$MH,"LLVMGetValueName");
    }
    public static MemoryAddress LLVMGetValueName ( Addressable Val) {
        var mh$ = LLVMGetValueName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetValueName$MH() {
        return RuntimeHelper.requireNonNull(constants$123.LLVMSetValueName$MH,"LLVMSetValueName");
    }
    public static void LLVMSetValueName ( Addressable Val,  Addressable Name) {
        var mh$ = LLVMSetValueName$MH();
        try {
            mh$.invokeExact(Val, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstUse$MH() {
        return RuntimeHelper.requireNonNull(constants$123.LLVMGetFirstUse$MH,"LLVMGetFirstUse");
    }
    public static MemoryAddress LLVMGetFirstUse ( Addressable Val) {
        var mh$ = LLVMGetFirstUse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextUse$MH() {
        return RuntimeHelper.requireNonNull(constants$124.LLVMGetNextUse$MH,"LLVMGetNextUse");
    }
    public static MemoryAddress LLVMGetNextUse ( Addressable U) {
        var mh$ = LLVMGetNextUse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(U);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetUser$MH() {
        return RuntimeHelper.requireNonNull(constants$124.LLVMGetUser$MH,"LLVMGetUser");
    }
    public static MemoryAddress LLVMGetUser ( Addressable U) {
        var mh$ = LLVMGetUser$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(U);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetUsedValue$MH() {
        return RuntimeHelper.requireNonNull(constants$124.LLVMGetUsedValue$MH,"LLVMGetUsedValue");
    }
    public static MemoryAddress LLVMGetUsedValue ( Addressable U) {
        var mh$ = LLVMGetUsedValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(U);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$124.LLVMGetOperand$MH,"LLVMGetOperand");
    }
    public static MemoryAddress LLVMGetOperand ( Addressable Val,  int Index) {
        var mh$ = LLVMGetOperand$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetOperandUse$MH() {
        return RuntimeHelper.requireNonNull(constants$124.LLVMGetOperandUse$MH,"LLVMGetOperandUse");
    }
    public static MemoryAddress LLVMGetOperandUse ( Addressable Val,  int Index) {
        var mh$ = LLVMGetOperandUse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$124.LLVMSetOperand$MH,"LLVMSetOperand");
    }
    public static void LLVMSetOperand ( Addressable User,  int Index,  Addressable Val) {
        var mh$ = LLVMSetOperand$MH();
        try {
            mh$.invokeExact(User, Index, Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$125.LLVMGetNumOperands$MH,"LLVMGetNumOperands");
    }
    public static int LLVMGetNumOperands ( Addressable Val) {
        var mh$ = LLVMGetNumOperands$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNull$MH() {
        return RuntimeHelper.requireNonNull(constants$125.LLVMConstNull$MH,"LLVMConstNull");
    }
    public static MemoryAddress LLVMConstNull ( Addressable Ty) {
        var mh$ = LLVMConstNull$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstAllOnes$MH() {
        return RuntimeHelper.requireNonNull(constants$125.LLVMConstAllOnes$MH,"LLVMConstAllOnes");
    }
    public static MemoryAddress LLVMConstAllOnes ( Addressable Ty) {
        var mh$ = LLVMConstAllOnes$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetUndef$MH() {
        return RuntimeHelper.requireNonNull(constants$125.LLVMGetUndef$MH,"LLVMGetUndef");
    }
    public static MemoryAddress LLVMGetUndef ( Addressable Ty) {
        var mh$ = LLVMGetUndef$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPoison$MH() {
        return RuntimeHelper.requireNonNull(constants$125.LLVMGetPoison$MH,"LLVMGetPoison");
    }
    public static MemoryAddress LLVMGetPoison ( Addressable Ty) {
        var mh$ = LLVMGetPoison$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$125.LLVMIsNull$MH,"LLVMIsNull");
    }
    public static int LLVMIsNull ( Addressable Val) {
        var mh$ = LLVMIsNull$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstPointerNull$MH() {
        return RuntimeHelper.requireNonNull(constants$126.LLVMConstPointerNull$MH,"LLVMConstPointerNull");
    }
    public static MemoryAddress LLVMConstPointerNull ( Addressable Ty) {
        var mh$ = LLVMConstPointerNull$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstInt$MH() {
        return RuntimeHelper.requireNonNull(constants$126.LLVMConstInt$MH,"LLVMConstInt");
    }
    public static MemoryAddress LLVMConstInt ( Addressable IntTy,  long N,  int SignExtend) {
        var mh$ = LLVMConstInt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IntTy, N, SignExtend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntOfArbitraryPrecision$MH() {
        return RuntimeHelper.requireNonNull(constants$126.LLVMConstIntOfArbitraryPrecision$MH,"LLVMConstIntOfArbitraryPrecision");
    }
    public static MemoryAddress LLVMConstIntOfArbitraryPrecision ( Addressable IntTy,  int NumWords,  Addressable Words) {
        var mh$ = LLVMConstIntOfArbitraryPrecision$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IntTy, NumWords, Words);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntOfString$MH() {
        return RuntimeHelper.requireNonNull(constants$126.LLVMConstIntOfString$MH,"LLVMConstIntOfString");
    }
    public static MemoryAddress LLVMConstIntOfString ( Addressable IntTy,  Addressable Text,  byte Radix) {
        var mh$ = LLVMConstIntOfString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IntTy, Text, Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntOfStringAndSize$MH() {
        return RuntimeHelper.requireNonNull(constants$126.LLVMConstIntOfStringAndSize$MH,"LLVMConstIntOfStringAndSize");
    }
    public static MemoryAddress LLVMConstIntOfStringAndSize ( Addressable IntTy,  Addressable Text,  int SLen,  byte Radix) {
        var mh$ = LLVMConstIntOfStringAndSize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IntTy, Text, SLen, Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstReal$MH() {
        return RuntimeHelper.requireNonNull(constants$126.LLVMConstReal$MH,"LLVMConstReal");
    }
    public static MemoryAddress LLVMConstReal ( Addressable RealTy,  double N) {
        var mh$ = LLVMConstReal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RealTy, N);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstRealOfString$MH() {
        return RuntimeHelper.requireNonNull(constants$127.LLVMConstRealOfString$MH,"LLVMConstRealOfString");
    }
    public static MemoryAddress LLVMConstRealOfString ( Addressable RealTy,  Addressable Text) {
        var mh$ = LLVMConstRealOfString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RealTy, Text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstRealOfStringAndSize$MH() {
        return RuntimeHelper.requireNonNull(constants$127.LLVMConstRealOfStringAndSize$MH,"LLVMConstRealOfStringAndSize");
    }
    public static MemoryAddress LLVMConstRealOfStringAndSize ( Addressable RealTy,  Addressable Text,  int SLen) {
        var mh$ = LLVMConstRealOfStringAndSize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RealTy, Text, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntGetZExtValue$MH() {
        return RuntimeHelper.requireNonNull(constants$127.LLVMConstIntGetZExtValue$MH,"LLVMConstIntGetZExtValue");
    }
    public static long LLVMConstIntGetZExtValue ( Addressable ConstantVal) {
        var mh$ = LLVMConstIntGetZExtValue$MH();
        try {
            return (long)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntGetSExtValue$MH() {
        return RuntimeHelper.requireNonNull(constants$127.LLVMConstIntGetSExtValue$MH,"LLVMConstIntGetSExtValue");
    }
    public static long LLVMConstIntGetSExtValue ( Addressable ConstantVal) {
        var mh$ = LLVMConstIntGetSExtValue$MH();
        try {
            return (long)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstRealGetDouble$MH() {
        return RuntimeHelper.requireNonNull(constants$127.LLVMConstRealGetDouble$MH,"LLVMConstRealGetDouble");
    }
    public static double LLVMConstRealGetDouble ( Addressable ConstantVal,  Addressable losesInfo) {
        var mh$ = LLVMConstRealGetDouble$MH();
        try {
            return (double)mh$.invokeExact(ConstantVal, losesInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstStringInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$127.LLVMConstStringInContext$MH,"LLVMConstStringInContext");
    }
    public static MemoryAddress LLVMConstStringInContext ( Addressable C,  Addressable Str,  int Length,  int DontNullTerminate) {
        var mh$ = LLVMConstStringInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Str, Length, DontNullTerminate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstString$MH() {
        return RuntimeHelper.requireNonNull(constants$128.LLVMConstString$MH,"LLVMConstString");
    }
    public static MemoryAddress LLVMConstString ( Addressable Str,  int Length,  int DontNullTerminate) {
        var mh$ = LLVMConstString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Str, Length, DontNullTerminate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsConstantString$MH() {
        return RuntimeHelper.requireNonNull(constants$128.LLVMIsConstantString$MH,"LLVMIsConstantString");
    }
    public static int LLVMIsConstantString ( Addressable c) {
        var mh$ = LLVMIsConstantString$MH();
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAsString$MH() {
        return RuntimeHelper.requireNonNull(constants$128.LLVMGetAsString$MH,"LLVMGetAsString");
    }
    public static MemoryAddress LLVMGetAsString ( Addressable c,  Addressable Length) {
        var mh$ = LLVMGetAsString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(c, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstStructInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$128.LLVMConstStructInContext$MH,"LLVMConstStructInContext");
    }
    public static MemoryAddress LLVMConstStructInContext ( Addressable C,  Addressable ConstantVals,  int Count,  int Packed) {
        var mh$ = LLVMConstStructInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, ConstantVals, Count, Packed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$128.LLVMConstStruct$MH,"LLVMConstStruct");
    }
    public static MemoryAddress LLVMConstStruct ( Addressable ConstantVals,  int Count,  int Packed) {
        var mh$ = LLVMConstStruct$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVals, Count, Packed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstArray$MH() {
        return RuntimeHelper.requireNonNull(constants$128.LLVMConstArray$MH,"LLVMConstArray");
    }
    public static MemoryAddress LLVMConstArray ( Addressable ElementTy,  Addressable ConstantVals,  int Length) {
        var mh$ = LLVMConstArray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementTy, ConstantVals, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstArray2$MH() {
        return RuntimeHelper.requireNonNull(constants$129.LLVMConstArray2$MH,"LLVMConstArray2");
    }
    public static MemoryAddress LLVMConstArray2 ( Addressable ElementTy,  Addressable ConstantVals,  long Length) {
        var mh$ = LLVMConstArray2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ElementTy, ConstantVals, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNamedStruct$MH() {
        return RuntimeHelper.requireNonNull(constants$129.LLVMConstNamedStruct$MH,"LLVMConstNamedStruct");
    }
    public static MemoryAddress LLVMConstNamedStruct ( Addressable StructTy,  Addressable ConstantVals,  int Count) {
        var mh$ = LLVMConstNamedStruct$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(StructTy, ConstantVals, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAggregateElement$MH() {
        return RuntimeHelper.requireNonNull(constants$129.LLVMGetAggregateElement$MH,"LLVMGetAggregateElement");
    }
    public static MemoryAddress LLVMGetAggregateElement ( Addressable C,  int Idx) {
        var mh$ = LLVMGetAggregateElement$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetElementAsConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$129.LLVMGetElementAsConstant$MH,"LLVMGetElementAsConstant");
    }
    public static MemoryAddress LLVMGetElementAsConstant ( Addressable C,  int idx) {
        var mh$ = LLVMGetElementAsConstant$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstVector$MH() {
        return RuntimeHelper.requireNonNull(constants$129.LLVMConstVector$MH,"LLVMConstVector");
    }
    public static MemoryAddress LLVMConstVector ( Addressable ScalarConstantVals,  int Size) {
        var mh$ = LLVMConstVector$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ScalarConstantVals, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetConstOpcode$MH() {
        return RuntimeHelper.requireNonNull(constants$129.LLVMGetConstOpcode$MH,"LLVMGetConstOpcode");
    }
    public static int LLVMGetConstOpcode ( Addressable ConstantVal) {
        var mh$ = LLVMGetConstOpcode$MH();
        try {
            return (int)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAlignOf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.LLVMAlignOf$MH,"LLVMAlignOf");
    }
    public static MemoryAddress LLVMAlignOf ( Addressable Ty) {
        var mh$ = LLVMAlignOf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSizeOf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.LLVMSizeOf$MH,"LLVMSizeOf");
    }
    public static MemoryAddress LLVMSizeOf ( Addressable Ty) {
        var mh$ = LLVMSizeOf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$130.LLVMConstNeg$MH,"LLVMConstNeg");
    }
    public static MemoryAddress LLVMConstNeg ( Addressable ConstantVal) {
        var mh$ = LLVMConstNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNSWNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$130.LLVMConstNSWNeg$MH,"LLVMConstNSWNeg");
    }
    public static MemoryAddress LLVMConstNSWNeg ( Addressable ConstantVal) {
        var mh$ = LLVMConstNSWNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNUWNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$130.LLVMConstNUWNeg$MH,"LLVMConstNUWNeg");
    }
    public static MemoryAddress LLVMConstNUWNeg ( Addressable ConstantVal) {
        var mh$ = LLVMConstNUWNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNot$MH() {
        return RuntimeHelper.requireNonNull(constants$130.LLVMConstNot$MH,"LLVMConstNot");
    }
    public static MemoryAddress LLVMConstNot ( Addressable ConstantVal) {
        var mh$ = LLVMConstNot$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$131.LLVMConstAdd$MH,"LLVMConstAdd");
    }
    public static MemoryAddress LLVMConstAdd ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNSWAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$131.LLVMConstNSWAdd$MH,"LLVMConstNSWAdd");
    }
    public static MemoryAddress LLVMConstNSWAdd ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstNSWAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNUWAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$131.LLVMConstNUWAdd$MH,"LLVMConstNUWAdd");
    }
    public static MemoryAddress LLVMConstNUWAdd ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstNUWAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstSub$MH() {
        return RuntimeHelper.requireNonNull(constants$131.LLVMConstSub$MH,"LLVMConstSub");
    }
    public static MemoryAddress LLVMConstSub ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNSWSub$MH() {
        return RuntimeHelper.requireNonNull(constants$131.LLVMConstNSWSub$MH,"LLVMConstNSWSub");
    }
    public static MemoryAddress LLVMConstNSWSub ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstNSWSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNUWSub$MH() {
        return RuntimeHelper.requireNonNull(constants$131.LLVMConstNUWSub$MH,"LLVMConstNUWSub");
    }
    public static MemoryAddress LLVMConstNUWSub ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstNUWSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstMul$MH() {
        return RuntimeHelper.requireNonNull(constants$132.LLVMConstMul$MH,"LLVMConstMul");
    }
    public static MemoryAddress LLVMConstMul ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNSWMul$MH() {
        return RuntimeHelper.requireNonNull(constants$132.LLVMConstNSWMul$MH,"LLVMConstNSWMul");
    }
    public static MemoryAddress LLVMConstNSWMul ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstNSWMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstNUWMul$MH() {
        return RuntimeHelper.requireNonNull(constants$132.LLVMConstNUWMul$MH,"LLVMConstNUWMul");
    }
    public static MemoryAddress LLVMConstNUWMul ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstNUWMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$132.LLVMConstAnd$MH,"LLVMConstAnd");
    }
    public static MemoryAddress LLVMConstAnd ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstAnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstOr$MH() {
        return RuntimeHelper.requireNonNull(constants$132.LLVMConstOr$MH,"LLVMConstOr");
    }
    public static MemoryAddress LLVMConstOr ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstOr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstXor$MH() {
        return RuntimeHelper.requireNonNull(constants$132.LLVMConstXor$MH,"LLVMConstXor");
    }
    public static MemoryAddress LLVMConstXor ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstXor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstICmp$MH() {
        return RuntimeHelper.requireNonNull(constants$133.LLVMConstICmp$MH,"LLVMConstICmp");
    }
    public static MemoryAddress LLVMConstICmp ( int Predicate,  Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstICmp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Predicate, LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstFCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$133.LLVMConstFCmp$MH,"LLVMConstFCmp");
    }
    public static MemoryAddress LLVMConstFCmp ( int Predicate,  Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstFCmp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Predicate, LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstShl$MH() {
        return RuntimeHelper.requireNonNull(constants$133.LLVMConstShl$MH,"LLVMConstShl");
    }
    public static MemoryAddress LLVMConstShl ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstShl$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstLShr$MH() {
        return RuntimeHelper.requireNonNull(constants$133.LLVMConstLShr$MH,"LLVMConstLShr");
    }
    public static MemoryAddress LLVMConstLShr ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstLShr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstAShr$MH() {
        return RuntimeHelper.requireNonNull(constants$133.LLVMConstAShr$MH,"LLVMConstAShr");
    }
    public static MemoryAddress LLVMConstAShr ( Addressable LHSConstant,  Addressable RHSConstant) {
        var mh$ = LLVMConstAShr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LHSConstant, RHSConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstGEP2$MH() {
        return RuntimeHelper.requireNonNull(constants$133.LLVMConstGEP2$MH,"LLVMConstGEP2");
    }
    public static MemoryAddress LLVMConstGEP2 ( Addressable Ty,  Addressable ConstantVal,  Addressable ConstantIndices,  int NumIndices) {
        var mh$ = LLVMConstGEP2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty, ConstantVal, ConstantIndices, NumIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstInBoundsGEP2$MH() {
        return RuntimeHelper.requireNonNull(constants$134.LLVMConstInBoundsGEP2$MH,"LLVMConstInBoundsGEP2");
    }
    public static MemoryAddress LLVMConstInBoundsGEP2 ( Addressable Ty,  Addressable ConstantVal,  Addressable ConstantIndices,  int NumIndices) {
        var mh$ = LLVMConstInBoundsGEP2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty, ConstantVal, ConstantIndices, NumIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstTrunc$MH() {
        return RuntimeHelper.requireNonNull(constants$134.LLVMConstTrunc$MH,"LLVMConstTrunc");
    }
    public static MemoryAddress LLVMConstTrunc ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstTrunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstSExt$MH() {
        return RuntimeHelper.requireNonNull(constants$134.LLVMConstSExt$MH,"LLVMConstSExt");
    }
    public static MemoryAddress LLVMConstSExt ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstSExt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstZExt$MH() {
        return RuntimeHelper.requireNonNull(constants$134.LLVMConstZExt$MH,"LLVMConstZExt");
    }
    public static MemoryAddress LLVMConstZExt ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstZExt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstFPTrunc$MH() {
        return RuntimeHelper.requireNonNull(constants$134.LLVMConstFPTrunc$MH,"LLVMConstFPTrunc");
    }
    public static MemoryAddress LLVMConstFPTrunc ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstFPTrunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstFPExt$MH() {
        return RuntimeHelper.requireNonNull(constants$134.LLVMConstFPExt$MH,"LLVMConstFPExt");
    }
    public static MemoryAddress LLVMConstFPExt ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstFPExt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstUIToFP$MH() {
        return RuntimeHelper.requireNonNull(constants$135.LLVMConstUIToFP$MH,"LLVMConstUIToFP");
    }
    public static MemoryAddress LLVMConstUIToFP ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstUIToFP$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstSIToFP$MH() {
        return RuntimeHelper.requireNonNull(constants$135.LLVMConstSIToFP$MH,"LLVMConstSIToFP");
    }
    public static MemoryAddress LLVMConstSIToFP ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstSIToFP$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstFPToUI$MH() {
        return RuntimeHelper.requireNonNull(constants$135.LLVMConstFPToUI$MH,"LLVMConstFPToUI");
    }
    public static MemoryAddress LLVMConstFPToUI ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstFPToUI$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstFPToSI$MH() {
        return RuntimeHelper.requireNonNull(constants$135.LLVMConstFPToSI$MH,"LLVMConstFPToSI");
    }
    public static MemoryAddress LLVMConstFPToSI ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstFPToSI$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstPtrToInt$MH() {
        return RuntimeHelper.requireNonNull(constants$135.LLVMConstPtrToInt$MH,"LLVMConstPtrToInt");
    }
    public static MemoryAddress LLVMConstPtrToInt ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstPtrToInt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$135.LLVMConstIntToPtr$MH,"LLVMConstIntToPtr");
    }
    public static MemoryAddress LLVMConstIntToPtr ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstIntToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$136.LLVMConstBitCast$MH,"LLVMConstBitCast");
    }
    public static MemoryAddress LLVMConstBitCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstAddrSpaceCast$MH() {
        return RuntimeHelper.requireNonNull(constants$136.LLVMConstAddrSpaceCast$MH,"LLVMConstAddrSpaceCast");
    }
    public static MemoryAddress LLVMConstAddrSpaceCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstAddrSpaceCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstZExtOrBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$136.LLVMConstZExtOrBitCast$MH,"LLVMConstZExtOrBitCast");
    }
    public static MemoryAddress LLVMConstZExtOrBitCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstZExtOrBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstSExtOrBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$136.LLVMConstSExtOrBitCast$MH,"LLVMConstSExtOrBitCast");
    }
    public static MemoryAddress LLVMConstSExtOrBitCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstSExtOrBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstTruncOrBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$136.LLVMConstTruncOrBitCast$MH,"LLVMConstTruncOrBitCast");
    }
    public static MemoryAddress LLVMConstTruncOrBitCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstTruncOrBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstPointerCast$MH() {
        return RuntimeHelper.requireNonNull(constants$136.LLVMConstPointerCast$MH,"LLVMConstPointerCast");
    }
    public static MemoryAddress LLVMConstPointerCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstPointerCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstIntCast$MH() {
        return RuntimeHelper.requireNonNull(constants$137.LLVMConstIntCast$MH,"LLVMConstIntCast");
    }
    public static MemoryAddress LLVMConstIntCast ( Addressable ConstantVal,  Addressable ToType,  int isSigned) {
        var mh$ = LLVMConstIntCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType, isSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstFPCast$MH() {
        return RuntimeHelper.requireNonNull(constants$137.LLVMConstFPCast$MH,"LLVMConstFPCast");
    }
    public static MemoryAddress LLVMConstFPCast ( Addressable ConstantVal,  Addressable ToType) {
        var mh$ = LLVMConstFPCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantVal, ToType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$137.LLVMConstSelect$MH,"LLVMConstSelect");
    }
    public static MemoryAddress LLVMConstSelect ( Addressable ConstantCondition,  Addressable ConstantIfTrue,  Addressable ConstantIfFalse) {
        var mh$ = LLVMConstSelect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ConstantCondition, ConstantIfTrue, ConstantIfFalse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstExtractElement$MH() {
        return RuntimeHelper.requireNonNull(constants$137.LLVMConstExtractElement$MH,"LLVMConstExtractElement");
    }
    public static MemoryAddress LLVMConstExtractElement ( Addressable VectorConstant,  Addressable IndexConstant) {
        var mh$ = LLVMConstExtractElement$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(VectorConstant, IndexConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstInsertElement$MH() {
        return RuntimeHelper.requireNonNull(constants$137.LLVMConstInsertElement$MH,"LLVMConstInsertElement");
    }
    public static MemoryAddress LLVMConstInsertElement ( Addressable VectorConstant,  Addressable ElementValueConstant,  Addressable IndexConstant) {
        var mh$ = LLVMConstInsertElement$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(VectorConstant, ElementValueConstant, IndexConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstShuffleVector$MH() {
        return RuntimeHelper.requireNonNull(constants$137.LLVMConstShuffleVector$MH,"LLVMConstShuffleVector");
    }
    public static MemoryAddress LLVMConstShuffleVector ( Addressable VectorAConstant,  Addressable VectorBConstant,  Addressable MaskConstant) {
        var mh$ = LLVMConstShuffleVector$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(VectorAConstant, VectorBConstant, MaskConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBlockAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$138.LLVMBlockAddress$MH,"LLVMBlockAddress");
    }
    public static MemoryAddress LLVMBlockAddress ( Addressable F,  Addressable BB) {
        var mh$ = LLVMBlockAddress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(F, BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConstInlineAsm$MH() {
        return RuntimeHelper.requireNonNull(constants$138.LLVMConstInlineAsm$MH,"LLVMConstInlineAsm");
    }
    public static MemoryAddress LLVMConstInlineAsm ( Addressable Ty,  Addressable AsmString,  Addressable Constraints,  int HasSideEffects,  int IsAlignStack) {
        var mh$ = LLVMConstInlineAsm$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty, AsmString, Constraints, HasSideEffects, IsAlignStack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGlobalParent$MH() {
        return RuntimeHelper.requireNonNull(constants$138.LLVMGetGlobalParent$MH,"LLVMGetGlobalParent");
    }
    public static MemoryAddress LLVMGetGlobalParent ( Addressable Global) {
        var mh$ = LLVMGetGlobalParent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsDeclaration$MH() {
        return RuntimeHelper.requireNonNull(constants$138.LLVMIsDeclaration$MH,"LLVMIsDeclaration");
    }
    public static int LLVMIsDeclaration ( Addressable Global) {
        var mh$ = LLVMIsDeclaration$MH();
        try {
            return (int)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLinkage$MH() {
        return RuntimeHelper.requireNonNull(constants$138.LLVMGetLinkage$MH,"LLVMGetLinkage");
    }
    public static int LLVMGetLinkage ( Addressable Global) {
        var mh$ = LLVMGetLinkage$MH();
        try {
            return (int)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetLinkage$MH() {
        return RuntimeHelper.requireNonNull(constants$138.LLVMSetLinkage$MH,"LLVMSetLinkage");
    }
    public static void LLVMSetLinkage ( Addressable Global,  int Linkage) {
        var mh$ = LLVMSetLinkage$MH();
        try {
            mh$.invokeExact(Global, Linkage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSection$MH() {
        return RuntimeHelper.requireNonNull(constants$139.LLVMGetSection$MH,"LLVMGetSection");
    }
    public static MemoryAddress LLVMGetSection ( Addressable Global) {
        var mh$ = LLVMGetSection$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetSection$MH() {
        return RuntimeHelper.requireNonNull(constants$139.LLVMSetSection$MH,"LLVMSetSection");
    }
    public static void LLVMSetSection ( Addressable Global,  Addressable Section) {
        var mh$ = LLVMSetSection$MH();
        try {
            mh$.invokeExact(Global, Section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetVisibility$MH() {
        return RuntimeHelper.requireNonNull(constants$139.LLVMGetVisibility$MH,"LLVMGetVisibility");
    }
    public static int LLVMGetVisibility ( Addressable Global) {
        var mh$ = LLVMGetVisibility$MH();
        try {
            return (int)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetVisibility$MH() {
        return RuntimeHelper.requireNonNull(constants$139.LLVMSetVisibility$MH,"LLVMSetVisibility");
    }
    public static void LLVMSetVisibility ( Addressable Global,  int Viz) {
        var mh$ = LLVMSetVisibility$MH();
        try {
            mh$.invokeExact(Global, Viz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDLLStorageClass$MH() {
        return RuntimeHelper.requireNonNull(constants$139.LLVMGetDLLStorageClass$MH,"LLVMGetDLLStorageClass");
    }
    public static int LLVMGetDLLStorageClass ( Addressable Global) {
        var mh$ = LLVMGetDLLStorageClass$MH();
        try {
            return (int)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetDLLStorageClass$MH() {
        return RuntimeHelper.requireNonNull(constants$139.LLVMSetDLLStorageClass$MH,"LLVMSetDLLStorageClass");
    }
    public static void LLVMSetDLLStorageClass ( Addressable Global,  int Class) {
        var mh$ = LLVMSetDLLStorageClass$MH();
        try {
            mh$.invokeExact(Global, Class);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetUnnamedAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$140.LLVMGetUnnamedAddress$MH,"LLVMGetUnnamedAddress");
    }
    public static int LLVMGetUnnamedAddress ( Addressable Global) {
        var mh$ = LLVMGetUnnamedAddress$MH();
        try {
            return (int)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetUnnamedAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$140.LLVMSetUnnamedAddress$MH,"LLVMSetUnnamedAddress");
    }
    public static void LLVMSetUnnamedAddress ( Addressable Global,  int UnnamedAddr) {
        var mh$ = LLVMSetUnnamedAddress$MH();
        try {
            mh$.invokeExact(Global, UnnamedAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGlobalGetValueType$MH() {
        return RuntimeHelper.requireNonNull(constants$140.LLVMGlobalGetValueType$MH,"LLVMGlobalGetValueType");
    }
    public static MemoryAddress LLVMGlobalGetValueType ( Addressable Global) {
        var mh$ = LLVMGlobalGetValueType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMHasUnnamedAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$140.LLVMHasUnnamedAddr$MH,"LLVMHasUnnamedAddr");
    }
    public static int LLVMHasUnnamedAddr ( Addressable Global) {
        var mh$ = LLVMHasUnnamedAddr$MH();
        try {
            return (int)mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetUnnamedAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$140.LLVMSetUnnamedAddr$MH,"LLVMSetUnnamedAddr");
    }
    public static void LLVMSetUnnamedAddr ( Addressable Global,  int HasUnnamedAddr) {
        var mh$ = LLVMSetUnnamedAddr$MH();
        try {
            mh$.invokeExact(Global, HasUnnamedAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAlignment$MH() {
        return RuntimeHelper.requireNonNull(constants$140.LLVMGetAlignment$MH,"LLVMGetAlignment");
    }
    public static int LLVMGetAlignment ( Addressable V) {
        var mh$ = LLVMGetAlignment$MH();
        try {
            return (int)mh$.invokeExact(V);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetAlignment$MH() {
        return RuntimeHelper.requireNonNull(constants$141.LLVMSetAlignment$MH,"LLVMSetAlignment");
    }
    public static void LLVMSetAlignment ( Addressable V,  int Bytes) {
        var mh$ = LLVMSetAlignment$MH();
        try {
            mh$.invokeExact(V, Bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGlobalSetMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$141.LLVMGlobalSetMetadata$MH,"LLVMGlobalSetMetadata");
    }
    public static void LLVMGlobalSetMetadata ( Addressable Global,  int Kind,  Addressable MD) {
        var mh$ = LLVMGlobalSetMetadata$MH();
        try {
            mh$.invokeExact(Global, Kind, MD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGlobalEraseMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$141.LLVMGlobalEraseMetadata$MH,"LLVMGlobalEraseMetadata");
    }
    public static void LLVMGlobalEraseMetadata ( Addressable Global,  int Kind) {
        var mh$ = LLVMGlobalEraseMetadata$MH();
        try {
            mh$.invokeExact(Global, Kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGlobalClearMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$141.LLVMGlobalClearMetadata$MH,"LLVMGlobalClearMetadata");
    }
    public static void LLVMGlobalClearMetadata ( Addressable Global) {
        var mh$ = LLVMGlobalClearMetadata$MH();
        try {
            mh$.invokeExact(Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGlobalCopyAllMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$141.LLVMGlobalCopyAllMetadata$MH,"LLVMGlobalCopyAllMetadata");
    }
    public static MemoryAddress LLVMGlobalCopyAllMetadata ( Addressable Value,  Addressable NumEntries) {
        var mh$ = LLVMGlobalCopyAllMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Value, NumEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeValueMetadataEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$141.LLVMDisposeValueMetadataEntries$MH,"LLVMDisposeValueMetadataEntries");
    }
    public static void LLVMDisposeValueMetadataEntries ( Addressable Entries) {
        var mh$ = LLVMDisposeValueMetadataEntries$MH();
        try {
            mh$.invokeExact(Entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMValueMetadataEntriesGetKind$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LLVMValueMetadataEntriesGetKind$MH,"LLVMValueMetadataEntriesGetKind");
    }
    public static int LLVMValueMetadataEntriesGetKind ( Addressable Entries,  int Index) {
        var mh$ = LLVMValueMetadataEntriesGetKind$MH();
        try {
            return (int)mh$.invokeExact(Entries, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMValueMetadataEntriesGetMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LLVMValueMetadataEntriesGetMetadata$MH,"LLVMValueMetadataEntriesGetMetadata");
    }
    public static MemoryAddress LLVMValueMetadataEntriesGetMetadata ( Addressable Entries,  int Index) {
        var mh$ = LLVMValueMetadataEntriesGetMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Entries, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LLVMAddGlobal$MH,"LLVMAddGlobal");
    }
    public static MemoryAddress LLVMAddGlobal ( Addressable M,  Addressable Ty,  Addressable Name) {
        var mh$ = LLVMAddGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Ty, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddGlobalInAddressSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LLVMAddGlobalInAddressSpace$MH,"LLVMAddGlobalInAddressSpace");
    }
    public static MemoryAddress LLVMAddGlobalInAddressSpace ( Addressable M,  Addressable Ty,  Addressable Name,  int AddressSpace) {
        var mh$ = LLVMAddGlobalInAddressSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Ty, Name, AddressSpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LLVMGetNamedGlobal$MH,"LLVMGetNamedGlobal");
    }
    public static MemoryAddress LLVMGetNamedGlobal ( Addressable M,  Addressable Name) {
        var mh$ = LLVMGetNamedGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LLVMGetFirstGlobal$MH,"LLVMGetFirstGlobal");
    }
    public static MemoryAddress LLVMGetFirstGlobal ( Addressable M) {
        var mh$ = LLVMGetFirstGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$143.LLVMGetLastGlobal$MH,"LLVMGetLastGlobal");
    }
    public static MemoryAddress LLVMGetLastGlobal ( Addressable M) {
        var mh$ = LLVMGetLastGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$143.LLVMGetNextGlobal$MH,"LLVMGetNextGlobal");
    }
    public static MemoryAddress LLVMGetNextGlobal ( Addressable GlobalVar) {
        var mh$ = LLVMGetNextGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$143.LLVMGetPreviousGlobal$MH,"LLVMGetPreviousGlobal");
    }
    public static MemoryAddress LLVMGetPreviousGlobal ( Addressable GlobalVar) {
        var mh$ = LLVMGetPreviousGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDeleteGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$143.LLVMDeleteGlobal$MH,"LLVMDeleteGlobal");
    }
    public static void LLVMDeleteGlobal ( Addressable GlobalVar) {
        var mh$ = LLVMDeleteGlobal$MH();
        try {
            mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetInitializer$MH() {
        return RuntimeHelper.requireNonNull(constants$143.LLVMGetInitializer$MH,"LLVMGetInitializer");
    }
    public static MemoryAddress LLVMGetInitializer ( Addressable GlobalVar) {
        var mh$ = LLVMGetInitializer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetInitializer$MH() {
        return RuntimeHelper.requireNonNull(constants$143.LLVMSetInitializer$MH,"LLVMSetInitializer");
    }
    public static void LLVMSetInitializer ( Addressable GlobalVar,  Addressable ConstantVal) {
        var mh$ = LLVMSetInitializer$MH();
        try {
            mh$.invokeExact(GlobalVar, ConstantVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsThreadLocal$MH() {
        return RuntimeHelper.requireNonNull(constants$144.LLVMIsThreadLocal$MH,"LLVMIsThreadLocal");
    }
    public static int LLVMIsThreadLocal ( Addressable GlobalVar) {
        var mh$ = LLVMIsThreadLocal$MH();
        try {
            return (int)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetThreadLocal$MH() {
        return RuntimeHelper.requireNonNull(constants$144.LLVMSetThreadLocal$MH,"LLVMSetThreadLocal");
    }
    public static void LLVMSetThreadLocal ( Addressable GlobalVar,  int IsThreadLocal) {
        var mh$ = LLVMSetThreadLocal$MH();
        try {
            mh$.invokeExact(GlobalVar, IsThreadLocal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsGlobalConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$144.LLVMIsGlobalConstant$MH,"LLVMIsGlobalConstant");
    }
    public static int LLVMIsGlobalConstant ( Addressable GlobalVar) {
        var mh$ = LLVMIsGlobalConstant$MH();
        try {
            return (int)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetGlobalConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$144.LLVMSetGlobalConstant$MH,"LLVMSetGlobalConstant");
    }
    public static void LLVMSetGlobalConstant ( Addressable GlobalVar,  int IsConstant) {
        var mh$ = LLVMSetGlobalConstant$MH();
        try {
            mh$.invokeExact(GlobalVar, IsConstant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetThreadLocalMode$MH() {
        return RuntimeHelper.requireNonNull(constants$144.LLVMGetThreadLocalMode$MH,"LLVMGetThreadLocalMode");
    }
    public static int LLVMGetThreadLocalMode ( Addressable GlobalVar) {
        var mh$ = LLVMGetThreadLocalMode$MH();
        try {
            return (int)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetThreadLocalMode$MH() {
        return RuntimeHelper.requireNonNull(constants$144.LLVMSetThreadLocalMode$MH,"LLVMSetThreadLocalMode");
    }
    public static void LLVMSetThreadLocalMode ( Addressable GlobalVar,  int Mode) {
        var mh$ = LLVMSetThreadLocalMode$MH();
        try {
            mh$.invokeExact(GlobalVar, Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsExternallyInitialized$MH() {
        return RuntimeHelper.requireNonNull(constants$145.LLVMIsExternallyInitialized$MH,"LLVMIsExternallyInitialized");
    }
    public static int LLVMIsExternallyInitialized ( Addressable GlobalVar) {
        var mh$ = LLVMIsExternallyInitialized$MH();
        try {
            return (int)mh$.invokeExact(GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetExternallyInitialized$MH() {
        return RuntimeHelper.requireNonNull(constants$145.LLVMSetExternallyInitialized$MH,"LLVMSetExternallyInitialized");
    }
    public static void LLVMSetExternallyInitialized ( Addressable GlobalVar,  int IsExtInit) {
        var mh$ = LLVMSetExternallyInitialized$MH();
        try {
            mh$.invokeExact(GlobalVar, IsExtInit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAlias2$MH() {
        return RuntimeHelper.requireNonNull(constants$145.LLVMAddAlias2$MH,"LLVMAddAlias2");
    }
    public static MemoryAddress LLVMAddAlias2 ( Addressable M,  Addressable ValueTy,  int AddrSpace,  Addressable Aliasee,  Addressable Name) {
        var mh$ = LLVMAddAlias2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, ValueTy, AddrSpace, Aliasee, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedGlobalAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$145.LLVMGetNamedGlobalAlias$MH,"LLVMGetNamedGlobalAlias");
    }
    public static MemoryAddress LLVMGetNamedGlobalAlias ( Addressable M,  Addressable Name,  long NameLen) {
        var mh$ = LLVMGetNamedGlobalAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstGlobalAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$145.LLVMGetFirstGlobalAlias$MH,"LLVMGetFirstGlobalAlias");
    }
    public static MemoryAddress LLVMGetFirstGlobalAlias ( Addressable M) {
        var mh$ = LLVMGetFirstGlobalAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastGlobalAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$145.LLVMGetLastGlobalAlias$MH,"LLVMGetLastGlobalAlias");
    }
    public static MemoryAddress LLVMGetLastGlobalAlias ( Addressable M) {
        var mh$ = LLVMGetLastGlobalAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextGlobalAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$146.LLVMGetNextGlobalAlias$MH,"LLVMGetNextGlobalAlias");
    }
    public static MemoryAddress LLVMGetNextGlobalAlias ( Addressable GA) {
        var mh$ = LLVMGetNextGlobalAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousGlobalAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$146.LLVMGetPreviousGlobalAlias$MH,"LLVMGetPreviousGlobalAlias");
    }
    public static MemoryAddress LLVMGetPreviousGlobalAlias ( Addressable GA) {
        var mh$ = LLVMGetPreviousGlobalAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAliasGetAliasee$MH() {
        return RuntimeHelper.requireNonNull(constants$146.LLVMAliasGetAliasee$MH,"LLVMAliasGetAliasee");
    }
    public static MemoryAddress LLVMAliasGetAliasee ( Addressable Alias) {
        var mh$ = LLVMAliasGetAliasee$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Alias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAliasSetAliasee$MH() {
        return RuntimeHelper.requireNonNull(constants$146.LLVMAliasSetAliasee$MH,"LLVMAliasSetAliasee");
    }
    public static void LLVMAliasSetAliasee ( Addressable Alias,  Addressable Aliasee) {
        var mh$ = LLVMAliasSetAliasee$MH();
        try {
            mh$.invokeExact(Alias, Aliasee);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDeleteFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$146.LLVMDeleteFunction$MH,"LLVMDeleteFunction");
    }
    public static void LLVMDeleteFunction ( Addressable Fn) {
        var mh$ = LLVMDeleteFunction$MH();
        try {
            mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMHasPersonalityFn$MH() {
        return RuntimeHelper.requireNonNull(constants$146.LLVMHasPersonalityFn$MH,"LLVMHasPersonalityFn");
    }
    public static int LLVMHasPersonalityFn ( Addressable Fn) {
        var mh$ = LLVMHasPersonalityFn$MH();
        try {
            return (int)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPersonalityFn$MH() {
        return RuntimeHelper.requireNonNull(constants$147.LLVMGetPersonalityFn$MH,"LLVMGetPersonalityFn");
    }
    public static MemoryAddress LLVMGetPersonalityFn ( Addressable Fn) {
        var mh$ = LLVMGetPersonalityFn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetPersonalityFn$MH() {
        return RuntimeHelper.requireNonNull(constants$147.LLVMSetPersonalityFn$MH,"LLVMSetPersonalityFn");
    }
    public static void LLVMSetPersonalityFn ( Addressable Fn,  Addressable PersonalityFn) {
        var mh$ = LLVMSetPersonalityFn$MH();
        try {
            mh$.invokeExact(Fn, PersonalityFn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMLookupIntrinsicID$MH() {
        return RuntimeHelper.requireNonNull(constants$147.LLVMLookupIntrinsicID$MH,"LLVMLookupIntrinsicID");
    }
    public static int LLVMLookupIntrinsicID ( Addressable Name,  long NameLen) {
        var mh$ = LLVMLookupIntrinsicID$MH();
        try {
            return (int)mh$.invokeExact(Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetIntrinsicID$MH() {
        return RuntimeHelper.requireNonNull(constants$147.LLVMGetIntrinsicID$MH,"LLVMGetIntrinsicID");
    }
    public static int LLVMGetIntrinsicID ( Addressable Fn) {
        var mh$ = LLVMGetIntrinsicID$MH();
        try {
            return (int)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetIntrinsicDeclaration$MH() {
        return RuntimeHelper.requireNonNull(constants$147.LLVMGetIntrinsicDeclaration$MH,"LLVMGetIntrinsicDeclaration");
    }
    public static MemoryAddress LLVMGetIntrinsicDeclaration ( Addressable Mod,  int ID,  Addressable ParamTypes,  long ParamCount) {
        var mh$ = LLVMGetIntrinsicDeclaration$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Mod, ID, ParamTypes, ParamCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntrinsicGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$147.LLVMIntrinsicGetType$MH,"LLVMIntrinsicGetType");
    }
    public static MemoryAddress LLVMIntrinsicGetType ( Addressable Ctx,  int ID,  Addressable ParamTypes,  long ParamCount) {
        var mh$ = LLVMIntrinsicGetType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ctx, ID, ParamTypes, ParamCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntrinsicGetName$MH() {
        return RuntimeHelper.requireNonNull(constants$148.LLVMIntrinsicGetName$MH,"LLVMIntrinsicGetName");
    }
    public static MemoryAddress LLVMIntrinsicGetName ( int ID,  Addressable NameLength) {
        var mh$ = LLVMIntrinsicGetName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ID, NameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntrinsicCopyOverloadedName$MH() {
        return RuntimeHelper.requireNonNull(constants$148.LLVMIntrinsicCopyOverloadedName$MH,"LLVMIntrinsicCopyOverloadedName");
    }
    public static MemoryAddress LLVMIntrinsicCopyOverloadedName ( int ID,  Addressable ParamTypes,  long ParamCount,  Addressable NameLength) {
        var mh$ = LLVMIntrinsicCopyOverloadedName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ID, ParamTypes, ParamCount, NameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntrinsicCopyOverloadedName2$MH() {
        return RuntimeHelper.requireNonNull(constants$148.LLVMIntrinsicCopyOverloadedName2$MH,"LLVMIntrinsicCopyOverloadedName2");
    }
    public static MemoryAddress LLVMIntrinsicCopyOverloadedName2 ( Addressable Mod,  int ID,  Addressable ParamTypes,  long ParamCount,  Addressable NameLength) {
        var mh$ = LLVMIntrinsicCopyOverloadedName2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Mod, ID, ParamTypes, ParamCount, NameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntrinsicIsOverloaded$MH() {
        return RuntimeHelper.requireNonNull(constants$148.LLVMIntrinsicIsOverloaded$MH,"LLVMIntrinsicIsOverloaded");
    }
    public static int LLVMIntrinsicIsOverloaded ( int ID) {
        var mh$ = LLVMIntrinsicIsOverloaded$MH();
        try {
            return (int)mh$.invokeExact(ID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFunctionCallConv$MH() {
        return RuntimeHelper.requireNonNull(constants$148.LLVMGetFunctionCallConv$MH,"LLVMGetFunctionCallConv");
    }
    public static int LLVMGetFunctionCallConv ( Addressable Fn) {
        var mh$ = LLVMGetFunctionCallConv$MH();
        try {
            return (int)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetFunctionCallConv$MH() {
        return RuntimeHelper.requireNonNull(constants$148.LLVMSetFunctionCallConv$MH,"LLVMSetFunctionCallConv");
    }
    public static void LLVMSetFunctionCallConv ( Addressable Fn,  int CC) {
        var mh$ = LLVMSetFunctionCallConv$MH();
        try {
            mh$.invokeExact(Fn, CC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGC$MH() {
        return RuntimeHelper.requireNonNull(constants$149.LLVMGetGC$MH,"LLVMGetGC");
    }
    public static MemoryAddress LLVMGetGC ( Addressable Fn) {
        var mh$ = LLVMGetGC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetGC$MH() {
        return RuntimeHelper.requireNonNull(constants$149.LLVMSetGC$MH,"LLVMSetGC");
    }
    public static void LLVMSetGC ( Addressable Fn,  Addressable Name) {
        var mh$ = LLVMSetGC$MH();
        try {
            mh$.invokeExact(Fn, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAttributeAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$149.LLVMAddAttributeAtIndex$MH,"LLVMAddAttributeAtIndex");
    }
    public static void LLVMAddAttributeAtIndex ( Addressable F,  int Idx,  Addressable A) {
        var mh$ = LLVMAddAttributeAtIndex$MH();
        try {
            mh$.invokeExact(F, Idx, A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAttributeCountAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$149.LLVMGetAttributeCountAtIndex$MH,"LLVMGetAttributeCountAtIndex");
    }
    public static int LLVMGetAttributeCountAtIndex ( Addressable F,  int Idx) {
        var mh$ = LLVMGetAttributeCountAtIndex$MH();
        try {
            return (int)mh$.invokeExact(F, Idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAttributesAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$149.LLVMGetAttributesAtIndex$MH,"LLVMGetAttributesAtIndex");
    }
    public static void LLVMGetAttributesAtIndex ( Addressable F,  int Idx,  Addressable Attrs) {
        var mh$ = LLVMGetAttributesAtIndex$MH();
        try {
            mh$.invokeExact(F, Idx, Attrs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetEnumAttributeAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$149.LLVMGetEnumAttributeAtIndex$MH,"LLVMGetEnumAttributeAtIndex");
    }
    public static MemoryAddress LLVMGetEnumAttributeAtIndex ( Addressable F,  int Idx,  int KindID) {
        var mh$ = LLVMGetEnumAttributeAtIndex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(F, Idx, KindID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetStringAttributeAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$150.LLVMGetStringAttributeAtIndex$MH,"LLVMGetStringAttributeAtIndex");
    }
    public static MemoryAddress LLVMGetStringAttributeAtIndex ( Addressable F,  int Idx,  Addressable K,  int KLen) {
        var mh$ = LLVMGetStringAttributeAtIndex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(F, Idx, K, KLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveEnumAttributeAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$150.LLVMRemoveEnumAttributeAtIndex$MH,"LLVMRemoveEnumAttributeAtIndex");
    }
    public static void LLVMRemoveEnumAttributeAtIndex ( Addressable F,  int Idx,  int KindID) {
        var mh$ = LLVMRemoveEnumAttributeAtIndex$MH();
        try {
            mh$.invokeExact(F, Idx, KindID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveStringAttributeAtIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$150.LLVMRemoveStringAttributeAtIndex$MH,"LLVMRemoveStringAttributeAtIndex");
    }
    public static void LLVMRemoveStringAttributeAtIndex ( Addressable F,  int Idx,  Addressable K,  int KLen) {
        var mh$ = LLVMRemoveStringAttributeAtIndex$MH();
        try {
            mh$.invokeExact(F, Idx, K, KLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddTargetDependentFunctionAttr$MH() {
        return RuntimeHelper.requireNonNull(constants$150.LLVMAddTargetDependentFunctionAttr$MH,"LLVMAddTargetDependentFunctionAttr");
    }
    public static void LLVMAddTargetDependentFunctionAttr ( Addressable Fn,  Addressable A,  Addressable V) {
        var mh$ = LLVMAddTargetDependentFunctionAttr$MH();
        try {
            mh$.invokeExact(Fn, A, V);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCountParams$MH() {
        return RuntimeHelper.requireNonNull(constants$150.LLVMCountParams$MH,"LLVMCountParams");
    }
    public static int LLVMCountParams ( Addressable Fn) {
        var mh$ = LLVMCountParams$MH();
        try {
            return (int)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetParams$MH() {
        return RuntimeHelper.requireNonNull(constants$150.LLVMGetParams$MH,"LLVMGetParams");
    }
    public static void LLVMGetParams ( Addressable Fn,  Addressable Params) {
        var mh$ = LLVMGetParams$MH();
        try {
            mh$.invokeExact(Fn, Params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$151.LLVMGetParam$MH,"LLVMGetParam");
    }
    public static MemoryAddress LLVMGetParam ( Addressable Fn,  int Index) {
        var mh$ = LLVMGetParam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetParamParent$MH() {
        return RuntimeHelper.requireNonNull(constants$151.LLVMGetParamParent$MH,"LLVMGetParamParent");
    }
    public static MemoryAddress LLVMGetParamParent ( Addressable Inst) {
        var mh$ = LLVMGetParamParent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstParam$MH() {
        return RuntimeHelper.requireNonNull(constants$151.LLVMGetFirstParam$MH,"LLVMGetFirstParam");
    }
    public static MemoryAddress LLVMGetFirstParam ( Addressable Fn) {
        var mh$ = LLVMGetFirstParam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastParam$MH() {
        return RuntimeHelper.requireNonNull(constants$151.LLVMGetLastParam$MH,"LLVMGetLastParam");
    }
    public static MemoryAddress LLVMGetLastParam ( Addressable Fn) {
        var mh$ = LLVMGetLastParam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextParam$MH() {
        return RuntimeHelper.requireNonNull(constants$151.LLVMGetNextParam$MH,"LLVMGetNextParam");
    }
    public static MemoryAddress LLVMGetNextParam ( Addressable Arg) {
        var mh$ = LLVMGetNextParam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousParam$MH() {
        return RuntimeHelper.requireNonNull(constants$151.LLVMGetPreviousParam$MH,"LLVMGetPreviousParam");
    }
    public static MemoryAddress LLVMGetPreviousParam ( Addressable Arg) {
        var mh$ = LLVMGetPreviousParam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetParamAlignment$MH() {
        return RuntimeHelper.requireNonNull(constants$152.LLVMSetParamAlignment$MH,"LLVMSetParamAlignment");
    }
    public static void LLVMSetParamAlignment ( Addressable Arg,  int Align) {
        var mh$ = LLVMSetParamAlignment$MH();
        try {
            mh$.invokeExact(Arg, Align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.LLVMAddGlobalIFunc$MH,"LLVMAddGlobalIFunc");
    }
    public static MemoryAddress LLVMAddGlobalIFunc ( Addressable M,  Addressable Name,  long NameLen,  Addressable Ty,  int AddrSpace,  Addressable Resolver) {
        var mh$ = LLVMAddGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name, NameLen, Ty, AddrSpace, Resolver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNamedGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.LLVMGetNamedGlobalIFunc$MH,"LLVMGetNamedGlobalIFunc");
    }
    public static MemoryAddress LLVMGetNamedGlobalIFunc ( Addressable M,  Addressable Name,  long NameLen) {
        var mh$ = LLVMGetNamedGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.LLVMGetFirstGlobalIFunc$MH,"LLVMGetFirstGlobalIFunc");
    }
    public static MemoryAddress LLVMGetFirstGlobalIFunc ( Addressable M) {
        var mh$ = LLVMGetFirstGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.LLVMGetLastGlobalIFunc$MH,"LLVMGetLastGlobalIFunc");
    }
    public static MemoryAddress LLVMGetLastGlobalIFunc ( Addressable M) {
        var mh$ = LLVMGetLastGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.LLVMGetNextGlobalIFunc$MH,"LLVMGetNextGlobalIFunc");
    }
    public static MemoryAddress LLVMGetNextGlobalIFunc ( Addressable IFunc) {
        var mh$ = LLVMGetNextGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$153.LLVMGetPreviousGlobalIFunc$MH,"LLVMGetPreviousGlobalIFunc");
    }
    public static MemoryAddress LLVMGetPreviousGlobalIFunc ( Addressable IFunc) {
        var mh$ = LLVMGetPreviousGlobalIFunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGlobalIFuncResolver$MH() {
        return RuntimeHelper.requireNonNull(constants$153.LLVMGetGlobalIFuncResolver$MH,"LLVMGetGlobalIFuncResolver");
    }
    public static MemoryAddress LLVMGetGlobalIFuncResolver ( Addressable IFunc) {
        var mh$ = LLVMGetGlobalIFuncResolver$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(IFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetGlobalIFuncResolver$MH() {
        return RuntimeHelper.requireNonNull(constants$153.LLVMSetGlobalIFuncResolver$MH,"LLVMSetGlobalIFuncResolver");
    }
    public static void LLVMSetGlobalIFuncResolver ( Addressable IFunc,  Addressable Resolver) {
        var mh$ = LLVMSetGlobalIFuncResolver$MH();
        try {
            mh$.invokeExact(IFunc, Resolver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMEraseGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$153.LLVMEraseGlobalIFunc$MH,"LLVMEraseGlobalIFunc");
    }
    public static void LLVMEraseGlobalIFunc ( Addressable IFunc) {
        var mh$ = LLVMEraseGlobalIFunc$MH();
        try {
            mh$.invokeExact(IFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveGlobalIFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$153.LLVMRemoveGlobalIFunc$MH,"LLVMRemoveGlobalIFunc");
    }
    public static void LLVMRemoveGlobalIFunc ( Addressable IFunc) {
        var mh$ = LLVMRemoveGlobalIFunc$MH();
        try {
            mh$.invokeExact(IFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMDStringInContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$153.LLVMMDStringInContext2$MH,"LLVMMDStringInContext2");
    }
    public static MemoryAddress LLVMMDStringInContext2 ( Addressable C,  Addressable Str,  long SLen) {
        var mh$ = LLVMMDStringInContext2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Str, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMDNodeInContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$154.LLVMMDNodeInContext2$MH,"LLVMMDNodeInContext2");
    }
    public static MemoryAddress LLVMMDNodeInContext2 ( Addressable C,  Addressable MDs,  long Count) {
        var mh$ = LLVMMDNodeInContext2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, MDs, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMetadataAsValue$MH() {
        return RuntimeHelper.requireNonNull(constants$154.LLVMMetadataAsValue$MH,"LLVMMetadataAsValue");
    }
    public static MemoryAddress LLVMMetadataAsValue ( Addressable C,  Addressable MD) {
        var mh$ = LLVMMetadataAsValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, MD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMValueAsMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$154.LLVMValueAsMetadata$MH,"LLVMValueAsMetadata");
    }
    public static MemoryAddress LLVMValueAsMetadata ( Addressable Val) {
        var mh$ = LLVMValueAsMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMDString$MH() {
        return RuntimeHelper.requireNonNull(constants$154.LLVMGetMDString$MH,"LLVMGetMDString");
    }
    public static MemoryAddress LLVMGetMDString ( Addressable V,  Addressable Length) {
        var mh$ = LLVMGetMDString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(V, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMDNodeNumOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$154.LLVMGetMDNodeNumOperands$MH,"LLVMGetMDNodeNumOperands");
    }
    public static int LLVMGetMDNodeNumOperands ( Addressable V) {
        var mh$ = LLVMGetMDNodeNumOperands$MH();
        try {
            return (int)mh$.invokeExact(V);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMDNodeOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$154.LLVMGetMDNodeOperands$MH,"LLVMGetMDNodeOperands");
    }
    public static void LLVMGetMDNodeOperands ( Addressable V,  Addressable Dest) {
        var mh$ = LLVMGetMDNodeOperands$MH();
        try {
            mh$.invokeExact(V, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMReplaceMDNodeOperandWith$MH() {
        return RuntimeHelper.requireNonNull(constants$155.LLVMReplaceMDNodeOperandWith$MH,"LLVMReplaceMDNodeOperandWith");
    }
    public static void LLVMReplaceMDNodeOperandWith ( Addressable V,  int Index,  Addressable Replacement) {
        var mh$ = LLVMReplaceMDNodeOperandWith$MH();
        try {
            mh$.invokeExact(V, Index, Replacement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMDStringInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$155.LLVMMDStringInContext$MH,"LLVMMDStringInContext");
    }
    public static MemoryAddress LLVMMDStringInContext ( Addressable C,  Addressable Str,  int SLen) {
        var mh$ = LLVMMDStringInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Str, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMDString$MH() {
        return RuntimeHelper.requireNonNull(constants$155.LLVMMDString$MH,"LLVMMDString");
    }
    public static MemoryAddress LLVMMDString ( Addressable Str,  int SLen) {
        var mh$ = LLVMMDString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Str, SLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMDNodeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$155.LLVMMDNodeInContext$MH,"LLVMMDNodeInContext");
    }
    public static MemoryAddress LLVMMDNodeInContext ( Addressable C,  Addressable Vals,  int Count) {
        var mh$ = LLVMMDNodeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Vals, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMDNode$MH() {
        return RuntimeHelper.requireNonNull(constants$155.LLVMMDNode$MH,"LLVMMDNode");
    }
    public static MemoryAddress LLVMMDNode ( Addressable Vals,  int Count) {
        var mh$ = LLVMMDNode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Vals, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBasicBlockAsValue$MH() {
        return RuntimeHelper.requireNonNull(constants$155.LLVMBasicBlockAsValue$MH,"LLVMBasicBlockAsValue");
    }
    public static MemoryAddress LLVMBasicBlockAsValue ( Addressable BB) {
        var mh$ = LLVMBasicBlockAsValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMValueIsBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$156.LLVMValueIsBasicBlock$MH,"LLVMValueIsBasicBlock");
    }
    public static int LLVMValueIsBasicBlock ( Addressable Val) {
        var mh$ = LLVMValueIsBasicBlock$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMValueAsBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$156.LLVMValueAsBasicBlock$MH,"LLVMValueAsBasicBlock");
    }
    public static MemoryAddress LLVMValueAsBasicBlock ( Addressable Val) {
        var mh$ = LLVMValueAsBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBasicBlockName$MH() {
        return RuntimeHelper.requireNonNull(constants$156.LLVMGetBasicBlockName$MH,"LLVMGetBasicBlockName");
    }
    public static MemoryAddress LLVMGetBasicBlockName ( Addressable BB) {
        var mh$ = LLVMGetBasicBlockName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBasicBlockParent$MH() {
        return RuntimeHelper.requireNonNull(constants$156.LLVMGetBasicBlockParent$MH,"LLVMGetBasicBlockParent");
    }
    public static MemoryAddress LLVMGetBasicBlockParent ( Addressable BB) {
        var mh$ = LLVMGetBasicBlockParent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBasicBlockTerminator$MH() {
        return RuntimeHelper.requireNonNull(constants$156.LLVMGetBasicBlockTerminator$MH,"LLVMGetBasicBlockTerminator");
    }
    public static MemoryAddress LLVMGetBasicBlockTerminator ( Addressable BB) {
        var mh$ = LLVMGetBasicBlockTerminator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCountBasicBlocks$MH() {
        return RuntimeHelper.requireNonNull(constants$156.LLVMCountBasicBlocks$MH,"LLVMCountBasicBlocks");
    }
    public static int LLVMCountBasicBlocks ( Addressable Fn) {
        var mh$ = LLVMCountBasicBlocks$MH();
        try {
            return (int)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBasicBlocks$MH() {
        return RuntimeHelper.requireNonNull(constants$157.LLVMGetBasicBlocks$MH,"LLVMGetBasicBlocks");
    }
    public static void LLVMGetBasicBlocks ( Addressable Fn,  Addressable BasicBlocks) {
        var mh$ = LLVMGetBasicBlocks$MH();
        try {
            mh$.invokeExact(Fn, BasicBlocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$157.LLVMGetFirstBasicBlock$MH,"LLVMGetFirstBasicBlock");
    }
    public static MemoryAddress LLVMGetFirstBasicBlock ( Addressable Fn) {
        var mh$ = LLVMGetFirstBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$157.LLVMGetLastBasicBlock$MH,"LLVMGetLastBasicBlock");
    }
    public static MemoryAddress LLVMGetLastBasicBlock ( Addressable Fn) {
        var mh$ = LLVMGetLastBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$157.LLVMGetNextBasicBlock$MH,"LLVMGetNextBasicBlock");
    }
    public static MemoryAddress LLVMGetNextBasicBlock ( Addressable BB) {
        var mh$ = LLVMGetNextBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$157.LLVMGetPreviousBasicBlock$MH,"LLVMGetPreviousBasicBlock");
    }
    public static MemoryAddress LLVMGetPreviousBasicBlock ( Addressable BB) {
        var mh$ = LLVMGetPreviousBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetEntryBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$157.LLVMGetEntryBasicBlock$MH,"LLVMGetEntryBasicBlock");
    }
    public static MemoryAddress LLVMGetEntryBasicBlock ( Addressable Fn) {
        var mh$ = LLVMGetEntryBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInsertExistingBasicBlockAfterInsertBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$158.LLVMInsertExistingBasicBlockAfterInsertBlock$MH,"LLVMInsertExistingBasicBlockAfterInsertBlock");
    }
    public static void LLVMInsertExistingBasicBlockAfterInsertBlock ( Addressable Builder,  Addressable BB) {
        var mh$ = LLVMInsertExistingBasicBlockAfterInsertBlock$MH();
        try {
            mh$.invokeExact(Builder, BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAppendExistingBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$158.LLVMAppendExistingBasicBlock$MH,"LLVMAppendExistingBasicBlock");
    }
    public static void LLVMAppendExistingBasicBlock ( Addressable Fn,  Addressable BB) {
        var mh$ = LLVMAppendExistingBasicBlock$MH();
        try {
            mh$.invokeExact(Fn, BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateBasicBlockInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$158.LLVMCreateBasicBlockInContext$MH,"LLVMCreateBasicBlockInContext");
    }
    public static MemoryAddress LLVMCreateBasicBlockInContext ( Addressable C,  Addressable Name) {
        var mh$ = LLVMCreateBasicBlockInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAppendBasicBlockInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$158.LLVMAppendBasicBlockInContext$MH,"LLVMAppendBasicBlockInContext");
    }
    public static MemoryAddress LLVMAppendBasicBlockInContext ( Addressable C,  Addressable Fn,  Addressable Name) {
        var mh$ = LLVMAppendBasicBlockInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Fn, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAppendBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$158.LLVMAppendBasicBlock$MH,"LLVMAppendBasicBlock");
    }
    public static MemoryAddress LLVMAppendBasicBlock ( Addressable Fn,  Addressable Name) {
        var mh$ = LLVMAppendBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Fn, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInsertBasicBlockInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$158.LLVMInsertBasicBlockInContext$MH,"LLVMInsertBasicBlockInContext");
    }
    public static MemoryAddress LLVMInsertBasicBlockInContext ( Addressable C,  Addressable BB,  Addressable Name) {
        var mh$ = LLVMInsertBasicBlockInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, BB, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInsertBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$159.LLVMInsertBasicBlock$MH,"LLVMInsertBasicBlock");
    }
    public static MemoryAddress LLVMInsertBasicBlock ( Addressable InsertBeforeBB,  Addressable Name) {
        var mh$ = LLVMInsertBasicBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(InsertBeforeBB, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDeleteBasicBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$159.LLVMDeleteBasicBlock$MH,"LLVMDeleteBasicBlock");
    }
    public static void LLVMDeleteBasicBlock ( Addressable BB) {
        var mh$ = LLVMDeleteBasicBlock$MH();
        try {
            mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveBasicBlockFromParent$MH() {
        return RuntimeHelper.requireNonNull(constants$159.LLVMRemoveBasicBlockFromParent$MH,"LLVMRemoveBasicBlockFromParent");
    }
    public static void LLVMRemoveBasicBlockFromParent ( Addressable BB) {
        var mh$ = LLVMRemoveBasicBlockFromParent$MH();
        try {
            mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMoveBasicBlockBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$159.LLVMMoveBasicBlockBefore$MH,"LLVMMoveBasicBlockBefore");
    }
    public static void LLVMMoveBasicBlockBefore ( Addressable BB,  Addressable MovePos) {
        var mh$ = LLVMMoveBasicBlockBefore$MH();
        try {
            mh$.invokeExact(BB, MovePos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMoveBasicBlockAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$159.LLVMMoveBasicBlockAfter$MH,"LLVMMoveBasicBlockAfter");
    }
    public static void LLVMMoveBasicBlockAfter ( Addressable BB,  Addressable MovePos) {
        var mh$ = LLVMMoveBasicBlockAfter$MH();
        try {
            mh$.invokeExact(BB, MovePos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFirstInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$159.LLVMGetFirstInstruction$MH,"LLVMGetFirstInstruction");
    }
    public static MemoryAddress LLVMGetFirstInstruction ( Addressable BB) {
        var mh$ = LLVMGetFirstInstruction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetLastInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$160.LLVMGetLastInstruction$MH,"LLVMGetLastInstruction");
    }
    public static MemoryAddress LLVMGetLastInstruction ( Addressable BB) {
        var mh$ = LLVMGetLastInstruction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMHasMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$160.LLVMHasMetadata$MH,"LLVMHasMetadata");
    }
    public static int LLVMHasMetadata ( Addressable Val) {
        var mh$ = LLVMHasMetadata$MH();
        try {
            return (int)mh$.invokeExact(Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$160.LLVMGetMetadata$MH,"LLVMGetMetadata");
    }
    public static MemoryAddress LLVMGetMetadata ( Addressable Val,  int KindID) {
        var mh$ = LLVMGetMetadata$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Val, KindID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$160.LLVMSetMetadata$MH,"LLVMSetMetadata");
    }
    public static void LLVMSetMetadata ( Addressable Val,  int KindID,  Addressable Node) {
        var mh$ = LLVMSetMetadata$MH();
        try {
            mh$.invokeExact(Val, KindID, Node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstructionGetAllMetadataOtherThanDebugLoc$MH() {
        return RuntimeHelper.requireNonNull(constants$160.LLVMInstructionGetAllMetadataOtherThanDebugLoc$MH,"LLVMInstructionGetAllMetadataOtherThanDebugLoc");
    }
    public static MemoryAddress LLVMInstructionGetAllMetadataOtherThanDebugLoc ( Addressable Instr,  Addressable NumEntries) {
        var mh$ = LLVMInstructionGetAllMetadataOtherThanDebugLoc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Instr, NumEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetInstructionParent$MH() {
        return RuntimeHelper.requireNonNull(constants$160.LLVMGetInstructionParent$MH,"LLVMGetInstructionParent");
    }
    public static MemoryAddress LLVMGetInstructionParent ( Addressable Inst) {
        var mh$ = LLVMGetInstructionParent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$161.LLVMGetNextInstruction$MH,"LLVMGetNextInstruction");
    }
    public static MemoryAddress LLVMGetNextInstruction ( Addressable Inst) {
        var mh$ = LLVMGetNextInstruction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPreviousInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$161.LLVMGetPreviousInstruction$MH,"LLVMGetPreviousInstruction");
    }
    public static MemoryAddress LLVMGetPreviousInstruction ( Addressable Inst) {
        var mh$ = LLVMGetPreviousInstruction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstructionRemoveFromParent$MH() {
        return RuntimeHelper.requireNonNull(constants$161.LLVMInstructionRemoveFromParent$MH,"LLVMInstructionRemoveFromParent");
    }
    public static void LLVMInstructionRemoveFromParent ( Addressable Inst) {
        var mh$ = LLVMInstructionRemoveFromParent$MH();
        try {
            mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstructionEraseFromParent$MH() {
        return RuntimeHelper.requireNonNull(constants$161.LLVMInstructionEraseFromParent$MH,"LLVMInstructionEraseFromParent");
    }
    public static void LLVMInstructionEraseFromParent ( Addressable Inst) {
        var mh$ = LLVMInstructionEraseFromParent$MH();
        try {
            mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDeleteInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$161.LLVMDeleteInstruction$MH,"LLVMDeleteInstruction");
    }
    public static void LLVMDeleteInstruction ( Addressable Inst) {
        var mh$ = LLVMDeleteInstruction$MH();
        try {
            mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetInstructionOpcode$MH() {
        return RuntimeHelper.requireNonNull(constants$161.LLVMGetInstructionOpcode$MH,"LLVMGetInstructionOpcode");
    }
    public static int LLVMGetInstructionOpcode ( Addressable Inst) {
        var mh$ = LLVMGetInstructionOpcode$MH();
        try {
            return (int)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetICmpPredicate$MH() {
        return RuntimeHelper.requireNonNull(constants$162.LLVMGetICmpPredicate$MH,"LLVMGetICmpPredicate");
    }
    public static int LLVMGetICmpPredicate ( Addressable Inst) {
        var mh$ = LLVMGetICmpPredicate$MH();
        try {
            return (int)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFCmpPredicate$MH() {
        return RuntimeHelper.requireNonNull(constants$162.LLVMGetFCmpPredicate$MH,"LLVMGetFCmpPredicate");
    }
    public static int LLVMGetFCmpPredicate ( Addressable Inst) {
        var mh$ = LLVMGetFCmpPredicate$MH();
        try {
            return (int)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstructionClone$MH() {
        return RuntimeHelper.requireNonNull(constants$162.LLVMInstructionClone$MH,"LLVMInstructionClone");
    }
    public static MemoryAddress LLVMInstructionClone ( Addressable Inst) {
        var mh$ = LLVMInstructionClone$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsATerminatorInst$MH() {
        return RuntimeHelper.requireNonNull(constants$162.LLVMIsATerminatorInst$MH,"LLVMIsATerminatorInst");
    }
    public static MemoryAddress LLVMIsATerminatorInst ( Addressable Inst) {
        var mh$ = LLVMIsATerminatorInst$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumArgOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$162.LLVMGetNumArgOperands$MH,"LLVMGetNumArgOperands");
    }
    public static int LLVMGetNumArgOperands ( Addressable Instr) {
        var mh$ = LLVMGetNumArgOperands$MH();
        try {
            return (int)mh$.invokeExact(Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetInstructionCallConv$MH() {
        return RuntimeHelper.requireNonNull(constants$162.LLVMSetInstructionCallConv$MH,"LLVMSetInstructionCallConv");
    }
    public static void LLVMSetInstructionCallConv ( Addressable Instr,  int CC) {
        var mh$ = LLVMSetInstructionCallConv$MH();
        try {
            mh$.invokeExact(Instr, CC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetInstructionCallConv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.LLVMGetInstructionCallConv$MH,"LLVMGetInstructionCallConv");
    }
    public static int LLVMGetInstructionCallConv ( Addressable Instr) {
        var mh$ = LLVMGetInstructionCallConv$MH();
        try {
            return (int)mh$.invokeExact(Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetInstrParamAlignment$MH() {
        return RuntimeHelper.requireNonNull(constants$163.LLVMSetInstrParamAlignment$MH,"LLVMSetInstrParamAlignment");
    }
    public static void LLVMSetInstrParamAlignment ( Addressable Instr,  int Idx,  int Align) {
        var mh$ = LLVMSetInstrParamAlignment$MH();
        try {
            mh$.invokeExact(Instr, Idx, Align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddCallSiteAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$163.LLVMAddCallSiteAttribute$MH,"LLVMAddCallSiteAttribute");
    }
    public static void LLVMAddCallSiteAttribute ( Addressable C,  int Idx,  Addressable A) {
        var mh$ = LLVMAddCallSiteAttribute$MH();
        try {
            mh$.invokeExact(C, Idx, A);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCallSiteAttributeCount$MH() {
        return RuntimeHelper.requireNonNull(constants$163.LLVMGetCallSiteAttributeCount$MH,"LLVMGetCallSiteAttributeCount");
    }
    public static int LLVMGetCallSiteAttributeCount ( Addressable C,  int Idx) {
        var mh$ = LLVMGetCallSiteAttributeCount$MH();
        try {
            return (int)mh$.invokeExact(C, Idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCallSiteAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$163.LLVMGetCallSiteAttributes$MH,"LLVMGetCallSiteAttributes");
    }
    public static void LLVMGetCallSiteAttributes ( Addressable C,  int Idx,  Addressable Attrs) {
        var mh$ = LLVMGetCallSiteAttributes$MH();
        try {
            mh$.invokeExact(C, Idx, Attrs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCallSiteEnumAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$163.LLVMGetCallSiteEnumAttribute$MH,"LLVMGetCallSiteEnumAttribute");
    }
    public static MemoryAddress LLVMGetCallSiteEnumAttribute ( Addressable C,  int Idx,  int KindID) {
        var mh$ = LLVMGetCallSiteEnumAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Idx, KindID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCallSiteStringAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$164.LLVMGetCallSiteStringAttribute$MH,"LLVMGetCallSiteStringAttribute");
    }
    public static MemoryAddress LLVMGetCallSiteStringAttribute ( Addressable C,  int Idx,  Addressable K,  int KLen) {
        var mh$ = LLVMGetCallSiteStringAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, Idx, K, KLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveCallSiteEnumAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$164.LLVMRemoveCallSiteEnumAttribute$MH,"LLVMRemoveCallSiteEnumAttribute");
    }
    public static void LLVMRemoveCallSiteEnumAttribute ( Addressable C,  int Idx,  int KindID) {
        var mh$ = LLVMRemoveCallSiteEnumAttribute$MH();
        try {
            mh$.invokeExact(C, Idx, KindID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveCallSiteStringAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$164.LLVMRemoveCallSiteStringAttribute$MH,"LLVMRemoveCallSiteStringAttribute");
    }
    public static void LLVMRemoveCallSiteStringAttribute ( Addressable C,  int Idx,  Addressable K,  int KLen) {
        var mh$ = LLVMRemoveCallSiteStringAttribute$MH();
        try {
            mh$.invokeExact(C, Idx, K, KLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCalledFunctionType$MH() {
        return RuntimeHelper.requireNonNull(constants$164.LLVMGetCalledFunctionType$MH,"LLVMGetCalledFunctionType");
    }
    public static MemoryAddress LLVMGetCalledFunctionType ( Addressable C) {
        var mh$ = LLVMGetCalledFunctionType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCalledValue$MH() {
        return RuntimeHelper.requireNonNull(constants$164.LLVMGetCalledValue$MH,"LLVMGetCalledValue");
    }
    public static MemoryAddress LLVMGetCalledValue ( Addressable Instr) {
        var mh$ = LLVMGetCalledValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsTailCall$MH() {
        return RuntimeHelper.requireNonNull(constants$164.LLVMIsTailCall$MH,"LLVMIsTailCall");
    }
    public static int LLVMIsTailCall ( Addressable CallInst) {
        var mh$ = LLVMIsTailCall$MH();
        try {
            return (int)mh$.invokeExact(CallInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetTailCall$MH() {
        return RuntimeHelper.requireNonNull(constants$165.LLVMSetTailCall$MH,"LLVMSetTailCall");
    }
    public static void LLVMSetTailCall ( Addressable CallInst,  int IsTailCall) {
        var mh$ = LLVMSetTailCall$MH();
        try {
            mh$.invokeExact(CallInst, IsTailCall);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNormalDest$MH() {
        return RuntimeHelper.requireNonNull(constants$165.LLVMGetNormalDest$MH,"LLVMGetNormalDest");
    }
    public static MemoryAddress LLVMGetNormalDest ( Addressable InvokeInst) {
        var mh$ = LLVMGetNormalDest$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(InvokeInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetUnwindDest$MH() {
        return RuntimeHelper.requireNonNull(constants$165.LLVMGetUnwindDest$MH,"LLVMGetUnwindDest");
    }
    public static MemoryAddress LLVMGetUnwindDest ( Addressable InvokeInst) {
        var mh$ = LLVMGetUnwindDest$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(InvokeInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetNormalDest$MH() {
        return RuntimeHelper.requireNonNull(constants$165.LLVMSetNormalDest$MH,"LLVMSetNormalDest");
    }
    public static void LLVMSetNormalDest ( Addressable InvokeInst,  Addressable B) {
        var mh$ = LLVMSetNormalDest$MH();
        try {
            mh$.invokeExact(InvokeInst, B);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetUnwindDest$MH() {
        return RuntimeHelper.requireNonNull(constants$165.LLVMSetUnwindDest$MH,"LLVMSetUnwindDest");
    }
    public static void LLVMSetUnwindDest ( Addressable InvokeInst,  Addressable B) {
        var mh$ = LLVMSetUnwindDest$MH();
        try {
            mh$.invokeExact(InvokeInst, B);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumSuccessors$MH() {
        return RuntimeHelper.requireNonNull(constants$165.LLVMGetNumSuccessors$MH,"LLVMGetNumSuccessors");
    }
    public static int LLVMGetNumSuccessors ( Addressable Term) {
        var mh$ = LLVMGetNumSuccessors$MH();
        try {
            return (int)mh$.invokeExact(Term);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSuccessor$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LLVMGetSuccessor$MH,"LLVMGetSuccessor");
    }
    public static MemoryAddress LLVMGetSuccessor ( Addressable Term,  int i) {
        var mh$ = LLVMGetSuccessor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Term, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetSuccessor$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LLVMSetSuccessor$MH,"LLVMSetSuccessor");
    }
    public static void LLVMSetSuccessor ( Addressable Term,  int i,  Addressable block) {
        var mh$ = LLVMSetSuccessor$MH();
        try {
            mh$.invokeExact(Term, i, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsConditional$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LLVMIsConditional$MH,"LLVMIsConditional");
    }
    public static int LLVMIsConditional ( Addressable Branch) {
        var mh$ = LLVMIsConditional$MH();
        try {
            return (int)mh$.invokeExact(Branch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCondition$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LLVMGetCondition$MH,"LLVMGetCondition");
    }
    public static MemoryAddress LLVMGetCondition ( Addressable Branch) {
        var mh$ = LLVMGetCondition$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Branch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetCondition$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LLVMSetCondition$MH,"LLVMSetCondition");
    }
    public static void LLVMSetCondition ( Addressable Branch,  Addressable Cond) {
        var mh$ = LLVMSetCondition$MH();
        try {
            mh$.invokeExact(Branch, Cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSwitchDefaultDest$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LLVMGetSwitchDefaultDest$MH,"LLVMGetSwitchDefaultDest");
    }
    public static MemoryAddress LLVMGetSwitchDefaultDest ( Addressable SwitchInstr) {
        var mh$ = LLVMGetSwitchDefaultDest$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(SwitchInstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAllocatedType$MH() {
        return RuntimeHelper.requireNonNull(constants$167.LLVMGetAllocatedType$MH,"LLVMGetAllocatedType");
    }
    public static MemoryAddress LLVMGetAllocatedType ( Addressable Alloca) {
        var mh$ = LLVMGetAllocatedType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Alloca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsInBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$167.LLVMIsInBounds$MH,"LLVMIsInBounds");
    }
    public static int LLVMIsInBounds ( Addressable GEP) {
        var mh$ = LLVMIsInBounds$MH();
        try {
            return (int)mh$.invokeExact(GEP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetIsInBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$167.LLVMSetIsInBounds$MH,"LLVMSetIsInBounds");
    }
    public static void LLVMSetIsInBounds ( Addressable GEP,  int InBounds) {
        var mh$ = LLVMSetIsInBounds$MH();
        try {
            mh$.invokeExact(GEP, InBounds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGEPSourceElementType$MH() {
        return RuntimeHelper.requireNonNull(constants$167.LLVMGetGEPSourceElementType$MH,"LLVMGetGEPSourceElementType");
    }
    public static MemoryAddress LLVMGetGEPSourceElementType ( Addressable GEP) {
        var mh$ = LLVMGetGEPSourceElementType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GEP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddIncoming$MH() {
        return RuntimeHelper.requireNonNull(constants$167.LLVMAddIncoming$MH,"LLVMAddIncoming");
    }
    public static void LLVMAddIncoming ( Addressable PhiNode,  Addressable IncomingValues,  Addressable IncomingBlocks,  int Count) {
        var mh$ = LLVMAddIncoming$MH();
        try {
            mh$.invokeExact(PhiNode, IncomingValues, IncomingBlocks, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCountIncoming$MH() {
        return RuntimeHelper.requireNonNull(constants$167.LLVMCountIncoming$MH,"LLVMCountIncoming");
    }
    public static int LLVMCountIncoming ( Addressable PhiNode) {
        var mh$ = LLVMCountIncoming$MH();
        try {
            return (int)mh$.invokeExact(PhiNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetIncomingValue$MH() {
        return RuntimeHelper.requireNonNull(constants$168.LLVMGetIncomingValue$MH,"LLVMGetIncomingValue");
    }
    public static MemoryAddress LLVMGetIncomingValue ( Addressable PhiNode,  int Index) {
        var mh$ = LLVMGetIncomingValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(PhiNode, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetIncomingBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$168.LLVMGetIncomingBlock$MH,"LLVMGetIncomingBlock");
    }
    public static MemoryAddress LLVMGetIncomingBlock ( Addressable PhiNode,  int Index) {
        var mh$ = LLVMGetIncomingBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(PhiNode, Index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$168.LLVMGetNumIndices$MH,"LLVMGetNumIndices");
    }
    public static int LLVMGetNumIndices ( Addressable Inst) {
        var mh$ = LLVMGetNumIndices$MH();
        try {
            return (int)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$168.LLVMGetIndices$MH,"LLVMGetIndices");
    }
    public static MemoryAddress LLVMGetIndices ( Addressable Inst) {
        var mh$ = LLVMGetIndices$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateBuilderInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$168.LLVMCreateBuilderInContext$MH,"LLVMCreateBuilderInContext");
    }
    public static MemoryAddress LLVMCreateBuilderInContext ( Addressable C) {
        var mh$ = LLVMCreateBuilderInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$168.LLVMCreateBuilder$MH,"LLVMCreateBuilder");
    }
    public static MemoryAddress LLVMCreateBuilder () {
        var mh$ = LLVMCreateBuilder$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPositionBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$169.LLVMPositionBuilder$MH,"LLVMPositionBuilder");
    }
    public static void LLVMPositionBuilder ( Addressable Builder,  Addressable Block,  Addressable Instr) {
        var mh$ = LLVMPositionBuilder$MH();
        try {
            mh$.invokeExact(Builder, Block, Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPositionBuilderBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$169.LLVMPositionBuilderBefore$MH,"LLVMPositionBuilderBefore");
    }
    public static void LLVMPositionBuilderBefore ( Addressable Builder,  Addressable Instr) {
        var mh$ = LLVMPositionBuilderBefore$MH();
        try {
            mh$.invokeExact(Builder, Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPositionBuilderAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$169.LLVMPositionBuilderAtEnd$MH,"LLVMPositionBuilderAtEnd");
    }
    public static void LLVMPositionBuilderAtEnd ( Addressable Builder,  Addressable Block) {
        var mh$ = LLVMPositionBuilderAtEnd$MH();
        try {
            mh$.invokeExact(Builder, Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetInsertBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$169.LLVMGetInsertBlock$MH,"LLVMGetInsertBlock");
    }
    public static MemoryAddress LLVMGetInsertBlock ( Addressable Builder) {
        var mh$ = LLVMGetInsertBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMClearInsertionPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$169.LLVMClearInsertionPosition$MH,"LLVMClearInsertionPosition");
    }
    public static void LLVMClearInsertionPosition ( Addressable Builder) {
        var mh$ = LLVMClearInsertionPosition$MH();
        try {
            mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInsertIntoBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$169.LLVMInsertIntoBuilder$MH,"LLVMInsertIntoBuilder");
    }
    public static void LLVMInsertIntoBuilder ( Addressable Builder,  Addressable Instr) {
        var mh$ = LLVMInsertIntoBuilder$MH();
        try {
            mh$.invokeExact(Builder, Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInsertIntoBuilderWithName$MH() {
        return RuntimeHelper.requireNonNull(constants$170.LLVMInsertIntoBuilderWithName$MH,"LLVMInsertIntoBuilderWithName");
    }
    public static void LLVMInsertIntoBuilderWithName ( Addressable Builder,  Addressable Instr,  Addressable Name) {
        var mh$ = LLVMInsertIntoBuilderWithName$MH();
        try {
            mh$.invokeExact(Builder, Instr, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$170.LLVMDisposeBuilder$MH,"LLVMDisposeBuilder");
    }
    public static void LLVMDisposeBuilder ( Addressable Builder) {
        var mh$ = LLVMDisposeBuilder$MH();
        try {
            mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCurrentDebugLocation2$MH() {
        return RuntimeHelper.requireNonNull(constants$170.LLVMGetCurrentDebugLocation2$MH,"LLVMGetCurrentDebugLocation2");
    }
    public static MemoryAddress LLVMGetCurrentDebugLocation2 ( Addressable Builder) {
        var mh$ = LLVMGetCurrentDebugLocation2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetCurrentDebugLocation2$MH() {
        return RuntimeHelper.requireNonNull(constants$170.LLVMSetCurrentDebugLocation2$MH,"LLVMSetCurrentDebugLocation2");
    }
    public static void LLVMSetCurrentDebugLocation2 ( Addressable Builder,  Addressable Loc) {
        var mh$ = LLVMSetCurrentDebugLocation2$MH();
        try {
            mh$.invokeExact(Builder, Loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetInstDebugLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$170.LLVMSetInstDebugLocation$MH,"LLVMSetInstDebugLocation");
    }
    public static void LLVMSetInstDebugLocation ( Addressable Builder,  Addressable Inst) {
        var mh$ = LLVMSetInstDebugLocation$MH();
        try {
            mh$.invokeExact(Builder, Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddMetadataToInst$MH() {
        return RuntimeHelper.requireNonNull(constants$170.LLVMAddMetadataToInst$MH,"LLVMAddMetadataToInst");
    }
    public static void LLVMAddMetadataToInst ( Addressable Builder,  Addressable Inst) {
        var mh$ = LLVMAddMetadataToInst$MH();
        try {
            mh$.invokeExact(Builder, Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuilderGetDefaultFPMathTag$MH() {
        return RuntimeHelper.requireNonNull(constants$171.LLVMBuilderGetDefaultFPMathTag$MH,"LLVMBuilderGetDefaultFPMathTag");
    }
    public static MemoryAddress LLVMBuilderGetDefaultFPMathTag ( Addressable Builder) {
        var mh$ = LLVMBuilderGetDefaultFPMathTag$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuilderSetDefaultFPMathTag$MH() {
        return RuntimeHelper.requireNonNull(constants$171.LLVMBuilderSetDefaultFPMathTag$MH,"LLVMBuilderSetDefaultFPMathTag");
    }
    public static void LLVMBuilderSetDefaultFPMathTag ( Addressable Builder,  Addressable FPMathTag) {
        var mh$ = LLVMBuilderSetDefaultFPMathTag$MH();
        try {
            mh$.invokeExact(Builder, FPMathTag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetCurrentDebugLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$171.LLVMSetCurrentDebugLocation$MH,"LLVMSetCurrentDebugLocation");
    }
    public static void LLVMSetCurrentDebugLocation ( Addressable Builder,  Addressable L) {
        var mh$ = LLVMSetCurrentDebugLocation$MH();
        try {
            mh$.invokeExact(Builder, L);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCurrentDebugLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$171.LLVMGetCurrentDebugLocation$MH,"LLVMGetCurrentDebugLocation");
    }
    public static MemoryAddress LLVMGetCurrentDebugLocation ( Addressable Builder) {
        var mh$ = LLVMGetCurrentDebugLocation$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildRetVoid$MH() {
        return RuntimeHelper.requireNonNull(constants$171.LLVMBuildRetVoid$MH,"LLVMBuildRetVoid");
    }
    public static MemoryAddress LLVMBuildRetVoid ( Addressable x0) {
        var mh$ = LLVMBuildRetVoid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildRet$MH() {
        return RuntimeHelper.requireNonNull(constants$171.LLVMBuildRet$MH,"LLVMBuildRet");
    }
    public static MemoryAddress LLVMBuildRet ( Addressable x0,  Addressable V) {
        var mh$ = LLVMBuildRet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, V);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAggregateRet$MH() {
        return RuntimeHelper.requireNonNull(constants$172.LLVMBuildAggregateRet$MH,"LLVMBuildAggregateRet");
    }
    public static MemoryAddress LLVMBuildAggregateRet ( Addressable x0,  Addressable RetVals,  int N) {
        var mh$ = LLVMBuildAggregateRet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, RetVals, N);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildBr$MH() {
        return RuntimeHelper.requireNonNull(constants$172.LLVMBuildBr$MH,"LLVMBuildBr");
    }
    public static MemoryAddress LLVMBuildBr ( Addressable x0,  Addressable Dest) {
        var mh$ = LLVMBuildBr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCondBr$MH() {
        return RuntimeHelper.requireNonNull(constants$172.LLVMBuildCondBr$MH,"LLVMBuildCondBr");
    }
    public static MemoryAddress LLVMBuildCondBr ( Addressable x0,  Addressable If,  Addressable Then,  Addressable Else) {
        var mh$ = LLVMBuildCondBr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, If, Then, Else);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSwitch$MH() {
        return RuntimeHelper.requireNonNull(constants$172.LLVMBuildSwitch$MH,"LLVMBuildSwitch");
    }
    public static MemoryAddress LLVMBuildSwitch ( Addressable x0,  Addressable V,  Addressable Else,  int NumCases) {
        var mh$ = LLVMBuildSwitch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, V, Else, NumCases);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildIndirectBr$MH() {
        return RuntimeHelper.requireNonNull(constants$172.LLVMBuildIndirectBr$MH,"LLVMBuildIndirectBr");
    }
    public static MemoryAddress LLVMBuildIndirectBr ( Addressable B,  Addressable Addr,  int NumDests) {
        var mh$ = LLVMBuildIndirectBr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Addr, NumDests);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildInvoke2$MH() {
        return RuntimeHelper.requireNonNull(constants$172.LLVMBuildInvoke2$MH,"LLVMBuildInvoke2");
    }
    public static MemoryAddress LLVMBuildInvoke2 ( Addressable x0,  Addressable Ty,  Addressable Fn,  Addressable Args,  int NumArgs,  Addressable Then,  Addressable Catch,  Addressable Name) {
        var mh$ = LLVMBuildInvoke2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, Fn, Args, NumArgs, Then, Catch, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildUnreachable$MH() {
        return RuntimeHelper.requireNonNull(constants$173.LLVMBuildUnreachable$MH,"LLVMBuildUnreachable");
    }
    public static MemoryAddress LLVMBuildUnreachable ( Addressable x0) {
        var mh$ = LLVMBuildUnreachable$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildResume$MH() {
        return RuntimeHelper.requireNonNull(constants$173.LLVMBuildResume$MH,"LLVMBuildResume");
    }
    public static MemoryAddress LLVMBuildResume ( Addressable B,  Addressable Exn) {
        var mh$ = LLVMBuildResume$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Exn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildLandingPad$MH() {
        return RuntimeHelper.requireNonNull(constants$173.LLVMBuildLandingPad$MH,"LLVMBuildLandingPad");
    }
    public static MemoryAddress LLVMBuildLandingPad ( Addressable B,  Addressable Ty,  Addressable PersFn,  int NumClauses,  Addressable Name) {
        var mh$ = LLVMBuildLandingPad$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Ty, PersFn, NumClauses, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCleanupRet$MH() {
        return RuntimeHelper.requireNonNull(constants$173.LLVMBuildCleanupRet$MH,"LLVMBuildCleanupRet");
    }
    public static MemoryAddress LLVMBuildCleanupRet ( Addressable B,  Addressable CatchPad,  Addressable BB) {
        var mh$ = LLVMBuildCleanupRet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, CatchPad, BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCatchRet$MH() {
        return RuntimeHelper.requireNonNull(constants$173.LLVMBuildCatchRet$MH,"LLVMBuildCatchRet");
    }
    public static MemoryAddress LLVMBuildCatchRet ( Addressable B,  Addressable CatchPad,  Addressable BB) {
        var mh$ = LLVMBuildCatchRet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, CatchPad, BB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCatchPad$MH() {
        return RuntimeHelper.requireNonNull(constants$173.LLVMBuildCatchPad$MH,"LLVMBuildCatchPad");
    }
    public static MemoryAddress LLVMBuildCatchPad ( Addressable B,  Addressable ParentPad,  Addressable Args,  int NumArgs,  Addressable Name) {
        var mh$ = LLVMBuildCatchPad$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, ParentPad, Args, NumArgs, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCleanupPad$MH() {
        return RuntimeHelper.requireNonNull(constants$174.LLVMBuildCleanupPad$MH,"LLVMBuildCleanupPad");
    }
    public static MemoryAddress LLVMBuildCleanupPad ( Addressable B,  Addressable ParentPad,  Addressable Args,  int NumArgs,  Addressable Name) {
        var mh$ = LLVMBuildCleanupPad$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, ParentPad, Args, NumArgs, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCatchSwitch$MH() {
        return RuntimeHelper.requireNonNull(constants$174.LLVMBuildCatchSwitch$MH,"LLVMBuildCatchSwitch");
    }
    public static MemoryAddress LLVMBuildCatchSwitch ( Addressable B,  Addressable ParentPad,  Addressable UnwindBB,  int NumHandlers,  Addressable Name) {
        var mh$ = LLVMBuildCatchSwitch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, ParentPad, UnwindBB, NumHandlers, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddCase$MH() {
        return RuntimeHelper.requireNonNull(constants$174.LLVMAddCase$MH,"LLVMAddCase");
    }
    public static void LLVMAddCase ( Addressable Switch,  Addressable OnVal,  Addressable Dest) {
        var mh$ = LLVMAddCase$MH();
        try {
            mh$.invokeExact(Switch, OnVal, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddDestination$MH() {
        return RuntimeHelper.requireNonNull(constants$174.LLVMAddDestination$MH,"LLVMAddDestination");
    }
    public static void LLVMAddDestination ( Addressable IndirectBr,  Addressable Dest) {
        var mh$ = LLVMAddDestination$MH();
        try {
            mh$.invokeExact(IndirectBr, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumClauses$MH() {
        return RuntimeHelper.requireNonNull(constants$174.LLVMGetNumClauses$MH,"LLVMGetNumClauses");
    }
    public static int LLVMGetNumClauses ( Addressable LandingPad) {
        var mh$ = LLVMGetNumClauses$MH();
        try {
            return (int)mh$.invokeExact(LandingPad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetClause$MH() {
        return RuntimeHelper.requireNonNull(constants$174.LLVMGetClause$MH,"LLVMGetClause");
    }
    public static MemoryAddress LLVMGetClause ( Addressable LandingPad,  int Idx) {
        var mh$ = LLVMGetClause$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LandingPad, Idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddClause$MH() {
        return RuntimeHelper.requireNonNull(constants$175.LLVMAddClause$MH,"LLVMAddClause");
    }
    public static void LLVMAddClause ( Addressable LandingPad,  Addressable ClauseVal) {
        var mh$ = LLVMAddClause$MH();
        try {
            mh$.invokeExact(LandingPad, ClauseVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsCleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$175.LLVMIsCleanup$MH,"LLVMIsCleanup");
    }
    public static int LLVMIsCleanup ( Addressable LandingPad) {
        var mh$ = LLVMIsCleanup$MH();
        try {
            return (int)mh$.invokeExact(LandingPad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetCleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$175.LLVMSetCleanup$MH,"LLVMSetCleanup");
    }
    public static void LLVMSetCleanup ( Addressable LandingPad,  int Val) {
        var mh$ = LLVMSetCleanup$MH();
        try {
            mh$.invokeExact(LandingPad, Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$175.LLVMAddHandler$MH,"LLVMAddHandler");
    }
    public static void LLVMAddHandler ( Addressable CatchSwitch,  Addressable Dest) {
        var mh$ = LLVMAddHandler$MH();
        try {
            mh$.invokeExact(CatchSwitch, Dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumHandlers$MH() {
        return RuntimeHelper.requireNonNull(constants$175.LLVMGetNumHandlers$MH,"LLVMGetNumHandlers");
    }
    public static int LLVMGetNumHandlers ( Addressable CatchSwitch) {
        var mh$ = LLVMGetNumHandlers$MH();
        try {
            return (int)mh$.invokeExact(CatchSwitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetHandlers$MH() {
        return RuntimeHelper.requireNonNull(constants$175.LLVMGetHandlers$MH,"LLVMGetHandlers");
    }
    public static void LLVMGetHandlers ( Addressable CatchSwitch,  Addressable Handlers) {
        var mh$ = LLVMGetHandlers$MH();
        try {
            mh$.invokeExact(CatchSwitch, Handlers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetArgOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$176.LLVMGetArgOperand$MH,"LLVMGetArgOperand");
    }
    public static MemoryAddress LLVMGetArgOperand ( Addressable Funclet,  int i) {
        var mh$ = LLVMGetArgOperand$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Funclet, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetArgOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$176.LLVMSetArgOperand$MH,"LLVMSetArgOperand");
    }
    public static void LLVMSetArgOperand ( Addressable Funclet,  int i,  Addressable value) {
        var mh$ = LLVMSetArgOperand$MH();
        try {
            mh$.invokeExact(Funclet, i, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetParentCatchSwitch$MH() {
        return RuntimeHelper.requireNonNull(constants$176.LLVMGetParentCatchSwitch$MH,"LLVMGetParentCatchSwitch");
    }
    public static MemoryAddress LLVMGetParentCatchSwitch ( Addressable CatchPad) {
        var mh$ = LLVMGetParentCatchSwitch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CatchPad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetParentCatchSwitch$MH() {
        return RuntimeHelper.requireNonNull(constants$176.LLVMSetParentCatchSwitch$MH,"LLVMSetParentCatchSwitch");
    }
    public static void LLVMSetParentCatchSwitch ( Addressable CatchPad,  Addressable CatchSwitch) {
        var mh$ = LLVMSetParentCatchSwitch$MH();
        try {
            mh$.invokeExact(CatchPad, CatchSwitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$176.LLVMBuildAdd$MH,"LLVMBuildAdd");
    }
    public static MemoryAddress LLVMBuildAdd ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNSWAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$176.LLVMBuildNSWAdd$MH,"LLVMBuildNSWAdd");
    }
    public static MemoryAddress LLVMBuildNSWAdd ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildNSWAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNUWAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$177.LLVMBuildNUWAdd$MH,"LLVMBuildNUWAdd");
    }
    public static MemoryAddress LLVMBuildNUWAdd ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildNUWAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$177.LLVMBuildFAdd$MH,"LLVMBuildFAdd");
    }
    public static MemoryAddress LLVMBuildFAdd ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildFAdd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSub$MH() {
        return RuntimeHelper.requireNonNull(constants$177.LLVMBuildSub$MH,"LLVMBuildSub");
    }
    public static MemoryAddress LLVMBuildSub ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNSWSub$MH() {
        return RuntimeHelper.requireNonNull(constants$177.LLVMBuildNSWSub$MH,"LLVMBuildNSWSub");
    }
    public static MemoryAddress LLVMBuildNSWSub ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildNSWSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNUWSub$MH() {
        return RuntimeHelper.requireNonNull(constants$177.LLVMBuildNUWSub$MH,"LLVMBuildNUWSub");
    }
    public static MemoryAddress LLVMBuildNUWSub ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildNUWSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFSub$MH() {
        return RuntimeHelper.requireNonNull(constants$177.LLVMBuildFSub$MH,"LLVMBuildFSub");
    }
    public static MemoryAddress LLVMBuildFSub ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildFSub$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildMul$MH() {
        return RuntimeHelper.requireNonNull(constants$178.LLVMBuildMul$MH,"LLVMBuildMul");
    }
    public static MemoryAddress LLVMBuildMul ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNSWMul$MH() {
        return RuntimeHelper.requireNonNull(constants$178.LLVMBuildNSWMul$MH,"LLVMBuildNSWMul");
    }
    public static MemoryAddress LLVMBuildNSWMul ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildNSWMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNUWMul$MH() {
        return RuntimeHelper.requireNonNull(constants$178.LLVMBuildNUWMul$MH,"LLVMBuildNUWMul");
    }
    public static MemoryAddress LLVMBuildNUWMul ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildNUWMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFMul$MH() {
        return RuntimeHelper.requireNonNull(constants$178.LLVMBuildFMul$MH,"LLVMBuildFMul");
    }
    public static MemoryAddress LLVMBuildFMul ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildFMul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildUDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$178.LLVMBuildUDiv$MH,"LLVMBuildUDiv");
    }
    public static MemoryAddress LLVMBuildUDiv ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildUDiv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildExactUDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$178.LLVMBuildExactUDiv$MH,"LLVMBuildExactUDiv");
    }
    public static MemoryAddress LLVMBuildExactUDiv ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildExactUDiv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$179.LLVMBuildSDiv$MH,"LLVMBuildSDiv");
    }
    public static MemoryAddress LLVMBuildSDiv ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildSDiv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildExactSDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$179.LLVMBuildExactSDiv$MH,"LLVMBuildExactSDiv");
    }
    public static MemoryAddress LLVMBuildExactSDiv ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildExactSDiv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$179.LLVMBuildFDiv$MH,"LLVMBuildFDiv");
    }
    public static MemoryAddress LLVMBuildFDiv ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildFDiv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildURem$MH() {
        return RuntimeHelper.requireNonNull(constants$179.LLVMBuildURem$MH,"LLVMBuildURem");
    }
    public static MemoryAddress LLVMBuildURem ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildURem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSRem$MH() {
        return RuntimeHelper.requireNonNull(constants$179.LLVMBuildSRem$MH,"LLVMBuildSRem");
    }
    public static MemoryAddress LLVMBuildSRem ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildSRem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFRem$MH() {
        return RuntimeHelper.requireNonNull(constants$179.LLVMBuildFRem$MH,"LLVMBuildFRem");
    }
    public static MemoryAddress LLVMBuildFRem ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildFRem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildShl$MH() {
        return RuntimeHelper.requireNonNull(constants$180.LLVMBuildShl$MH,"LLVMBuildShl");
    }
    public static MemoryAddress LLVMBuildShl ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildShl$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildLShr$MH() {
        return RuntimeHelper.requireNonNull(constants$180.LLVMBuildLShr$MH,"LLVMBuildLShr");
    }
    public static MemoryAddress LLVMBuildLShr ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildLShr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAShr$MH() {
        return RuntimeHelper.requireNonNull(constants$180.LLVMBuildAShr$MH,"LLVMBuildAShr");
    }
    public static MemoryAddress LLVMBuildAShr ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildAShr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$180.LLVMBuildAnd$MH,"LLVMBuildAnd");
    }
    public static MemoryAddress LLVMBuildAnd ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildAnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildOr$MH() {
        return RuntimeHelper.requireNonNull(constants$180.LLVMBuildOr$MH,"LLVMBuildOr");
    }
    public static MemoryAddress LLVMBuildOr ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildOr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildXor$MH() {
        return RuntimeHelper.requireNonNull(constants$180.LLVMBuildXor$MH,"LLVMBuildXor");
    }
    public static MemoryAddress LLVMBuildXor ( Addressable x0,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildXor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildBinOp$MH() {
        return RuntimeHelper.requireNonNull(constants$181.LLVMBuildBinOp$MH,"LLVMBuildBinOp");
    }
    public static MemoryAddress LLVMBuildBinOp ( Addressable B,  int Op,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildBinOp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Op, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$181.LLVMBuildNeg$MH,"LLVMBuildNeg");
    }
    public static MemoryAddress LLVMBuildNeg ( Addressable x0,  Addressable V,  Addressable Name) {
        var mh$ = LLVMBuildNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, V, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNSWNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$181.LLVMBuildNSWNeg$MH,"LLVMBuildNSWNeg");
    }
    public static MemoryAddress LLVMBuildNSWNeg ( Addressable B,  Addressable V,  Addressable Name) {
        var mh$ = LLVMBuildNSWNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, V, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNUWNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$181.LLVMBuildNUWNeg$MH,"LLVMBuildNUWNeg");
    }
    public static MemoryAddress LLVMBuildNUWNeg ( Addressable B,  Addressable V,  Addressable Name) {
        var mh$ = LLVMBuildNUWNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, V, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$181.LLVMBuildFNeg$MH,"LLVMBuildFNeg");
    }
    public static MemoryAddress LLVMBuildFNeg ( Addressable x0,  Addressable V,  Addressable Name) {
        var mh$ = LLVMBuildFNeg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, V, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildNot$MH() {
        return RuntimeHelper.requireNonNull(constants$181.LLVMBuildNot$MH,"LLVMBuildNot");
    }
    public static MemoryAddress LLVMBuildNot ( Addressable x0,  Addressable V,  Addressable Name) {
        var mh$ = LLVMBuildNot$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, V, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildMalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$182.LLVMBuildMalloc$MH,"LLVMBuildMalloc");
    }
    public static MemoryAddress LLVMBuildMalloc ( Addressable x0,  Addressable Ty,  Addressable Name) {
        var mh$ = LLVMBuildMalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildArrayMalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$182.LLVMBuildArrayMalloc$MH,"LLVMBuildArrayMalloc");
    }
    public static MemoryAddress LLVMBuildArrayMalloc ( Addressable x0,  Addressable Ty,  Addressable Val,  Addressable Name) {
        var mh$ = LLVMBuildArrayMalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, Val, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildMemSet$MH() {
        return RuntimeHelper.requireNonNull(constants$182.LLVMBuildMemSet$MH,"LLVMBuildMemSet");
    }
    public static MemoryAddress LLVMBuildMemSet ( Addressable B,  Addressable Ptr,  Addressable Val,  Addressable Len,  int Align) {
        var mh$ = LLVMBuildMemSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Ptr, Val, Len, Align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildMemCpy$MH() {
        return RuntimeHelper.requireNonNull(constants$182.LLVMBuildMemCpy$MH,"LLVMBuildMemCpy");
    }
    public static MemoryAddress LLVMBuildMemCpy ( Addressable B,  Addressable Dst,  int DstAlign,  Addressable Src,  int SrcAlign,  Addressable Size) {
        var mh$ = LLVMBuildMemCpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Dst, DstAlign, Src, SrcAlign, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildMemMove$MH() {
        return RuntimeHelper.requireNonNull(constants$182.LLVMBuildMemMove$MH,"LLVMBuildMemMove");
    }
    public static MemoryAddress LLVMBuildMemMove ( Addressable B,  Addressable Dst,  int DstAlign,  Addressable Src,  int SrcAlign,  Addressable Size) {
        var mh$ = LLVMBuildMemMove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Dst, DstAlign, Src, SrcAlign, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAlloca$MH() {
        return RuntimeHelper.requireNonNull(constants$182.LLVMBuildAlloca$MH,"LLVMBuildAlloca");
    }
    public static MemoryAddress LLVMBuildAlloca ( Addressable x0,  Addressable Ty,  Addressable Name) {
        var mh$ = LLVMBuildAlloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildArrayAlloca$MH() {
        return RuntimeHelper.requireNonNull(constants$183.LLVMBuildArrayAlloca$MH,"LLVMBuildArrayAlloca");
    }
    public static MemoryAddress LLVMBuildArrayAlloca ( Addressable x0,  Addressable Ty,  Addressable Val,  Addressable Name) {
        var mh$ = LLVMBuildArrayAlloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, Val, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFree$MH() {
        return RuntimeHelper.requireNonNull(constants$183.LLVMBuildFree$MH,"LLVMBuildFree");
    }
    public static MemoryAddress LLVMBuildFree ( Addressable x0,  Addressable PointerVal) {
        var mh$ = LLVMBuildFree$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, PointerVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildLoad2$MH() {
        return RuntimeHelper.requireNonNull(constants$183.LLVMBuildLoad2$MH,"LLVMBuildLoad2");
    }
    public static MemoryAddress LLVMBuildLoad2 ( Addressable x0,  Addressable Ty,  Addressable PointerVal,  Addressable Name) {
        var mh$ = LLVMBuildLoad2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, PointerVal, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildStore$MH() {
        return RuntimeHelper.requireNonNull(constants$183.LLVMBuildStore$MH,"LLVMBuildStore");
    }
    public static MemoryAddress LLVMBuildStore ( Addressable x0,  Addressable Val,  Addressable Ptr) {
        var mh$ = LLVMBuildStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildGEP2$MH() {
        return RuntimeHelper.requireNonNull(constants$183.LLVMBuildGEP2$MH,"LLVMBuildGEP2");
    }
    public static MemoryAddress LLVMBuildGEP2 ( Addressable B,  Addressable Ty,  Addressable Pointer,  Addressable Indices,  int NumIndices,  Addressable Name) {
        var mh$ = LLVMBuildGEP2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Ty, Pointer, Indices, NumIndices, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildInBoundsGEP2$MH() {
        return RuntimeHelper.requireNonNull(constants$183.LLVMBuildInBoundsGEP2$MH,"LLVMBuildInBoundsGEP2");
    }
    public static MemoryAddress LLVMBuildInBoundsGEP2 ( Addressable B,  Addressable Ty,  Addressable Pointer,  Addressable Indices,  int NumIndices,  Addressable Name) {
        var mh$ = LLVMBuildInBoundsGEP2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Ty, Pointer, Indices, NumIndices, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildStructGEP2$MH() {
        return RuntimeHelper.requireNonNull(constants$184.LLVMBuildStructGEP2$MH,"LLVMBuildStructGEP2");
    }
    public static MemoryAddress LLVMBuildStructGEP2 ( Addressable B,  Addressable Ty,  Addressable Pointer,  int Idx,  Addressable Name) {
        var mh$ = LLVMBuildStructGEP2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Ty, Pointer, Idx, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildGlobalString$MH() {
        return RuntimeHelper.requireNonNull(constants$184.LLVMBuildGlobalString$MH,"LLVMBuildGlobalString");
    }
    public static MemoryAddress LLVMBuildGlobalString ( Addressable B,  Addressable Str,  Addressable Name) {
        var mh$ = LLVMBuildGlobalString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Str, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildGlobalStringPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$184.LLVMBuildGlobalStringPtr$MH,"LLVMBuildGlobalStringPtr");
    }
    public static MemoryAddress LLVMBuildGlobalStringPtr ( Addressable B,  Addressable Str,  Addressable Name) {
        var mh$ = LLVMBuildGlobalStringPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Str, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetVolatile$MH() {
        return RuntimeHelper.requireNonNull(constants$184.LLVMGetVolatile$MH,"LLVMGetVolatile");
    }
    public static int LLVMGetVolatile ( Addressable MemoryAccessInst) {
        var mh$ = LLVMGetVolatile$MH();
        try {
            return (int)mh$.invokeExact(MemoryAccessInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetVolatile$MH() {
        return RuntimeHelper.requireNonNull(constants$184.LLVMSetVolatile$MH,"LLVMSetVolatile");
    }
    public static void LLVMSetVolatile ( Addressable MemoryAccessInst,  int IsVolatile) {
        var mh$ = LLVMSetVolatile$MH();
        try {
            mh$.invokeExact(MemoryAccessInst, IsVolatile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetWeak$MH() {
        return RuntimeHelper.requireNonNull(constants$184.LLVMGetWeak$MH,"LLVMGetWeak");
    }
    public static int LLVMGetWeak ( Addressable CmpXchgInst) {
        var mh$ = LLVMGetWeak$MH();
        try {
            return (int)mh$.invokeExact(CmpXchgInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetWeak$MH() {
        return RuntimeHelper.requireNonNull(constants$185.LLVMSetWeak$MH,"LLVMSetWeak");
    }
    public static void LLVMSetWeak ( Addressable CmpXchgInst,  int IsWeak) {
        var mh$ = LLVMSetWeak$MH();
        try {
            mh$.invokeExact(CmpXchgInst, IsWeak);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$185.LLVMGetOrdering$MH,"LLVMGetOrdering");
    }
    public static int LLVMGetOrdering ( Addressable MemoryAccessInst) {
        var mh$ = LLVMGetOrdering$MH();
        try {
            return (int)mh$.invokeExact(MemoryAccessInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$185.LLVMSetOrdering$MH,"LLVMSetOrdering");
    }
    public static void LLVMSetOrdering ( Addressable MemoryAccessInst,  int Ordering) {
        var mh$ = LLVMSetOrdering$MH();
        try {
            mh$.invokeExact(MemoryAccessInst, Ordering);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetAtomicRMWBinOp$MH() {
        return RuntimeHelper.requireNonNull(constants$185.LLVMGetAtomicRMWBinOp$MH,"LLVMGetAtomicRMWBinOp");
    }
    public static int LLVMGetAtomicRMWBinOp ( Addressable AtomicRMWInst) {
        var mh$ = LLVMGetAtomicRMWBinOp$MH();
        try {
            return (int)mh$.invokeExact(AtomicRMWInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetAtomicRMWBinOp$MH() {
        return RuntimeHelper.requireNonNull(constants$185.LLVMSetAtomicRMWBinOp$MH,"LLVMSetAtomicRMWBinOp");
    }
    public static void LLVMSetAtomicRMWBinOp ( Addressable AtomicRMWInst,  int BinOp) {
        var mh$ = LLVMSetAtomicRMWBinOp$MH();
        try {
            mh$.invokeExact(AtomicRMWInst, BinOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildTrunc$MH() {
        return RuntimeHelper.requireNonNull(constants$185.LLVMBuildTrunc$MH,"LLVMBuildTrunc");
    }
    public static MemoryAddress LLVMBuildTrunc ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildTrunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildZExt$MH() {
        return RuntimeHelper.requireNonNull(constants$186.LLVMBuildZExt$MH,"LLVMBuildZExt");
    }
    public static MemoryAddress LLVMBuildZExt ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildZExt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSExt$MH() {
        return RuntimeHelper.requireNonNull(constants$186.LLVMBuildSExt$MH,"LLVMBuildSExt");
    }
    public static MemoryAddress LLVMBuildSExt ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildSExt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFPToUI$MH() {
        return RuntimeHelper.requireNonNull(constants$186.LLVMBuildFPToUI$MH,"LLVMBuildFPToUI");
    }
    public static MemoryAddress LLVMBuildFPToUI ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildFPToUI$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFPToSI$MH() {
        return RuntimeHelper.requireNonNull(constants$186.LLVMBuildFPToSI$MH,"LLVMBuildFPToSI");
    }
    public static MemoryAddress LLVMBuildFPToSI ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildFPToSI$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildUIToFP$MH() {
        return RuntimeHelper.requireNonNull(constants$186.LLVMBuildUIToFP$MH,"LLVMBuildUIToFP");
    }
    public static MemoryAddress LLVMBuildUIToFP ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildUIToFP$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSIToFP$MH() {
        return RuntimeHelper.requireNonNull(constants$186.LLVMBuildSIToFP$MH,"LLVMBuildSIToFP");
    }
    public static MemoryAddress LLVMBuildSIToFP ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildSIToFP$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFPTrunc$MH() {
        return RuntimeHelper.requireNonNull(constants$187.LLVMBuildFPTrunc$MH,"LLVMBuildFPTrunc");
    }
    public static MemoryAddress LLVMBuildFPTrunc ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildFPTrunc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFPExt$MH() {
        return RuntimeHelper.requireNonNull(constants$187.LLVMBuildFPExt$MH,"LLVMBuildFPExt");
    }
    public static MemoryAddress LLVMBuildFPExt ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildFPExt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildPtrToInt$MH() {
        return RuntimeHelper.requireNonNull(constants$187.LLVMBuildPtrToInt$MH,"LLVMBuildPtrToInt");
    }
    public static MemoryAddress LLVMBuildPtrToInt ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildPtrToInt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildIntToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$187.LLVMBuildIntToPtr$MH,"LLVMBuildIntToPtr");
    }
    public static MemoryAddress LLVMBuildIntToPtr ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildIntToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$187.LLVMBuildBitCast$MH,"LLVMBuildBitCast");
    }
    public static MemoryAddress LLVMBuildBitCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAddrSpaceCast$MH() {
        return RuntimeHelper.requireNonNull(constants$187.LLVMBuildAddrSpaceCast$MH,"LLVMBuildAddrSpaceCast");
    }
    public static MemoryAddress LLVMBuildAddrSpaceCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildAddrSpaceCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildZExtOrBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$188.LLVMBuildZExtOrBitCast$MH,"LLVMBuildZExtOrBitCast");
    }
    public static MemoryAddress LLVMBuildZExtOrBitCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildZExtOrBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSExtOrBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$188.LLVMBuildSExtOrBitCast$MH,"LLVMBuildSExtOrBitCast");
    }
    public static MemoryAddress LLVMBuildSExtOrBitCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildSExtOrBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildTruncOrBitCast$MH() {
        return RuntimeHelper.requireNonNull(constants$188.LLVMBuildTruncOrBitCast$MH,"LLVMBuildTruncOrBitCast");
    }
    public static MemoryAddress LLVMBuildTruncOrBitCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildTruncOrBitCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCast$MH() {
        return RuntimeHelper.requireNonNull(constants$188.LLVMBuildCast$MH,"LLVMBuildCast");
    }
    public static MemoryAddress LLVMBuildCast ( Addressable B,  int Op,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Op, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildPointerCast$MH() {
        return RuntimeHelper.requireNonNull(constants$188.LLVMBuildPointerCast$MH,"LLVMBuildPointerCast");
    }
    public static MemoryAddress LLVMBuildPointerCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildPointerCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildIntCast2$MH() {
        return RuntimeHelper.requireNonNull(constants$188.LLVMBuildIntCast2$MH,"LLVMBuildIntCast2");
    }
    public static MemoryAddress LLVMBuildIntCast2 ( Addressable x0,  Addressable Val,  Addressable DestTy,  int IsSigned,  Addressable Name) {
        var mh$ = LLVMBuildIntCast2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, IsSigned, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFPCast$MH() {
        return RuntimeHelper.requireNonNull(constants$189.LLVMBuildFPCast$MH,"LLVMBuildFPCast");
    }
    public static MemoryAddress LLVMBuildFPCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildFPCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildIntCast$MH() {
        return RuntimeHelper.requireNonNull(constants$189.LLVMBuildIntCast$MH,"LLVMBuildIntCast");
    }
    public static MemoryAddress LLVMBuildIntCast ( Addressable x0,  Addressable Val,  Addressable DestTy,  Addressable Name) {
        var mh$ = LLVMBuildIntCast$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, DestTy, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCastOpcode$MH() {
        return RuntimeHelper.requireNonNull(constants$189.LLVMGetCastOpcode$MH,"LLVMGetCastOpcode");
    }
    public static int LLVMGetCastOpcode ( Addressable Src,  int SrcIsSigned,  Addressable DestTy,  int DestIsSigned) {
        var mh$ = LLVMGetCastOpcode$MH();
        try {
            return (int)mh$.invokeExact(Src, SrcIsSigned, DestTy, DestIsSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildICmp$MH() {
        return RuntimeHelper.requireNonNull(constants$189.LLVMBuildICmp$MH,"LLVMBuildICmp");
    }
    public static MemoryAddress LLVMBuildICmp ( Addressable x0,  int Op,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildICmp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Op, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$189.LLVMBuildFCmp$MH,"LLVMBuildFCmp");
    }
    public static MemoryAddress LLVMBuildFCmp ( Addressable x0,  int Op,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildFCmp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Op, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildPhi$MH() {
        return RuntimeHelper.requireNonNull(constants$189.LLVMBuildPhi$MH,"LLVMBuildPhi");
    }
    public static MemoryAddress LLVMBuildPhi ( Addressable x0,  Addressable Ty,  Addressable Name) {
        var mh$ = LLVMBuildPhi$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Ty, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$190.LLVMBuildCall2$MH,"LLVMBuildCall2");
    }
    public static MemoryAddress LLVMBuildCall2 ( Addressable x0,  Addressable x1,  Addressable Fn,  Addressable Args,  int NumArgs,  Addressable Name) {
        var mh$ = LLVMBuildCall2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, Fn, Args, NumArgs, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$190.LLVMBuildSelect$MH,"LLVMBuildSelect");
    }
    public static MemoryAddress LLVMBuildSelect ( Addressable x0,  Addressable If,  Addressable Then,  Addressable Else,  Addressable Name) {
        var mh$ = LLVMBuildSelect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, If, Then, Else, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildVAArg$MH() {
        return RuntimeHelper.requireNonNull(constants$190.LLVMBuildVAArg$MH,"LLVMBuildVAArg");
    }
    public static MemoryAddress LLVMBuildVAArg ( Addressable x0,  Addressable List,  Addressable Ty,  Addressable Name) {
        var mh$ = LLVMBuildVAArg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, List, Ty, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildExtractElement$MH() {
        return RuntimeHelper.requireNonNull(constants$190.LLVMBuildExtractElement$MH,"LLVMBuildExtractElement");
    }
    public static MemoryAddress LLVMBuildExtractElement ( Addressable x0,  Addressable VecVal,  Addressable Index,  Addressable Name) {
        var mh$ = LLVMBuildExtractElement$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, VecVal, Index, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildInsertElement$MH() {
        return RuntimeHelper.requireNonNull(constants$190.LLVMBuildInsertElement$MH,"LLVMBuildInsertElement");
    }
    public static MemoryAddress LLVMBuildInsertElement ( Addressable x0,  Addressable VecVal,  Addressable EltVal,  Addressable Index,  Addressable Name) {
        var mh$ = LLVMBuildInsertElement$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, VecVal, EltVal, Index, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildShuffleVector$MH() {
        return RuntimeHelper.requireNonNull(constants$190.LLVMBuildShuffleVector$MH,"LLVMBuildShuffleVector");
    }
    public static MemoryAddress LLVMBuildShuffleVector ( Addressable x0,  Addressable V1,  Addressable V2,  Addressable Mask,  Addressable Name) {
        var mh$ = LLVMBuildShuffleVector$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, V1, V2, Mask, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildExtractValue$MH() {
        return RuntimeHelper.requireNonNull(constants$191.LLVMBuildExtractValue$MH,"LLVMBuildExtractValue");
    }
    public static MemoryAddress LLVMBuildExtractValue ( Addressable x0,  Addressable AggVal,  int Index,  Addressable Name) {
        var mh$ = LLVMBuildExtractValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, AggVal, Index, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildInsertValue$MH() {
        return RuntimeHelper.requireNonNull(constants$191.LLVMBuildInsertValue$MH,"LLVMBuildInsertValue");
    }
    public static MemoryAddress LLVMBuildInsertValue ( Addressable x0,  Addressable AggVal,  Addressable EltVal,  int Index,  Addressable Name) {
        var mh$ = LLVMBuildInsertValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, AggVal, EltVal, Index, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFreeze$MH() {
        return RuntimeHelper.requireNonNull(constants$191.LLVMBuildFreeze$MH,"LLVMBuildFreeze");
    }
    public static MemoryAddress LLVMBuildFreeze ( Addressable x0,  Addressable Val,  Addressable Name) {
        var mh$ = LLVMBuildFreeze$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$191.LLVMBuildIsNull$MH,"LLVMBuildIsNull");
    }
    public static MemoryAddress LLVMBuildIsNull ( Addressable x0,  Addressable Val,  Addressable Name) {
        var mh$ = LLVMBuildIsNull$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildIsNotNull$MH() {
        return RuntimeHelper.requireNonNull(constants$191.LLVMBuildIsNotNull$MH,"LLVMBuildIsNotNull");
    }
    public static MemoryAddress LLVMBuildIsNotNull ( Addressable x0,  Addressable Val,  Addressable Name) {
        var mh$ = LLVMBuildIsNotNull$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, Val, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildPtrDiff2$MH() {
        return RuntimeHelper.requireNonNull(constants$191.LLVMBuildPtrDiff2$MH,"LLVMBuildPtrDiff2");
    }
    public static MemoryAddress LLVMBuildPtrDiff2 ( Addressable x0,  Addressable ElemTy,  Addressable LHS,  Addressable RHS,  Addressable Name) {
        var mh$ = LLVMBuildPtrDiff2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, ElemTy, LHS, RHS, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildFence$MH() {
        return RuntimeHelper.requireNonNull(constants$192.LLVMBuildFence$MH,"LLVMBuildFence");
    }
    public static MemoryAddress LLVMBuildFence ( Addressable B,  int ordering,  int singleThread,  Addressable Name) {
        var mh$ = LLVMBuildFence$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, ordering, singleThread, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAtomicRMW$MH() {
        return RuntimeHelper.requireNonNull(constants$192.LLVMBuildAtomicRMW$MH,"LLVMBuildAtomicRMW");
    }
    public static MemoryAddress LLVMBuildAtomicRMW ( Addressable B,  int op,  Addressable PTR,  Addressable Val,  int ordering,  int singleThread) {
        var mh$ = LLVMBuildAtomicRMW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, op, PTR, Val, ordering, singleThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBuildAtomicCmpXchg$MH() {
        return RuntimeHelper.requireNonNull(constants$192.LLVMBuildAtomicCmpXchg$MH,"LLVMBuildAtomicCmpXchg");
    }
    public static MemoryAddress LLVMBuildAtomicCmpXchg ( Addressable B,  Addressable Ptr,  Addressable Cmp,  Addressable New,  int SuccessOrdering,  int FailureOrdering,  int SingleThread) {
        var mh$ = LLVMBuildAtomicCmpXchg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(B, Ptr, Cmp, New, SuccessOrdering, FailureOrdering, SingleThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNumMaskElements$MH() {
        return RuntimeHelper.requireNonNull(constants$192.LLVMGetNumMaskElements$MH,"LLVMGetNumMaskElements");
    }
    public static int LLVMGetNumMaskElements ( Addressable ShuffleVectorInst) {
        var mh$ = LLVMGetNumMaskElements$MH();
        try {
            return (int)mh$.invokeExact(ShuffleVectorInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetUndefMaskElem$MH() {
        return RuntimeHelper.requireNonNull(constants$192.LLVMGetUndefMaskElem$MH,"LLVMGetUndefMaskElem");
    }
    public static int LLVMGetUndefMaskElem () {
        var mh$ = LLVMGetUndefMaskElem$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMaskValue$MH() {
        return RuntimeHelper.requireNonNull(constants$192.LLVMGetMaskValue$MH,"LLVMGetMaskValue");
    }
    public static int LLVMGetMaskValue ( Addressable ShuffleVectorInst,  int Elt) {
        var mh$ = LLVMGetMaskValue$MH();
        try {
            return (int)mh$.invokeExact(ShuffleVectorInst, Elt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsAtomicSingleThread$MH() {
        return RuntimeHelper.requireNonNull(constants$193.LLVMIsAtomicSingleThread$MH,"LLVMIsAtomicSingleThread");
    }
    public static int LLVMIsAtomicSingleThread ( Addressable AtomicInst) {
        var mh$ = LLVMIsAtomicSingleThread$MH();
        try {
            return (int)mh$.invokeExact(AtomicInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetAtomicSingleThread$MH() {
        return RuntimeHelper.requireNonNull(constants$193.LLVMSetAtomicSingleThread$MH,"LLVMSetAtomicSingleThread");
    }
    public static void LLVMSetAtomicSingleThread ( Addressable AtomicInst,  int SingleThread) {
        var mh$ = LLVMSetAtomicSingleThread$MH();
        try {
            mh$.invokeExact(AtomicInst, SingleThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCmpXchgSuccessOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$193.LLVMGetCmpXchgSuccessOrdering$MH,"LLVMGetCmpXchgSuccessOrdering");
    }
    public static int LLVMGetCmpXchgSuccessOrdering ( Addressable CmpXchgInst) {
        var mh$ = LLVMGetCmpXchgSuccessOrdering$MH();
        try {
            return (int)mh$.invokeExact(CmpXchgInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetCmpXchgSuccessOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$193.LLVMSetCmpXchgSuccessOrdering$MH,"LLVMSetCmpXchgSuccessOrdering");
    }
    public static void LLVMSetCmpXchgSuccessOrdering ( Addressable CmpXchgInst,  int Ordering) {
        var mh$ = LLVMSetCmpXchgSuccessOrdering$MH();
        try {
            mh$.invokeExact(CmpXchgInst, Ordering);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetCmpXchgFailureOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$193.LLVMGetCmpXchgFailureOrdering$MH,"LLVMGetCmpXchgFailureOrdering");
    }
    public static int LLVMGetCmpXchgFailureOrdering ( Addressable CmpXchgInst) {
        var mh$ = LLVMGetCmpXchgFailureOrdering$MH();
        try {
            return (int)mh$.invokeExact(CmpXchgInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetCmpXchgFailureOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$193.LLVMSetCmpXchgFailureOrdering$MH,"LLVMSetCmpXchgFailureOrdering");
    }
    public static void LLVMSetCmpXchgFailureOrdering ( Addressable CmpXchgInst,  int Ordering) {
        var mh$ = LLVMSetCmpXchgFailureOrdering$MH();
        try {
            mh$.invokeExact(CmpXchgInst, Ordering);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateModuleProviderForExistingModule$MH() {
        return RuntimeHelper.requireNonNull(constants$194.LLVMCreateModuleProviderForExistingModule$MH,"LLVMCreateModuleProviderForExistingModule");
    }
    public static MemoryAddress LLVMCreateModuleProviderForExistingModule ( Addressable M) {
        var mh$ = LLVMCreateModuleProviderForExistingModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeModuleProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$194.LLVMDisposeModuleProvider$MH,"LLVMDisposeModuleProvider");
    }
    public static void LLVMDisposeModuleProvider ( Addressable M) {
        var mh$ = LLVMDisposeModuleProvider$MH();
        try {
            mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateMemoryBufferWithContentsOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$194.LLVMCreateMemoryBufferWithContentsOfFile$MH,"LLVMCreateMemoryBufferWithContentsOfFile");
    }
    public static int LLVMCreateMemoryBufferWithContentsOfFile ( Addressable Path,  Addressable OutMemBuf,  Addressable OutMessage) {
        var mh$ = LLVMCreateMemoryBufferWithContentsOfFile$MH();
        try {
            return (int)mh$.invokeExact(Path, OutMemBuf, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateMemoryBufferWithSTDIN$MH() {
        return RuntimeHelper.requireNonNull(constants$194.LLVMCreateMemoryBufferWithSTDIN$MH,"LLVMCreateMemoryBufferWithSTDIN");
    }
    public static int LLVMCreateMemoryBufferWithSTDIN ( Addressable OutMemBuf,  Addressable OutMessage) {
        var mh$ = LLVMCreateMemoryBufferWithSTDIN$MH();
        try {
            return (int)mh$.invokeExact(OutMemBuf, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateMemoryBufferWithMemoryRange$MH() {
        return RuntimeHelper.requireNonNull(constants$194.LLVMCreateMemoryBufferWithMemoryRange$MH,"LLVMCreateMemoryBufferWithMemoryRange");
    }
    public static MemoryAddress LLVMCreateMemoryBufferWithMemoryRange ( Addressable InputData,  long InputDataLength,  Addressable BufferName,  int RequiresNullTerminator) {
        var mh$ = LLVMCreateMemoryBufferWithMemoryRange$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(InputData, InputDataLength, BufferName, RequiresNullTerminator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateMemoryBufferWithMemoryRangeCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$194.LLVMCreateMemoryBufferWithMemoryRangeCopy$MH,"LLVMCreateMemoryBufferWithMemoryRangeCopy");
    }
    public static MemoryAddress LLVMCreateMemoryBufferWithMemoryRangeCopy ( Addressable InputData,  long InputDataLength,  Addressable BufferName) {
        var mh$ = LLVMCreateMemoryBufferWithMemoryRangeCopy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(InputData, InputDataLength, BufferName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBufferStart$MH() {
        return RuntimeHelper.requireNonNull(constants$195.LLVMGetBufferStart$MH,"LLVMGetBufferStart");
    }
    public static MemoryAddress LLVMGetBufferStart ( Addressable MemBuf) {
        var mh$ = LLVMGetBufferStart$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MemBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$195.LLVMGetBufferSize$MH,"LLVMGetBufferSize");
    }
    public static long LLVMGetBufferSize ( Addressable MemBuf) {
        var mh$ = LLVMGetBufferSize$MH();
        try {
            return (long)mh$.invokeExact(MemBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeMemoryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$195.LLVMDisposeMemoryBuffer$MH,"LLVMDisposeMemoryBuffer");
    }
    public static void LLVMDisposeMemoryBuffer ( Addressable MemBuf) {
        var mh$ = LLVMDisposeMemoryBuffer$MH();
        try {
            mh$.invokeExact(MemBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGlobalPassRegistry$MH() {
        return RuntimeHelper.requireNonNull(constants$195.LLVMGetGlobalPassRegistry$MH,"LLVMGetGlobalPassRegistry");
    }
    public static MemoryAddress LLVMGetGlobalPassRegistry () {
        var mh$ = LLVMGetGlobalPassRegistry$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreatePassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$195.LLVMCreatePassManager$MH,"LLVMCreatePassManager");
    }
    public static MemoryAddress LLVMCreatePassManager () {
        var mh$ = LLVMCreatePassManager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateFunctionPassManagerForModule$MH() {
        return RuntimeHelper.requireNonNull(constants$195.LLVMCreateFunctionPassManagerForModule$MH,"LLVMCreateFunctionPassManagerForModule");
    }
    public static MemoryAddress LLVMCreateFunctionPassManagerForModule ( Addressable M) {
        var mh$ = LLVMCreateFunctionPassManagerForModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateFunctionPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$196.LLVMCreateFunctionPassManager$MH,"LLVMCreateFunctionPassManager");
    }
    public static MemoryAddress LLVMCreateFunctionPassManager ( Addressable MP) {
        var mh$ = LLVMCreateFunctionPassManager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRunPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$196.LLVMRunPassManager$MH,"LLVMRunPassManager");
    }
    public static int LLVMRunPassManager ( Addressable PM,  Addressable M) {
        var mh$ = LLVMRunPassManager$MH();
        try {
            return (int)mh$.invokeExact(PM, M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeFunctionPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$196.LLVMInitializeFunctionPassManager$MH,"LLVMInitializeFunctionPassManager");
    }
    public static int LLVMInitializeFunctionPassManager ( Addressable FPM) {
        var mh$ = LLVMInitializeFunctionPassManager$MH();
        try {
            return (int)mh$.invokeExact(FPM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRunFunctionPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$196.LLVMRunFunctionPassManager$MH,"LLVMRunFunctionPassManager");
    }
    public static int LLVMRunFunctionPassManager ( Addressable FPM,  Addressable F) {
        var mh$ = LLVMRunFunctionPassManager$MH();
        try {
            return (int)mh$.invokeExact(FPM, F);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFinalizeFunctionPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$196.LLVMFinalizeFunctionPassManager$MH,"LLVMFinalizeFunctionPassManager");
    }
    public static int LLVMFinalizeFunctionPassManager ( Addressable FPM) {
        var mh$ = LLVMFinalizeFunctionPassManager$MH();
        try {
            return (int)mh$.invokeExact(FPM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposePassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$196.LLVMDisposePassManager$MH,"LLVMDisposePassManager");
    }
    public static void LLVMDisposePassManager ( Addressable PM) {
        var mh$ = LLVMDisposePassManager$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStartMultithreaded$MH() {
        return RuntimeHelper.requireNonNull(constants$197.LLVMStartMultithreaded$MH,"LLVMStartMultithreaded");
    }
    public static int LLVMStartMultithreaded () {
        var mh$ = LLVMStartMultithreaded$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStopMultithreaded$MH() {
        return RuntimeHelper.requireNonNull(constants$197.LLVMStopMultithreaded$MH,"LLVMStopMultithreaded");
    }
    public static void LLVMStopMultithreaded () {
        var mh$ = LLVMStopMultithreaded$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsMultithreaded$MH() {
        return RuntimeHelper.requireNonNull(constants$197.LLVMIsMultithreaded$MH,"LLVMIsMultithreaded");
    }
    public static int LLVMIsMultithreaded () {
        var mh$ = LLVMIsMultithreaded$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMPassManagerBuilderRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMPassManagerBuilderCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$197.LLVMPassManagerBuilderCreate$MH,"LLVMPassManagerBuilderCreate");
    }
    public static MemoryAddress LLVMPassManagerBuilderCreate () {
        var mh$ = LLVMPassManagerBuilderCreate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderDispose$MH() {
        return RuntimeHelper.requireNonNull(constants$197.LLVMPassManagerBuilderDispose$MH,"LLVMPassManagerBuilderDispose");
    }
    public static void LLVMPassManagerBuilderDispose ( Addressable PMB) {
        var mh$ = LLVMPassManagerBuilderDispose$MH();
        try {
            mh$.invokeExact(PMB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderSetOptLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$197.LLVMPassManagerBuilderSetOptLevel$MH,"LLVMPassManagerBuilderSetOptLevel");
    }
    public static void LLVMPassManagerBuilderSetOptLevel ( Addressable PMB,  int OptLevel) {
        var mh$ = LLVMPassManagerBuilderSetOptLevel$MH();
        try {
            mh$.invokeExact(PMB, OptLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderSetSizeLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$198.LLVMPassManagerBuilderSetSizeLevel$MH,"LLVMPassManagerBuilderSetSizeLevel");
    }
    public static void LLVMPassManagerBuilderSetSizeLevel ( Addressable PMB,  int SizeLevel) {
        var mh$ = LLVMPassManagerBuilderSetSizeLevel$MH();
        try {
            mh$.invokeExact(PMB, SizeLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderSetDisableUnitAtATime$MH() {
        return RuntimeHelper.requireNonNull(constants$198.LLVMPassManagerBuilderSetDisableUnitAtATime$MH,"LLVMPassManagerBuilderSetDisableUnitAtATime");
    }
    public static void LLVMPassManagerBuilderSetDisableUnitAtATime ( Addressable PMB,  int Value) {
        var mh$ = LLVMPassManagerBuilderSetDisableUnitAtATime$MH();
        try {
            mh$.invokeExact(PMB, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderSetDisableUnrollLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$198.LLVMPassManagerBuilderSetDisableUnrollLoops$MH,"LLVMPassManagerBuilderSetDisableUnrollLoops");
    }
    public static void LLVMPassManagerBuilderSetDisableUnrollLoops ( Addressable PMB,  int Value) {
        var mh$ = LLVMPassManagerBuilderSetDisableUnrollLoops$MH();
        try {
            mh$.invokeExact(PMB, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderSetDisableSimplifyLibCalls$MH() {
        return RuntimeHelper.requireNonNull(constants$198.LLVMPassManagerBuilderSetDisableSimplifyLibCalls$MH,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls");
    }
    public static void LLVMPassManagerBuilderSetDisableSimplifyLibCalls ( Addressable PMB,  int Value) {
        var mh$ = LLVMPassManagerBuilderSetDisableSimplifyLibCalls$MH();
        try {
            mh$.invokeExact(PMB, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderUseInlinerWithThreshold$MH() {
        return RuntimeHelper.requireNonNull(constants$198.LLVMPassManagerBuilderUseInlinerWithThreshold$MH,"LLVMPassManagerBuilderUseInlinerWithThreshold");
    }
    public static void LLVMPassManagerBuilderUseInlinerWithThreshold ( Addressable PMB,  int Threshold) {
        var mh$ = LLVMPassManagerBuilderUseInlinerWithThreshold$MH();
        try {
            mh$.invokeExact(PMB, Threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderPopulateFunctionPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$198.LLVMPassManagerBuilderPopulateFunctionPassManager$MH,"LLVMPassManagerBuilderPopulateFunctionPassManager");
    }
    public static void LLVMPassManagerBuilderPopulateFunctionPassManager ( Addressable PMB,  Addressable PM) {
        var mh$ = LLVMPassManagerBuilderPopulateFunctionPassManager$MH();
        try {
            mh$.invokeExact(PMB, PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassManagerBuilderPopulateModulePassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$199.LLVMPassManagerBuilderPopulateModulePassManager$MH,"LLVMPassManagerBuilderPopulateModulePassManager");
    }
    public static void LLVMPassManagerBuilderPopulateModulePassManager ( Addressable PMB,  Addressable PM) {
        var mh$ = LLVMPassManagerBuilderPopulateModulePassManager$MH();
        try {
            mh$.invokeExact(PMB, PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMErrorRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMErrorTypeId = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMGetErrorTypeId$MH() {
        return RuntimeHelper.requireNonNull(constants$199.LLVMGetErrorTypeId$MH,"LLVMGetErrorTypeId");
    }
    public static MemoryAddress LLVMGetErrorTypeId ( Addressable Err) {
        var mh$ = LLVMGetErrorTypeId$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMConsumeError$MH() {
        return RuntimeHelper.requireNonNull(constants$199.LLVMConsumeError$MH,"LLVMConsumeError");
    }
    public static void LLVMConsumeError ( Addressable Err) {
        var mh$ = LLVMConsumeError$MH();
        try {
            mh$.invokeExact(Err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetErrorMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$199.LLVMGetErrorMessage$MH,"LLVMGetErrorMessage");
    }
    public static MemoryAddress LLVMGetErrorMessage ( Addressable Err) {
        var mh$ = LLVMGetErrorMessage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeErrorMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$199.LLVMDisposeErrorMessage$MH,"LLVMDisposeErrorMessage");
    }
    public static void LLVMDisposeErrorMessage ( Addressable ErrMsg) {
        var mh$ = LLVMDisposeErrorMessage$MH();
        try {
            mh$.invokeExact(ErrMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetStringErrorTypeId$MH() {
        return RuntimeHelper.requireNonNull(constants$199.LLVMGetStringErrorTypeId$MH,"LLVMGetStringErrorTypeId");
    }
    public static MemoryAddress LLVMGetStringErrorTypeId () {
        var mh$ = LLVMGetStringErrorTypeId$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateStringError$MH() {
        return RuntimeHelper.requireNonNull(constants$200.LLVMCreateStringError$MH,"LLVMCreateStringError");
    }
    public static MemoryAddress LLVMCreateStringError ( Addressable ErrMsg) {
        var mh$ = LLVMCreateStringError$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ErrMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMTargetMachineRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMTargetRef = Constants$root.C_POINTER$LAYOUT;
    public static int LLVMCodeGenLevelNone() {
        return (int)0L;
    }
    public static int LLVMCodeGenLevelLess() {
        return (int)1L;
    }
    public static int LLVMCodeGenLevelDefault() {
        return (int)2L;
    }
    public static int LLVMCodeGenLevelAggressive() {
        return (int)3L;
    }
    public static int LLVMRelocDefault() {
        return (int)0L;
    }
    public static int LLVMRelocStatic() {
        return (int)1L;
    }
    public static int LLVMRelocPIC() {
        return (int)2L;
    }
    public static int LLVMRelocDynamicNoPic() {
        return (int)3L;
    }
    public static int LLVMRelocROPI() {
        return (int)4L;
    }
    public static int LLVMRelocRWPI() {
        return (int)5L;
    }
    public static int LLVMRelocROPI_RWPI() {
        return (int)6L;
    }
    public static int LLVMCodeModelDefault() {
        return (int)0L;
    }
    public static int LLVMCodeModelJITDefault() {
        return (int)1L;
    }
    public static int LLVMCodeModelTiny() {
        return (int)2L;
    }
    public static int LLVMCodeModelSmall() {
        return (int)3L;
    }
    public static int LLVMCodeModelKernel() {
        return (int)4L;
    }
    public static int LLVMCodeModelMedium() {
        return (int)5L;
    }
    public static int LLVMCodeModelLarge() {
        return (int)6L;
    }
    public static int LLVMAssemblyFile() {
        return (int)0L;
    }
    public static int LLVMObjectFile() {
        return (int)1L;
    }
    public static MethodHandle LLVMGetFirstTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$200.LLVMGetFirstTarget$MH,"LLVMGetFirstTarget");
    }
    public static MemoryAddress LLVMGetFirstTarget () {
        var mh$ = LLVMGetFirstTarget$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetNextTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$200.LLVMGetNextTarget$MH,"LLVMGetNextTarget");
    }
    public static MemoryAddress LLVMGetNextTarget ( Addressable T) {
        var mh$ = LLVMGetNextTarget$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetFromName$MH() {
        return RuntimeHelper.requireNonNull(constants$200.LLVMGetTargetFromName$MH,"LLVMGetTargetFromName");
    }
    public static MemoryAddress LLVMGetTargetFromName ( Addressable Name) {
        var mh$ = LLVMGetTargetFromName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetFromTriple$MH() {
        return RuntimeHelper.requireNonNull(constants$200.LLVMGetTargetFromTriple$MH,"LLVMGetTargetFromTriple");
    }
    public static int LLVMGetTargetFromTriple ( Addressable Triple,  Addressable T,  Addressable ErrorMessage) {
        var mh$ = LLVMGetTargetFromTriple$MH();
        try {
            return (int)mh$.invokeExact(Triple, T, ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetName$MH() {
        return RuntimeHelper.requireNonNull(constants$200.LLVMGetTargetName$MH,"LLVMGetTargetName");
    }
    public static MemoryAddress LLVMGetTargetName ( Addressable T) {
        var mh$ = LLVMGetTargetName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetDescription$MH() {
        return RuntimeHelper.requireNonNull(constants$201.LLVMGetTargetDescription$MH,"LLVMGetTargetDescription");
    }
    public static MemoryAddress LLVMGetTargetDescription ( Addressable T) {
        var mh$ = LLVMGetTargetDescription$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTargetHasJIT$MH() {
        return RuntimeHelper.requireNonNull(constants$201.LLVMTargetHasJIT$MH,"LLVMTargetHasJIT");
    }
    public static int LLVMTargetHasJIT ( Addressable T) {
        var mh$ = LLVMTargetHasJIT$MH();
        try {
            return (int)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTargetHasTargetMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$201.LLVMTargetHasTargetMachine$MH,"LLVMTargetHasTargetMachine");
    }
    public static int LLVMTargetHasTargetMachine ( Addressable T) {
        var mh$ = LLVMTargetHasTargetMachine$MH();
        try {
            return (int)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTargetHasAsmBackend$MH() {
        return RuntimeHelper.requireNonNull(constants$201.LLVMTargetHasAsmBackend$MH,"LLVMTargetHasAsmBackend");
    }
    public static int LLVMTargetHasAsmBackend ( Addressable T) {
        var mh$ = LLVMTargetHasAsmBackend$MH();
        try {
            return (int)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateTargetMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$201.LLVMCreateTargetMachine$MH,"LLVMCreateTargetMachine");
    }
    public static MemoryAddress LLVMCreateTargetMachine ( Addressable T,  Addressable Triple,  Addressable CPU,  Addressable Features,  int Level,  int Reloc,  int CodeModel) {
        var mh$ = LLVMCreateTargetMachine$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T, Triple, CPU, Features, Level, Reloc, CodeModel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeTargetMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$201.LLVMDisposeTargetMachine$MH,"LLVMDisposeTargetMachine");
    }
    public static void LLVMDisposeTargetMachine ( Addressable T) {
        var mh$ = LLVMDisposeTargetMachine$MH();
        try {
            mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetMachineTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$202.LLVMGetTargetMachineTarget$MH,"LLVMGetTargetMachineTarget");
    }
    public static MemoryAddress LLVMGetTargetMachineTarget ( Addressable T) {
        var mh$ = LLVMGetTargetMachineTarget$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetMachineTriple$MH() {
        return RuntimeHelper.requireNonNull(constants$202.LLVMGetTargetMachineTriple$MH,"LLVMGetTargetMachineTriple");
    }
    public static MemoryAddress LLVMGetTargetMachineTriple ( Addressable T) {
        var mh$ = LLVMGetTargetMachineTriple$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetMachineCPU$MH() {
        return RuntimeHelper.requireNonNull(constants$202.LLVMGetTargetMachineCPU$MH,"LLVMGetTargetMachineCPU");
    }
    public static MemoryAddress LLVMGetTargetMachineCPU ( Addressable T) {
        var mh$ = LLVMGetTargetMachineCPU$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetTargetMachineFeatureString$MH() {
        return RuntimeHelper.requireNonNull(constants$202.LLVMGetTargetMachineFeatureString$MH,"LLVMGetTargetMachineFeatureString");
    }
    public static MemoryAddress LLVMGetTargetMachineFeatureString ( Addressable T) {
        var mh$ = LLVMGetTargetMachineFeatureString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateTargetDataLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$202.LLVMCreateTargetDataLayout$MH,"LLVMCreateTargetDataLayout");
    }
    public static MemoryAddress LLVMCreateTargetDataLayout ( Addressable T) {
        var mh$ = LLVMCreateTargetDataLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(T);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetTargetMachineAsmVerbosity$MH() {
        return RuntimeHelper.requireNonNull(constants$202.LLVMSetTargetMachineAsmVerbosity$MH,"LLVMSetTargetMachineAsmVerbosity");
    }
    public static void LLVMSetTargetMachineAsmVerbosity ( Addressable T,  int VerboseAsm) {
        var mh$ = LLVMSetTargetMachineAsmVerbosity$MH();
        try {
            mh$.invokeExact(T, VerboseAsm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTargetMachineEmitToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$203.LLVMTargetMachineEmitToFile$MH,"LLVMTargetMachineEmitToFile");
    }
    public static int LLVMTargetMachineEmitToFile ( Addressable T,  Addressable M,  Addressable Filename,  int codegen,  Addressable ErrorMessage) {
        var mh$ = LLVMTargetMachineEmitToFile$MH();
        try {
            return (int)mh$.invokeExact(T, M, Filename, codegen, ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTargetMachineEmitToMemoryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$203.LLVMTargetMachineEmitToMemoryBuffer$MH,"LLVMTargetMachineEmitToMemoryBuffer");
    }
    public static int LLVMTargetMachineEmitToMemoryBuffer ( Addressable T,  Addressable M,  int codegen,  Addressable ErrorMessage,  Addressable OutMemBuf) {
        var mh$ = LLVMTargetMachineEmitToMemoryBuffer$MH();
        try {
            return (int)mh$.invokeExact(T, M, codegen, ErrorMessage, OutMemBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDefaultTargetTriple$MH() {
        return RuntimeHelper.requireNonNull(constants$203.LLVMGetDefaultTargetTriple$MH,"LLVMGetDefaultTargetTriple");
    }
    public static MemoryAddress LLVMGetDefaultTargetTriple () {
        var mh$ = LLVMGetDefaultTargetTriple$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMNormalizeTargetTriple$MH() {
        return RuntimeHelper.requireNonNull(constants$203.LLVMNormalizeTargetTriple$MH,"LLVMNormalizeTargetTriple");
    }
    public static MemoryAddress LLVMNormalizeTargetTriple ( Addressable triple) {
        var mh$ = LLVMNormalizeTargetTriple$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(triple);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetHostCPUName$MH() {
        return RuntimeHelper.requireNonNull(constants$203.LLVMGetHostCPUName$MH,"LLVMGetHostCPUName");
    }
    public static MemoryAddress LLVMGetHostCPUName () {
        var mh$ = LLVMGetHostCPUName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetHostCPUFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$203.LLVMGetHostCPUFeatures$MH,"LLVMGetHostCPUFeatures");
    }
    public static MemoryAddress LLVMGetHostCPUFeatures () {
        var mh$ = LLVMGetHostCPUFeatures$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAnalysisPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$204.LLVMAddAnalysisPasses$MH,"LLVMAddAnalysisPasses");
    }
    public static void LLVMAddAnalysisPasses ( Addressable T,  Addressable PM) {
        var mh$ = LLVMAddAnalysisPasses$MH();
        try {
            mh$.invokeExact(T, PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMJITSymbolGenericFlagsNone() {
        return (int)0L;
    }
    public static int LLVMJITSymbolGenericFlagsExported() {
        return (int)1L;
    }
    public static int LLVMJITSymbolGenericFlagsWeak() {
        return (int)2L;
    }
    public static int LLVMJITSymbolGenericFlagsCallable() {
        return (int)4L;
    }
    public static int LLVMJITSymbolGenericFlagsMaterializationSideEffectsOnly() {
        return (int)8L;
    }
    public static OfAddress LLVMOrcExecutionSessionRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcSymbolStringPoolRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcSymbolStringPoolEntryRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcCSymbolFlagsMapPairs = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcCSymbolMapPairs = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcCSymbolAliasMapPairs = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcJITDylibRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcCDependenceMapPairs = Constants$root.C_POINTER$LAYOUT;
    public static int LLVMOrcLookupKindStatic() {
        return (int)0L;
    }
    public static int LLVMOrcLookupKindDLSym() {
        return (int)1L;
    }
    public static int LLVMOrcJITDylibLookupFlagsMatchExportedSymbolsOnly() {
        return (int)0L;
    }
    public static int LLVMOrcJITDylibLookupFlagsMatchAllSymbols() {
        return (int)1L;
    }
    public static OfAddress LLVMOrcCJITDylibSearchOrder = Constants$root.C_POINTER$LAYOUT;
    public static int LLVMOrcSymbolLookupFlagsRequiredSymbol() {
        return (int)0L;
    }
    public static int LLVMOrcSymbolLookupFlagsWeaklyReferencedSymbol() {
        return (int)1L;
    }
    public static OfAddress LLVMOrcCLookupSet = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcMaterializationUnitRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcMaterializationResponsibilityRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcResourceTrackerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcDefinitionGeneratorRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcLookupStateRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcThreadSafeContextRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcThreadSafeModuleRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcJITTargetMachineBuilderRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcObjectLayerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcObjectLinkingLayerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcIRTransformLayerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcObjectTransformLayerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcIndirectStubsManagerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcLazyCallThroughManagerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcDumpObjectsRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMOrcExecutionSessionSetErrorReporter$MH() {
        return RuntimeHelper.requireNonNull(constants$207.LLVMOrcExecutionSessionSetErrorReporter$MH,"LLVMOrcExecutionSessionSetErrorReporter");
    }
    public static void LLVMOrcExecutionSessionSetErrorReporter ( Addressable ES,  Addressable ReportError,  Addressable Ctx) {
        var mh$ = LLVMOrcExecutionSessionSetErrorReporter$MH();
        try {
            mh$.invokeExact(ES, ReportError, Ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcExecutionSessionGetSymbolStringPool$MH() {
        return RuntimeHelper.requireNonNull(constants$207.LLVMOrcExecutionSessionGetSymbolStringPool$MH,"LLVMOrcExecutionSessionGetSymbolStringPool");
    }
    public static MemoryAddress LLVMOrcExecutionSessionGetSymbolStringPool ( Addressable ES) {
        var mh$ = LLVMOrcExecutionSessionGetSymbolStringPool$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcSymbolStringPoolClearDeadEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$207.LLVMOrcSymbolStringPoolClearDeadEntries$MH,"LLVMOrcSymbolStringPoolClearDeadEntries");
    }
    public static void LLVMOrcSymbolStringPoolClearDeadEntries ( Addressable SSP) {
        var mh$ = LLVMOrcSymbolStringPoolClearDeadEntries$MH();
        try {
            mh$.invokeExact(SSP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcExecutionSessionIntern$MH() {
        return RuntimeHelper.requireNonNull(constants$208.LLVMOrcExecutionSessionIntern$MH,"LLVMOrcExecutionSessionIntern");
    }
    public static MemoryAddress LLVMOrcExecutionSessionIntern ( Addressable ES,  Addressable Name) {
        var mh$ = LLVMOrcExecutionSessionIntern$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcExecutionSessionLookup$MH() {
        return RuntimeHelper.requireNonNull(constants$208.LLVMOrcExecutionSessionLookup$MH,"LLVMOrcExecutionSessionLookup");
    }
    public static void LLVMOrcExecutionSessionLookup ( Addressable ES,  int K,  Addressable SearchOrder,  long SearchOrderSize,  Addressable Symbols,  long SymbolsSize,  Addressable HandleResult,  Addressable Ctx) {
        var mh$ = LLVMOrcExecutionSessionLookup$MH();
        try {
            mh$.invokeExact(ES, K, SearchOrder, SearchOrderSize, Symbols, SymbolsSize, HandleResult, Ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcRetainSymbolStringPoolEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$208.LLVMOrcRetainSymbolStringPoolEntry$MH,"LLVMOrcRetainSymbolStringPoolEntry");
    }
    public static void LLVMOrcRetainSymbolStringPoolEntry ( Addressable S) {
        var mh$ = LLVMOrcRetainSymbolStringPoolEntry$MH();
        try {
            mh$.invokeExact(S);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcReleaseSymbolStringPoolEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$208.LLVMOrcReleaseSymbolStringPoolEntry$MH,"LLVMOrcReleaseSymbolStringPoolEntry");
    }
    public static void LLVMOrcReleaseSymbolStringPoolEntry ( Addressable S) {
        var mh$ = LLVMOrcReleaseSymbolStringPoolEntry$MH();
        try {
            mh$.invokeExact(S);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcSymbolStringPoolEntryStr$MH() {
        return RuntimeHelper.requireNonNull(constants$209.LLVMOrcSymbolStringPoolEntryStr$MH,"LLVMOrcSymbolStringPoolEntryStr");
    }
    public static MemoryAddress LLVMOrcSymbolStringPoolEntryStr ( Addressable S) {
        var mh$ = LLVMOrcSymbolStringPoolEntryStr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(S);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcReleaseResourceTracker$MH() {
        return RuntimeHelper.requireNonNull(constants$209.LLVMOrcReleaseResourceTracker$MH,"LLVMOrcReleaseResourceTracker");
    }
    public static void LLVMOrcReleaseResourceTracker ( Addressable RT) {
        var mh$ = LLVMOrcReleaseResourceTracker$MH();
        try {
            mh$.invokeExact(RT);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcResourceTrackerTransferTo$MH() {
        return RuntimeHelper.requireNonNull(constants$209.LLVMOrcResourceTrackerTransferTo$MH,"LLVMOrcResourceTrackerTransferTo");
    }
    public static void LLVMOrcResourceTrackerTransferTo ( Addressable SrcRT,  Addressable DstRT) {
        var mh$ = LLVMOrcResourceTrackerTransferTo$MH();
        try {
            mh$.invokeExact(SrcRT, DstRT);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcResourceTrackerRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$209.LLVMOrcResourceTrackerRemove$MH,"LLVMOrcResourceTrackerRemove");
    }
    public static MemoryAddress LLVMOrcResourceTrackerRemove ( Addressable RT) {
        var mh$ = LLVMOrcResourceTrackerRemove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RT);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeDefinitionGenerator$MH() {
        return RuntimeHelper.requireNonNull(constants$209.LLVMOrcDisposeDefinitionGenerator$MH,"LLVMOrcDisposeDefinitionGenerator");
    }
    public static void LLVMOrcDisposeDefinitionGenerator ( Addressable DG) {
        var mh$ = LLVMOrcDisposeDefinitionGenerator$MH();
        try {
            mh$.invokeExact(DG);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeMaterializationUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$209.LLVMOrcDisposeMaterializationUnit$MH,"LLVMOrcDisposeMaterializationUnit");
    }
    public static void LLVMOrcDisposeMaterializationUnit ( Addressable MU) {
        var mh$ = LLVMOrcDisposeMaterializationUnit$MH();
        try {
            mh$.invokeExact(MU);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateCustomMaterializationUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LLVMOrcCreateCustomMaterializationUnit$MH,"LLVMOrcCreateCustomMaterializationUnit");
    }
    public static MemoryAddress LLVMOrcCreateCustomMaterializationUnit ( Addressable Name,  Addressable Ctx,  Addressable Syms,  long NumSyms,  Addressable InitSym,  Addressable Materialize,  Addressable Discard,  Addressable Destroy) {
        var mh$ = LLVMOrcCreateCustomMaterializationUnit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Name, Ctx, Syms, NumSyms, InitSym, Materialize, Discard, Destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcAbsoluteSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LLVMOrcAbsoluteSymbols$MH,"LLVMOrcAbsoluteSymbols");
    }
    public static MemoryAddress LLVMOrcAbsoluteSymbols ( Addressable Syms,  long NumPairs) {
        var mh$ = LLVMOrcAbsoluteSymbols$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Syms, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLazyReexports$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LLVMOrcLazyReexports$MH,"LLVMOrcLazyReexports");
    }
    public static MemoryAddress LLVMOrcLazyReexports ( Addressable LCTM,  Addressable ISM,  Addressable SourceRef,  Addressable CallableAliases,  long NumPairs) {
        var mh$ = LLVMOrcLazyReexports$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(LCTM, ISM, SourceRef, CallableAliases, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeMaterializationResponsibility$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LLVMOrcDisposeMaterializationResponsibility$MH,"LLVMOrcDisposeMaterializationResponsibility");
    }
    public static void LLVMOrcDisposeMaterializationResponsibility ( Addressable MR) {
        var mh$ = LLVMOrcDisposeMaterializationResponsibility$MH();
        try {
            mh$.invokeExact(MR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityGetTargetDylib$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LLVMOrcMaterializationResponsibilityGetTargetDylib$MH,"LLVMOrcMaterializationResponsibilityGetTargetDylib");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityGetTargetDylib ( Addressable MR) {
        var mh$ = LLVMOrcMaterializationResponsibilityGetTargetDylib$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityGetExecutionSession$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LLVMOrcMaterializationResponsibilityGetExecutionSession$MH,"LLVMOrcMaterializationResponsibilityGetExecutionSession");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityGetExecutionSession ( Addressable MR) {
        var mh$ = LLVMOrcMaterializationResponsibilityGetExecutionSession$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityGetSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$211.LLVMOrcMaterializationResponsibilityGetSymbols$MH,"LLVMOrcMaterializationResponsibilityGetSymbols");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityGetSymbols ( Addressable MR,  Addressable NumPairs) {
        var mh$ = LLVMOrcMaterializationResponsibilityGetSymbols$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeCSymbolFlagsMap$MH() {
        return RuntimeHelper.requireNonNull(constants$211.LLVMOrcDisposeCSymbolFlagsMap$MH,"LLVMOrcDisposeCSymbolFlagsMap");
    }
    public static void LLVMOrcDisposeCSymbolFlagsMap ( Addressable Pairs) {
        var mh$ = LLVMOrcDisposeCSymbolFlagsMap$MH();
        try {
            mh$.invokeExact(Pairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityGetInitializerSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$211.LLVMOrcMaterializationResponsibilityGetInitializerSymbol$MH,"LLVMOrcMaterializationResponsibilityGetInitializerSymbol");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityGetInitializerSymbol ( Addressable MR) {
        var mh$ = LLVMOrcMaterializationResponsibilityGetInitializerSymbol$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityGetRequestedSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$211.LLVMOrcMaterializationResponsibilityGetRequestedSymbols$MH,"LLVMOrcMaterializationResponsibilityGetRequestedSymbols");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityGetRequestedSymbols ( Addressable MR,  Addressable NumSymbols) {
        var mh$ = LLVMOrcMaterializationResponsibilityGetRequestedSymbols$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR, NumSymbols);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$211.LLVMOrcDisposeSymbols$MH,"LLVMOrcDisposeSymbols");
    }
    public static void LLVMOrcDisposeSymbols ( Addressable Symbols) {
        var mh$ = LLVMOrcDisposeSymbols$MH();
        try {
            mh$.invokeExact(Symbols);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityNotifyResolved$MH() {
        return RuntimeHelper.requireNonNull(constants$211.LLVMOrcMaterializationResponsibilityNotifyResolved$MH,"LLVMOrcMaterializationResponsibilityNotifyResolved");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityNotifyResolved ( Addressable MR,  Addressable Symbols,  long NumPairs) {
        var mh$ = LLVMOrcMaterializationResponsibilityNotifyResolved$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR, Symbols, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityNotifyEmitted$MH() {
        return RuntimeHelper.requireNonNull(constants$212.LLVMOrcMaterializationResponsibilityNotifyEmitted$MH,"LLVMOrcMaterializationResponsibilityNotifyEmitted");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityNotifyEmitted ( Addressable MR) {
        var mh$ = LLVMOrcMaterializationResponsibilityNotifyEmitted$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityDefineMaterializing$MH() {
        return RuntimeHelper.requireNonNull(constants$212.LLVMOrcMaterializationResponsibilityDefineMaterializing$MH,"LLVMOrcMaterializationResponsibilityDefineMaterializing");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityDefineMaterializing ( Addressable MR,  Addressable Pairs,  long NumPairs) {
        var mh$ = LLVMOrcMaterializationResponsibilityDefineMaterializing$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR, Pairs, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityFailMaterialization$MH() {
        return RuntimeHelper.requireNonNull(constants$212.LLVMOrcMaterializationResponsibilityFailMaterialization$MH,"LLVMOrcMaterializationResponsibilityFailMaterialization");
    }
    public static void LLVMOrcMaterializationResponsibilityFailMaterialization ( Addressable MR) {
        var mh$ = LLVMOrcMaterializationResponsibilityFailMaterialization$MH();
        try {
            mh$.invokeExact(MR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityReplace$MH() {
        return RuntimeHelper.requireNonNull(constants$212.LLVMOrcMaterializationResponsibilityReplace$MH,"LLVMOrcMaterializationResponsibilityReplace");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityReplace ( Addressable MR,  Addressable MU) {
        var mh$ = LLVMOrcMaterializationResponsibilityReplace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR, MU);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityDelegate$MH() {
        return RuntimeHelper.requireNonNull(constants$212.LLVMOrcMaterializationResponsibilityDelegate$MH,"LLVMOrcMaterializationResponsibilityDelegate");
    }
    public static MemoryAddress LLVMOrcMaterializationResponsibilityDelegate ( Addressable MR,  Addressable Symbols,  long NumSymbols,  Addressable Result) {
        var mh$ = LLVMOrcMaterializationResponsibilityDelegate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MR, Symbols, NumSymbols, Result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityAddDependencies$MH() {
        return RuntimeHelper.requireNonNull(constants$212.LLVMOrcMaterializationResponsibilityAddDependencies$MH,"LLVMOrcMaterializationResponsibilityAddDependencies");
    }
    public static void LLVMOrcMaterializationResponsibilityAddDependencies ( Addressable MR,  Addressable Name,  Addressable Dependencies,  long NumPairs) {
        var mh$ = LLVMOrcMaterializationResponsibilityAddDependencies$MH();
        try {
            mh$.invokeExact(MR, Name, Dependencies, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcMaterializationResponsibilityAddDependenciesForAll$MH() {
        return RuntimeHelper.requireNonNull(constants$213.LLVMOrcMaterializationResponsibilityAddDependenciesForAll$MH,"LLVMOrcMaterializationResponsibilityAddDependenciesForAll");
    }
    public static void LLVMOrcMaterializationResponsibilityAddDependenciesForAll ( Addressable MR,  Addressable Dependencies,  long NumPairs) {
        var mh$ = LLVMOrcMaterializationResponsibilityAddDependenciesForAll$MH();
        try {
            mh$.invokeExact(MR, Dependencies, NumPairs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcExecutionSessionCreateBareJITDylib$MH() {
        return RuntimeHelper.requireNonNull(constants$213.LLVMOrcExecutionSessionCreateBareJITDylib$MH,"LLVMOrcExecutionSessionCreateBareJITDylib");
    }
    public static MemoryAddress LLVMOrcExecutionSessionCreateBareJITDylib ( Addressable ES,  Addressable Name) {
        var mh$ = LLVMOrcExecutionSessionCreateBareJITDylib$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcExecutionSessionCreateJITDylib$MH() {
        return RuntimeHelper.requireNonNull(constants$213.LLVMOrcExecutionSessionCreateJITDylib$MH,"LLVMOrcExecutionSessionCreateJITDylib");
    }
    public static MemoryAddress LLVMOrcExecutionSessionCreateJITDylib ( Addressable ES,  Addressable Result,  Addressable Name) {
        var mh$ = LLVMOrcExecutionSessionCreateJITDylib$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES, Result, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcExecutionSessionGetJITDylibByName$MH() {
        return RuntimeHelper.requireNonNull(constants$213.LLVMOrcExecutionSessionGetJITDylibByName$MH,"LLVMOrcExecutionSessionGetJITDylibByName");
    }
    public static MemoryAddress LLVMOrcExecutionSessionGetJITDylibByName ( Addressable ES,  Addressable Name) {
        var mh$ = LLVMOrcExecutionSessionGetJITDylibByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITDylibCreateResourceTracker$MH() {
        return RuntimeHelper.requireNonNull(constants$213.LLVMOrcJITDylibCreateResourceTracker$MH,"LLVMOrcJITDylibCreateResourceTracker");
    }
    public static MemoryAddress LLVMOrcJITDylibCreateResourceTracker ( Addressable JD) {
        var mh$ = LLVMOrcJITDylibCreateResourceTracker$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(JD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITDylibGetDefaultResourceTracker$MH() {
        return RuntimeHelper.requireNonNull(constants$213.LLVMOrcJITDylibGetDefaultResourceTracker$MH,"LLVMOrcJITDylibGetDefaultResourceTracker");
    }
    public static MemoryAddress LLVMOrcJITDylibGetDefaultResourceTracker ( Addressable JD) {
        var mh$ = LLVMOrcJITDylibGetDefaultResourceTracker$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(JD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITDylibDefine$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LLVMOrcJITDylibDefine$MH,"LLVMOrcJITDylibDefine");
    }
    public static MemoryAddress LLVMOrcJITDylibDefine ( Addressable JD,  Addressable MU) {
        var mh$ = LLVMOrcJITDylibDefine$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(JD, MU);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITDylibClear$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LLVMOrcJITDylibClear$MH,"LLVMOrcJITDylibClear");
    }
    public static MemoryAddress LLVMOrcJITDylibClear ( Addressable JD) {
        var mh$ = LLVMOrcJITDylibClear$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(JD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITDylibAddGenerator$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LLVMOrcJITDylibAddGenerator$MH,"LLVMOrcJITDylibAddGenerator");
    }
    public static void LLVMOrcJITDylibAddGenerator ( Addressable JD,  Addressable DG) {
        var mh$ = LLVMOrcJITDylibAddGenerator$MH();
        try {
            mh$.invokeExact(JD, DG);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateCustomCAPIDefinitionGenerator$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LLVMOrcCreateCustomCAPIDefinitionGenerator$MH,"LLVMOrcCreateCustomCAPIDefinitionGenerator");
    }
    public static MemoryAddress LLVMOrcCreateCustomCAPIDefinitionGenerator ( Addressable F,  Addressable Ctx,  Addressable Dispose) {
        var mh$ = LLVMOrcCreateCustomCAPIDefinitionGenerator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(F, Ctx, Dispose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLookupStateContinueLookup$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LLVMOrcLookupStateContinueLookup$MH,"LLVMOrcLookupStateContinueLookup");
    }
    public static void LLVMOrcLookupStateContinueLookup ( Addressable S,  Addressable Err) {
        var mh$ = LLVMOrcLookupStateContinueLookup$MH();
        try {
            mh$.invokeExact(S, Err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess$MH,"LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess");
    }
    public static MemoryAddress LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess ( Addressable Result,  byte GlobalPrefx,  Addressable Filter,  Addressable FilterCtx) {
        var mh$ = LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Result, GlobalPrefx, Filter, FilterCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateDynamicLibrarySearchGeneratorForPath$MH() {
        return RuntimeHelper.requireNonNull(constants$215.LLVMOrcCreateDynamicLibrarySearchGeneratorForPath$MH,"LLVMOrcCreateDynamicLibrarySearchGeneratorForPath");
    }
    public static MemoryAddress LLVMOrcCreateDynamicLibrarySearchGeneratorForPath ( Addressable Result,  Addressable FileName,  byte GlobalPrefix,  Addressable Filter,  Addressable FilterCtx) {
        var mh$ = LLVMOrcCreateDynamicLibrarySearchGeneratorForPath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Result, FileName, GlobalPrefix, Filter, FilterCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateStaticLibrarySearchGeneratorForPath$MH() {
        return RuntimeHelper.requireNonNull(constants$215.LLVMOrcCreateStaticLibrarySearchGeneratorForPath$MH,"LLVMOrcCreateStaticLibrarySearchGeneratorForPath");
    }
    public static MemoryAddress LLVMOrcCreateStaticLibrarySearchGeneratorForPath ( Addressable Result,  Addressable ObjLayer,  Addressable FileName,  Addressable TargetTriple) {
        var mh$ = LLVMOrcCreateStaticLibrarySearchGeneratorForPath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Result, ObjLayer, FileName, TargetTriple);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateNewThreadSafeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$215.LLVMOrcCreateNewThreadSafeContext$MH,"LLVMOrcCreateNewThreadSafeContext");
    }
    public static MemoryAddress LLVMOrcCreateNewThreadSafeContext () {
        var mh$ = LLVMOrcCreateNewThreadSafeContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcThreadSafeContextGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$215.LLVMOrcThreadSafeContextGetContext$MH,"LLVMOrcThreadSafeContextGetContext");
    }
    public static MemoryAddress LLVMOrcThreadSafeContextGetContext ( Addressable TSCtx) {
        var mh$ = LLVMOrcThreadSafeContextGetContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TSCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeThreadSafeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$215.LLVMOrcDisposeThreadSafeContext$MH,"LLVMOrcDisposeThreadSafeContext");
    }
    public static void LLVMOrcDisposeThreadSafeContext ( Addressable TSCtx) {
        var mh$ = LLVMOrcDisposeThreadSafeContext$MH();
        try {
            mh$.invokeExact(TSCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateNewThreadSafeModule$MH() {
        return RuntimeHelper.requireNonNull(constants$215.LLVMOrcCreateNewThreadSafeModule$MH,"LLVMOrcCreateNewThreadSafeModule");
    }
    public static MemoryAddress LLVMOrcCreateNewThreadSafeModule ( Addressable M,  Addressable TSCtx) {
        var mh$ = LLVMOrcCreateNewThreadSafeModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, TSCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeThreadSafeModule$MH() {
        return RuntimeHelper.requireNonNull(constants$216.LLVMOrcDisposeThreadSafeModule$MH,"LLVMOrcDisposeThreadSafeModule");
    }
    public static void LLVMOrcDisposeThreadSafeModule ( Addressable TSM) {
        var mh$ = LLVMOrcDisposeThreadSafeModule$MH();
        try {
            mh$.invokeExact(TSM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcThreadSafeModuleWithModuleDo$MH() {
        return RuntimeHelper.requireNonNull(constants$216.LLVMOrcThreadSafeModuleWithModuleDo$MH,"LLVMOrcThreadSafeModuleWithModuleDo");
    }
    public static MemoryAddress LLVMOrcThreadSafeModuleWithModuleDo ( Addressable TSM,  Addressable F,  Addressable Ctx) {
        var mh$ = LLVMOrcThreadSafeModuleWithModuleDo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TSM, F, Ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITTargetMachineBuilderDetectHost$MH() {
        return RuntimeHelper.requireNonNull(constants$216.LLVMOrcJITTargetMachineBuilderDetectHost$MH,"LLVMOrcJITTargetMachineBuilderDetectHost");
    }
    public static MemoryAddress LLVMOrcJITTargetMachineBuilderDetectHost ( Addressable Result) {
        var mh$ = LLVMOrcJITTargetMachineBuilderDetectHost$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$216.LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine$MH,"LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine");
    }
    public static MemoryAddress LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine ( Addressable TM) {
        var mh$ = LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeJITTargetMachineBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$216.LLVMOrcDisposeJITTargetMachineBuilder$MH,"LLVMOrcDisposeJITTargetMachineBuilder");
    }
    public static void LLVMOrcDisposeJITTargetMachineBuilder ( Addressable JTMB) {
        var mh$ = LLVMOrcDisposeJITTargetMachineBuilder$MH();
        try {
            mh$.invokeExact(JTMB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITTargetMachineBuilderGetTargetTriple$MH() {
        return RuntimeHelper.requireNonNull(constants$216.LLVMOrcJITTargetMachineBuilderGetTargetTriple$MH,"LLVMOrcJITTargetMachineBuilderGetTargetTriple");
    }
    public static MemoryAddress LLVMOrcJITTargetMachineBuilderGetTargetTriple ( Addressable JTMB) {
        var mh$ = LLVMOrcJITTargetMachineBuilderGetTargetTriple$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(JTMB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcJITTargetMachineBuilderSetTargetTriple$MH() {
        return RuntimeHelper.requireNonNull(constants$217.LLVMOrcJITTargetMachineBuilderSetTargetTriple$MH,"LLVMOrcJITTargetMachineBuilderSetTargetTriple");
    }
    public static void LLVMOrcJITTargetMachineBuilderSetTargetTriple ( Addressable JTMB,  Addressable TargetTriple) {
        var mh$ = LLVMOrcJITTargetMachineBuilderSetTargetTriple$MH();
        try {
            mh$.invokeExact(JTMB, TargetTriple);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcObjectLayerAddObjectFile$MH() {
        return RuntimeHelper.requireNonNull(constants$217.LLVMOrcObjectLayerAddObjectFile$MH,"LLVMOrcObjectLayerAddObjectFile");
    }
    public static MemoryAddress LLVMOrcObjectLayerAddObjectFile ( Addressable ObjLayer,  Addressable JD,  Addressable ObjBuffer) {
        var mh$ = LLVMOrcObjectLayerAddObjectFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ObjLayer, JD, ObjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcObjectLayerAddObjectFileWithRT$MH() {
        return RuntimeHelper.requireNonNull(constants$217.LLVMOrcObjectLayerAddObjectFileWithRT$MH,"LLVMOrcObjectLayerAddObjectFileWithRT");
    }
    public static MemoryAddress LLVMOrcObjectLayerAddObjectFileWithRT ( Addressable ObjLayer,  Addressable RT,  Addressable ObjBuffer) {
        var mh$ = LLVMOrcObjectLayerAddObjectFileWithRT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ObjLayer, RT, ObjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcObjectLayerEmit$MH() {
        return RuntimeHelper.requireNonNull(constants$217.LLVMOrcObjectLayerEmit$MH,"LLVMOrcObjectLayerEmit");
    }
    public static void LLVMOrcObjectLayerEmit ( Addressable ObjLayer,  Addressable R,  Addressable ObjBuffer) {
        var mh$ = LLVMOrcObjectLayerEmit$MH();
        try {
            mh$.invokeExact(ObjLayer, R, ObjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeObjectLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$217.LLVMOrcDisposeObjectLayer$MH,"LLVMOrcDisposeObjectLayer");
    }
    public static void LLVMOrcDisposeObjectLayer ( Addressable ObjLayer) {
        var mh$ = LLVMOrcDisposeObjectLayer$MH();
        try {
            mh$.invokeExact(ObjLayer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcIRTransformLayerEmit$MH() {
        return RuntimeHelper.requireNonNull(constants$217.LLVMOrcIRTransformLayerEmit$MH,"LLVMOrcIRTransformLayerEmit");
    }
    public static void LLVMOrcIRTransformLayerEmit ( Addressable IRTransformLayer,  Addressable MR,  Addressable TSM) {
        var mh$ = LLVMOrcIRTransformLayerEmit$MH();
        try {
            mh$.invokeExact(IRTransformLayer, MR, TSM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcIRTransformLayerSetTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$218.LLVMOrcIRTransformLayerSetTransform$MH,"LLVMOrcIRTransformLayerSetTransform");
    }
    public static void LLVMOrcIRTransformLayerSetTransform ( Addressable IRTransformLayer,  Addressable TransformFunction,  Addressable Ctx) {
        var mh$ = LLVMOrcIRTransformLayerSetTransform$MH();
        try {
            mh$.invokeExact(IRTransformLayer, TransformFunction, Ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcObjectTransformLayerSetTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$218.LLVMOrcObjectTransformLayerSetTransform$MH,"LLVMOrcObjectTransformLayerSetTransform");
    }
    public static void LLVMOrcObjectTransformLayerSetTransform ( Addressable ObjTransformLayer,  Addressable TransformFunction,  Addressable Ctx) {
        var mh$ = LLVMOrcObjectTransformLayerSetTransform$MH();
        try {
            mh$.invokeExact(ObjTransformLayer, TransformFunction, Ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateLocalIndirectStubsManager$MH() {
        return RuntimeHelper.requireNonNull(constants$218.LLVMOrcCreateLocalIndirectStubsManager$MH,"LLVMOrcCreateLocalIndirectStubsManager");
    }
    public static MemoryAddress LLVMOrcCreateLocalIndirectStubsManager ( Addressable TargetTriple) {
        var mh$ = LLVMOrcCreateLocalIndirectStubsManager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TargetTriple);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeIndirectStubsManager$MH() {
        return RuntimeHelper.requireNonNull(constants$218.LLVMOrcDisposeIndirectStubsManager$MH,"LLVMOrcDisposeIndirectStubsManager");
    }
    public static void LLVMOrcDisposeIndirectStubsManager ( Addressable ISM) {
        var mh$ = LLVMOrcDisposeIndirectStubsManager$MH();
        try {
            mh$.invokeExact(ISM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateLocalLazyCallThroughManager$MH() {
        return RuntimeHelper.requireNonNull(constants$218.LLVMOrcCreateLocalLazyCallThroughManager$MH,"LLVMOrcCreateLocalLazyCallThroughManager");
    }
    public static MemoryAddress LLVMOrcCreateLocalLazyCallThroughManager ( Addressable TargetTriple,  Addressable ES,  long ErrorHandlerAddr,  Addressable LCTM) {
        var mh$ = LLVMOrcCreateLocalLazyCallThroughManager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TargetTriple, ES, ErrorHandlerAddr, LCTM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeLazyCallThroughManager$MH() {
        return RuntimeHelper.requireNonNull(constants$218.LLVMOrcDisposeLazyCallThroughManager$MH,"LLVMOrcDisposeLazyCallThroughManager");
    }
    public static void LLVMOrcDisposeLazyCallThroughManager ( Addressable LCTM) {
        var mh$ = LLVMOrcDisposeLazyCallThroughManager$MH();
        try {
            mh$.invokeExact(LCTM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateDumpObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$219.LLVMOrcCreateDumpObjects$MH,"LLVMOrcCreateDumpObjects");
    }
    public static MemoryAddress LLVMOrcCreateDumpObjects ( Addressable DumpDir,  Addressable IdentifierOverride) {
        var mh$ = LLVMOrcCreateDumpObjects$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(DumpDir, IdentifierOverride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeDumpObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$219.LLVMOrcDisposeDumpObjects$MH,"LLVMOrcDisposeDumpObjects");
    }
    public static void LLVMOrcDisposeDumpObjects ( Addressable DumpObjects) {
        var mh$ = LLVMOrcDisposeDumpObjects$MH();
        try {
            mh$.invokeExact(DumpObjects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDumpObjects_CallOperator$MH() {
        return RuntimeHelper.requireNonNull(constants$219.LLVMOrcDumpObjects_CallOperator$MH,"LLVMOrcDumpObjects_CallOperator");
    }
    public static MemoryAddress LLVMOrcDumpObjects_CallOperator ( Addressable DumpObjects,  Addressable ObjBuffer) {
        var mh$ = LLVMOrcDumpObjects_CallOperator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(DumpObjects, ObjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMOrcLLJITBuilderRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMOrcLLJITRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMOrcCreateLLJITBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$219.LLVMOrcCreateLLJITBuilder$MH,"LLVMOrcCreateLLJITBuilder");
    }
    public static MemoryAddress LLVMOrcCreateLLJITBuilder () {
        var mh$ = LLVMOrcCreateLLJITBuilder$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeLLJITBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$220.LLVMOrcDisposeLLJITBuilder$MH,"LLVMOrcDisposeLLJITBuilder");
    }
    public static void LLVMOrcDisposeLLJITBuilder ( Addressable Builder) {
        var mh$ = LLVMOrcDisposeLLJITBuilder$MH();
        try {
            mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITBuilderSetJITTargetMachineBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$220.LLVMOrcLLJITBuilderSetJITTargetMachineBuilder$MH,"LLVMOrcLLJITBuilderSetJITTargetMachineBuilder");
    }
    public static void LLVMOrcLLJITBuilderSetJITTargetMachineBuilder ( Addressable Builder,  Addressable JTMB) {
        var mh$ = LLVMOrcLLJITBuilderSetJITTargetMachineBuilder$MH();
        try {
            mh$.invokeExact(Builder, JTMB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator$MH() {
        return RuntimeHelper.requireNonNull(constants$220.LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator$MH,"LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator");
    }
    public static void LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator ( Addressable Builder,  Addressable F,  Addressable Ctx) {
        var mh$ = LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator$MH();
        try {
            mh$.invokeExact(Builder, F, Ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateLLJIT$MH() {
        return RuntimeHelper.requireNonNull(constants$220.LLVMOrcCreateLLJIT$MH,"LLVMOrcCreateLLJIT");
    }
    public static MemoryAddress LLVMOrcCreateLLJIT ( Addressable Result,  Addressable Builder) {
        var mh$ = LLVMOrcCreateLLJIT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Result, Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcDisposeLLJIT$MH() {
        return RuntimeHelper.requireNonNull(constants$220.LLVMOrcDisposeLLJIT$MH,"LLVMOrcDisposeLLJIT");
    }
    public static MemoryAddress LLVMOrcDisposeLLJIT ( Addressable J) {
        var mh$ = LLVMOrcDisposeLLJIT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetExecutionSession$MH() {
        return RuntimeHelper.requireNonNull(constants$220.LLVMOrcLLJITGetExecutionSession$MH,"LLVMOrcLLJITGetExecutionSession");
    }
    public static MemoryAddress LLVMOrcLLJITGetExecutionSession ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetExecutionSession$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetMainJITDylib$MH() {
        return RuntimeHelper.requireNonNull(constants$221.LLVMOrcLLJITGetMainJITDylib$MH,"LLVMOrcLLJITGetMainJITDylib");
    }
    public static MemoryAddress LLVMOrcLLJITGetMainJITDylib ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetMainJITDylib$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetTripleString$MH() {
        return RuntimeHelper.requireNonNull(constants$221.LLVMOrcLLJITGetTripleString$MH,"LLVMOrcLLJITGetTripleString");
    }
    public static MemoryAddress LLVMOrcLLJITGetTripleString ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetTripleString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetGlobalPrefix$MH() {
        return RuntimeHelper.requireNonNull(constants$221.LLVMOrcLLJITGetGlobalPrefix$MH,"LLVMOrcLLJITGetGlobalPrefix");
    }
    public static byte LLVMOrcLLJITGetGlobalPrefix ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetGlobalPrefix$MH();
        try {
            return (byte)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITMangleAndIntern$MH() {
        return RuntimeHelper.requireNonNull(constants$221.LLVMOrcLLJITMangleAndIntern$MH,"LLVMOrcLLJITMangleAndIntern");
    }
    public static MemoryAddress LLVMOrcLLJITMangleAndIntern ( Addressable J,  Addressable UnmangledName) {
        var mh$ = LLVMOrcLLJITMangleAndIntern$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J, UnmangledName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITAddObjectFile$MH() {
        return RuntimeHelper.requireNonNull(constants$221.LLVMOrcLLJITAddObjectFile$MH,"LLVMOrcLLJITAddObjectFile");
    }
    public static MemoryAddress LLVMOrcLLJITAddObjectFile ( Addressable J,  Addressable JD,  Addressable ObjBuffer) {
        var mh$ = LLVMOrcLLJITAddObjectFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J, JD, ObjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITAddObjectFileWithRT$MH() {
        return RuntimeHelper.requireNonNull(constants$221.LLVMOrcLLJITAddObjectFileWithRT$MH,"LLVMOrcLLJITAddObjectFileWithRT");
    }
    public static MemoryAddress LLVMOrcLLJITAddObjectFileWithRT ( Addressable J,  Addressable RT,  Addressable ObjBuffer) {
        var mh$ = LLVMOrcLLJITAddObjectFileWithRT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J, RT, ObjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITAddLLVMIRModule$MH() {
        return RuntimeHelper.requireNonNull(constants$222.LLVMOrcLLJITAddLLVMIRModule$MH,"LLVMOrcLLJITAddLLVMIRModule");
    }
    public static MemoryAddress LLVMOrcLLJITAddLLVMIRModule ( Addressable J,  Addressable JD,  Addressable TSM) {
        var mh$ = LLVMOrcLLJITAddLLVMIRModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J, JD, TSM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITAddLLVMIRModuleWithRT$MH() {
        return RuntimeHelper.requireNonNull(constants$222.LLVMOrcLLJITAddLLVMIRModuleWithRT$MH,"LLVMOrcLLJITAddLLVMIRModuleWithRT");
    }
    public static MemoryAddress LLVMOrcLLJITAddLLVMIRModuleWithRT ( Addressable J,  Addressable JD,  Addressable TSM) {
        var mh$ = LLVMOrcLLJITAddLLVMIRModuleWithRT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J, JD, TSM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITLookup$MH() {
        return RuntimeHelper.requireNonNull(constants$222.LLVMOrcLLJITLookup$MH,"LLVMOrcLLJITLookup");
    }
    public static MemoryAddress LLVMOrcLLJITLookup ( Addressable J,  Addressable Result,  Addressable Name) {
        var mh$ = LLVMOrcLLJITLookup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J, Result, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetObjLinkingLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$222.LLVMOrcLLJITGetObjLinkingLayer$MH,"LLVMOrcLLJITGetObjLinkingLayer");
    }
    public static MemoryAddress LLVMOrcLLJITGetObjLinkingLayer ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetObjLinkingLayer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetObjTransformLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$222.LLVMOrcLLJITGetObjTransformLayer$MH,"LLVMOrcLLJITGetObjTransformLayer");
    }
    public static MemoryAddress LLVMOrcLLJITGetObjTransformLayer ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetObjTransformLayer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetIRTransformLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$222.LLVMOrcLLJITGetIRTransformLayer$MH,"LLVMOrcLLJITGetIRTransformLayer");
    }
    public static MemoryAddress LLVMOrcLLJITGetIRTransformLayer ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetIRTransformLayer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcLLJITGetDataLayoutStr$MH() {
        return RuntimeHelper.requireNonNull(constants$223.LLVMOrcLLJITGetDataLayoutStr$MH,"LLVMOrcLLJITGetDataLayoutStr");
    }
    public static MemoryAddress LLVMOrcLLJITGetDataLayoutStr ( Addressable J) {
        var mh$ = LLVMOrcLLJITGetDataLayoutStr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(J);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__cf__$MH() {
        return RuntimeHelper.requireNonNull(constants$223.mlirGetDialectHandle__cf__$MH,"mlirGetDialectHandle__cf__");
    }
    public static MemorySegment mlirGetDialectHandle__cf__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__cf__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_version$MH() {
        return RuntimeHelper.requireNonNull(constants$223.llvm_blake3_version$MH,"llvm_blake3_version");
    }
    public static MemoryAddress llvm_blake3_version () {
        var mh$ = llvm_blake3_version$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_init$MH() {
        return RuntimeHelper.requireNonNull(constants$223.llvm_blake3_hasher_init$MH,"llvm_blake3_hasher_init");
    }
    public static void llvm_blake3_hasher_init ( Addressable self) {
        var mh$ = llvm_blake3_hasher_init$MH();
        try {
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_init_keyed$MH() {
        return RuntimeHelper.requireNonNull(constants$223.llvm_blake3_hasher_init_keyed$MH,"llvm_blake3_hasher_init_keyed");
    }
    public static void llvm_blake3_hasher_init_keyed ( Addressable self,  Addressable key) {
        var mh$ = llvm_blake3_hasher_init_keyed$MH();
        try {
            mh$.invokeExact(self, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_init_derive_key$MH() {
        return RuntimeHelper.requireNonNull(constants$223.llvm_blake3_hasher_init_derive_key$MH,"llvm_blake3_hasher_init_derive_key");
    }
    public static void llvm_blake3_hasher_init_derive_key ( Addressable self,  Addressable context) {
        var mh$ = llvm_blake3_hasher_init_derive_key$MH();
        try {
            mh$.invokeExact(self, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_init_derive_key_raw$MH() {
        return RuntimeHelper.requireNonNull(constants$224.llvm_blake3_hasher_init_derive_key_raw$MH,"llvm_blake3_hasher_init_derive_key_raw");
    }
    public static void llvm_blake3_hasher_init_derive_key_raw ( Addressable self,  Addressable context,  long context_len) {
        var mh$ = llvm_blake3_hasher_init_derive_key_raw$MH();
        try {
            mh$.invokeExact(self, context, context_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_update$MH() {
        return RuntimeHelper.requireNonNull(constants$224.llvm_blake3_hasher_update$MH,"llvm_blake3_hasher_update");
    }
    public static void llvm_blake3_hasher_update ( Addressable self,  Addressable input,  long input_len) {
        var mh$ = llvm_blake3_hasher_update$MH();
        try {
            mh$.invokeExact(self, input, input_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$224.llvm_blake3_hasher_finalize$MH,"llvm_blake3_hasher_finalize");
    }
    public static void llvm_blake3_hasher_finalize ( Addressable self,  Addressable out,  long out_len) {
        var mh$ = llvm_blake3_hasher_finalize$MH();
        try {
            mh$.invokeExact(self, out, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


