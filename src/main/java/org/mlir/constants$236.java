// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$236 {

    static final FunctionDescriptor mlirRegisterConversionConvertAMDGPUToROCDL$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertAMDGPUToROCDL$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertAMDGPUToROCDL",
        constants$236.mlirRegisterConversionConvertAMDGPUToROCDL$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertAffineForToGPU$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertAffineForToGPU$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertAffineForToGPU",
        constants$236.mlirCreateConversionConvertAffineForToGPU$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertAffineForToGPU$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertAffineForToGPU$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertAffineForToGPU",
        constants$236.mlirRegisterConversionConvertAffineForToGPU$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertAffineToStandard$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertAffineToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertAffineToStandard",
        constants$236.mlirCreateConversionConvertAffineToStandard$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertAffineToStandard$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertAffineToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertAffineToStandard",
        constants$236.mlirRegisterConversionConvertAffineToStandard$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertArithToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertArithToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertArithToSPIRV",
        constants$236.mlirCreateConversionConvertArithToSPIRV$FUNC
    );
}


