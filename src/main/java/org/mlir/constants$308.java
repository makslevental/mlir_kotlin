// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$308 {

    static final FunctionDescriptor LLVMAddTypeBasedAliasAnalysisPass$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddTypeBasedAliasAnalysisPass$MH = RuntimeHelper.downcallHandle(
        "LLVMAddTypeBasedAliasAnalysisPass",
        constants$308.LLVMAddTypeBasedAliasAnalysisPass$FUNC
    );
    static final FunctionDescriptor LLVMAddScopedNoAliasAAPass$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddScopedNoAliasAAPass$MH = RuntimeHelper.downcallHandle(
        "LLVMAddScopedNoAliasAAPass",
        constants$308.LLVMAddScopedNoAliasAAPass$FUNC
    );
    static final FunctionDescriptor LLVMAddBasicAliasAnalysisPass$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddBasicAliasAnalysisPass$MH = RuntimeHelper.downcallHandle(
        "LLVMAddBasicAliasAnalysisPass",
        constants$308.LLVMAddBasicAliasAnalysisPass$FUNC
    );
    static final FunctionDescriptor LLVMAddUnifyFunctionExitNodesPass$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddUnifyFunctionExitNodesPass$MH = RuntimeHelper.downcallHandle(
        "LLVMAddUnifyFunctionExitNodesPass",
        constants$308.LLVMAddUnifyFunctionExitNodesPass$FUNC
    );
    static final FunctionDescriptor LLVMOpInfoCallback$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMOpInfoCallback$MH = RuntimeHelper.downcallHandle(
        constants$308.LLVMOpInfoCallback$FUNC
    );
}


