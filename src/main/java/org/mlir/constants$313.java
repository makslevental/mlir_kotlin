// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$313 {

    static final FunctionDescriptor mlirRegisterTransformsSymbolDCE$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsSymbolDCE$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsSymbolDCE",
        constants$313.mlirRegisterTransformsSymbolDCE$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsSymbolPrivatize$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsSymbolPrivatize$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsSymbolPrivatize",
        constants$313.mlirCreateTransformsSymbolPrivatize$FUNC
    );
    static final FunctionDescriptor mlirRegisterTransformsSymbolPrivatize$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsSymbolPrivatize$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsSymbolPrivatize",
        constants$313.mlirRegisterTransformsSymbolPrivatize$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsTopologicalSort$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsTopologicalSort$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsTopologicalSort",
        constants$313.mlirCreateTransformsTopologicalSort$FUNC
    );
    static final FunctionDescriptor mlirRegisterTransformsTopologicalSort$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsTopologicalSort$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsTopologicalSort",
        constants$313.mlirRegisterTransformsTopologicalSort$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsViewOpGraph$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsViewOpGraph$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsViewOpGraph",
        constants$313.mlirCreateTransformsViewOpGraph$FUNC
    );
}


