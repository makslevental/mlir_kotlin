// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class Bindings_2 extends Bindings_1 {

    public static MethodHandle llvm_blake3_hasher_finalize_seek$MH() {
        return RuntimeHelper.requireNonNull(constants$224.llvm_blake3_hasher_finalize_seek$MH,"llvm_blake3_hasher_finalize_seek");
    }
    public static void llvm_blake3_hasher_finalize_seek ( Addressable self,  long seek,  Addressable out,  long out_len) {
        var mh$ = llvm_blake3_hasher_finalize_seek$MH();
        try {
            mh$.invokeExact(self, seek, out, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llvm_blake3_hasher_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$224.llvm_blake3_hasher_reset$MH,"llvm_blake3_hasher_reset");
    }
    public static void llvm_blake3_hasher_reset ( Addressable self) {
        var mh$ = llvm_blake3_hasher_reset$MH();
        try {
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__async__$MH() {
        return RuntimeHelper.requireNonNull(constants$224.mlirGetDialectHandle__async__$MH,"mlirGetDialectHandle__async__");
    }
    public static MemorySegment mlirGetDialectHandle__async__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__async__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$225.mlirPassManagerCreate$MH,"mlirPassManagerCreate");
    }
    public static MemorySegment mlirPassManagerCreate ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirPassManagerCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerCreateOnOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$225.mlirPassManagerCreateOnOperation$MH,"mlirPassManagerCreateOnOperation");
    }
    public static MemorySegment mlirPassManagerCreateOnOperation ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment anchorOp) {
        var mh$ = mlirPassManagerCreateOnOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, anchorOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$225.mlirPassManagerDestroy$MH,"mlirPassManagerDestroy");
    }
    public static void mlirPassManagerDestroy ( MemorySegment passManager) {
        var mh$ = mlirPassManagerDestroy$MH();
        try {
            mh$.invokeExact(passManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$225.mlirPassManagerIsNull$MH,"mlirPassManagerIsNull");
    }
    public static boolean mlirPassManagerIsNull ( MemorySegment passManager) {
        var mh$ = mlirPassManagerIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(passManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerGetAsOpPassManager$MH() {
        return RuntimeHelper.requireNonNull(constants$225.mlirPassManagerGetAsOpPassManager$MH,"mlirPassManagerGetAsOpPassManager");
    }
    public static MemorySegment mlirPassManagerGetAsOpPassManager ( SegmentAllocator allocator,  MemorySegment passManager) {
        var mh$ = mlirPassManagerGetAsOpPassManager$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerRun$MH() {
        return RuntimeHelper.requireNonNull(constants$225.mlirPassManagerRun$MH,"mlirPassManagerRun");
    }
    public static MemorySegment mlirPassManagerRun ( SegmentAllocator allocator,  MemorySegment passManager,  MemorySegment module) {
        var mh$ = mlirPassManagerRun$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passManager, module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerEnableIRPrinting$MH() {
        return RuntimeHelper.requireNonNull(constants$226.mlirPassManagerEnableIRPrinting$MH,"mlirPassManagerEnableIRPrinting");
    }
    public static void mlirPassManagerEnableIRPrinting ( MemorySegment passManager) {
        var mh$ = mlirPassManagerEnableIRPrinting$MH();
        try {
            mh$.invokeExact(passManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerEnableVerifier$MH() {
        return RuntimeHelper.requireNonNull(constants$226.mlirPassManagerEnableVerifier$MH,"mlirPassManagerEnableVerifier");
    }
    public static void mlirPassManagerEnableVerifier ( MemorySegment passManager,  boolean enable) {
        var mh$ = mlirPassManagerEnableVerifier$MH();
        try {
            mh$.invokeExact(passManager, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerGetNestedUnder$MH() {
        return RuntimeHelper.requireNonNull(constants$226.mlirPassManagerGetNestedUnder$MH,"mlirPassManagerGetNestedUnder");
    }
    public static MemorySegment mlirPassManagerGetNestedUnder ( SegmentAllocator allocator,  MemorySegment passManager,  MemorySegment operationName) {
        var mh$ = mlirPassManagerGetNestedUnder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passManager, operationName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPassManagerGetNestedUnder$MH() {
        return RuntimeHelper.requireNonNull(constants$226.mlirOpPassManagerGetNestedUnder$MH,"mlirOpPassManagerGetNestedUnder");
    }
    public static MemorySegment mlirOpPassManagerGetNestedUnder ( SegmentAllocator allocator,  MemorySegment passManager,  MemorySegment operationName) {
        var mh$ = mlirOpPassManagerGetNestedUnder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passManager, operationName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPassManagerAddOwnedPass$MH() {
        return RuntimeHelper.requireNonNull(constants$226.mlirPassManagerAddOwnedPass$MH,"mlirPassManagerAddOwnedPass");
    }
    public static void mlirPassManagerAddOwnedPass ( MemorySegment passManager,  MemorySegment pass) {
        var mh$ = mlirPassManagerAddOwnedPass$MH();
        try {
            mh$.invokeExact(passManager, pass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPassManagerAddOwnedPass$MH() {
        return RuntimeHelper.requireNonNull(constants$226.mlirOpPassManagerAddOwnedPass$MH,"mlirOpPassManagerAddOwnedPass");
    }
    public static void mlirOpPassManagerAddOwnedPass ( MemorySegment passManager,  MemorySegment pass) {
        var mh$ = mlirOpPassManagerAddOwnedPass$MH();
        try {
            mh$.invokeExact(passManager, pass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPassManagerAddPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$227.mlirOpPassManagerAddPipeline$MH,"mlirOpPassManagerAddPipeline");
    }
    public static MemorySegment mlirOpPassManagerAddPipeline ( SegmentAllocator allocator,  MemorySegment passManager,  MemorySegment pipelineElements,  Addressable callback,  Addressable userData) {
        var mh$ = mlirOpPassManagerAddPipeline$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passManager, pipelineElements, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPrintPassPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$227.mlirPrintPassPipeline$MH,"mlirPrintPassPipeline");
    }
    public static void mlirPrintPassPipeline ( MemorySegment passManager,  Addressable callback,  Addressable userData) {
        var mh$ = mlirPrintPassPipeline$MH();
        try {
            mh$.invokeExact(passManager, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirParsePassPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$227.mlirParsePassPipeline$MH,"mlirParsePassPipeline");
    }
    public static MemorySegment mlirParsePassPipeline ( SegmentAllocator allocator,  MemorySegment passManager,  MemorySegment pipeline,  Addressable callback,  Addressable userData) {
        var mh$ = mlirParsePassPipeline$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passManager, pipeline, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateExternalPass$MH() {
        return RuntimeHelper.requireNonNull(constants$227.mlirCreateExternalPass$MH,"mlirCreateExternalPass");
    }
    public static MemorySegment mlirCreateExternalPass ( SegmentAllocator allocator,  MemorySegment passID,  MemorySegment name,  MemorySegment argument,  MemorySegment description,  MemorySegment opName,  long nDependentDialects,  Addressable dependentDialects,  MemorySegment callbacks,  Addressable userData) {
        var mh$ = mlirCreateExternalPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, passID, name, argument, description, opName, nDependentDialects, dependentDialects, callbacks, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExternalPassSignalFailure$MH() {
        return RuntimeHelper.requireNonNull(constants$227.mlirExternalPassSignalFailure$MH,"mlirExternalPassSignalFailure");
    }
    public static void mlirExternalPassSignalFailure ( MemorySegment pass) {
        var mh$ = mlirExternalPassSignalFailure$MH();
        try {
            mh$.invokeExact(pass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$227.mlirRegisterAsyncPasses$MH,"mlirRegisterAsyncPasses");
    }
    public static void mlirRegisterAsyncPasses () {
        var mh$ = mlirRegisterAsyncPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateAsyncAsyncFuncToAsyncRuntime$MH() {
        return RuntimeHelper.requireNonNull(constants$228.mlirCreateAsyncAsyncFuncToAsyncRuntime$MH,"mlirCreateAsyncAsyncFuncToAsyncRuntime");
    }
    public static MemorySegment mlirCreateAsyncAsyncFuncToAsyncRuntime ( SegmentAllocator allocator) {
        var mh$ = mlirCreateAsyncAsyncFuncToAsyncRuntime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncAsyncFuncToAsyncRuntime$MH() {
        return RuntimeHelper.requireNonNull(constants$228.mlirRegisterAsyncAsyncFuncToAsyncRuntime$MH,"mlirRegisterAsyncAsyncFuncToAsyncRuntime");
    }
    public static void mlirRegisterAsyncAsyncFuncToAsyncRuntime () {
        var mh$ = mlirRegisterAsyncAsyncFuncToAsyncRuntime$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateAsyncAsyncParallelFor$MH() {
        return RuntimeHelper.requireNonNull(constants$228.mlirCreateAsyncAsyncParallelFor$MH,"mlirCreateAsyncAsyncParallelFor");
    }
    public static MemorySegment mlirCreateAsyncAsyncParallelFor ( SegmentAllocator allocator) {
        var mh$ = mlirCreateAsyncAsyncParallelFor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncAsyncParallelFor$MH() {
        return RuntimeHelper.requireNonNull(constants$228.mlirRegisterAsyncAsyncParallelFor$MH,"mlirRegisterAsyncAsyncParallelFor");
    }
    public static void mlirRegisterAsyncAsyncParallelFor () {
        var mh$ = mlirRegisterAsyncAsyncParallelFor$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting$MH() {
        return RuntimeHelper.requireNonNull(constants$228.mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting$MH,"mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting");
    }
    public static MemorySegment mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting ( SegmentAllocator allocator) {
        var mh$ = mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting$MH() {
        return RuntimeHelper.requireNonNull(constants$228.mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting$MH,"mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting");
    }
    public static void mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting () {
        var mh$ = mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateAsyncAsyncRuntimeRefCounting$MH() {
        return RuntimeHelper.requireNonNull(constants$229.mlirCreateAsyncAsyncRuntimeRefCounting$MH,"mlirCreateAsyncAsyncRuntimeRefCounting");
    }
    public static MemorySegment mlirCreateAsyncAsyncRuntimeRefCounting ( SegmentAllocator allocator) {
        var mh$ = mlirCreateAsyncAsyncRuntimeRefCounting$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncAsyncRuntimeRefCounting$MH() {
        return RuntimeHelper.requireNonNull(constants$229.mlirRegisterAsyncAsyncRuntimeRefCounting$MH,"mlirRegisterAsyncAsyncRuntimeRefCounting");
    }
    public static void mlirRegisterAsyncAsyncRuntimeRefCounting () {
        var mh$ = mlirRegisterAsyncAsyncRuntimeRefCounting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateAsyncAsyncRuntimeRefCountingOpt$MH() {
        return RuntimeHelper.requireNonNull(constants$229.mlirCreateAsyncAsyncRuntimeRefCountingOpt$MH,"mlirCreateAsyncAsyncRuntimeRefCountingOpt");
    }
    public static MemorySegment mlirCreateAsyncAsyncRuntimeRefCountingOpt ( SegmentAllocator allocator) {
        var mh$ = mlirCreateAsyncAsyncRuntimeRefCountingOpt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncAsyncRuntimeRefCountingOpt$MH() {
        return RuntimeHelper.requireNonNull(constants$229.mlirRegisterAsyncAsyncRuntimeRefCountingOpt$MH,"mlirRegisterAsyncAsyncRuntimeRefCountingOpt");
    }
    public static void mlirRegisterAsyncAsyncRuntimeRefCountingOpt () {
        var mh$ = mlirRegisterAsyncAsyncRuntimeRefCountingOpt$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateAsyncAsyncToAsyncRuntime$MH() {
        return RuntimeHelper.requireNonNull(constants$229.mlirCreateAsyncAsyncToAsyncRuntime$MH,"mlirCreateAsyncAsyncToAsyncRuntime");
    }
    public static MemorySegment mlirCreateAsyncAsyncToAsyncRuntime ( SegmentAllocator allocator) {
        var mh$ = mlirCreateAsyncAsyncToAsyncRuntime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAsyncAsyncToAsyncRuntime$MH() {
        return RuntimeHelper.requireNonNull(constants$229.mlirRegisterAsyncAsyncToAsyncRuntime$MH,"mlirRegisterAsyncAsyncToAsyncRuntime");
    }
    public static void mlirRegisterAsyncAsyncToAsyncRuntime () {
        var mh$ = mlirRegisterAsyncAsyncToAsyncRuntime$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLinalgFillBuiltinNamedOpRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$230.mlirLinalgFillBuiltinNamedOpRegion$MH,"mlirLinalgFillBuiltinNamedOpRegion");
    }
    public static void mlirLinalgFillBuiltinNamedOpRegion ( MemorySegment mlirOp) {
        var mh$ = mlirLinalgFillBuiltinNamedOpRegion$MH();
        try {
            mh$.invokeExact(mlirOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__linalg__$MH() {
        return RuntimeHelper.requireNonNull(constants$230.mlirGetDialectHandle__linalg__$MH,"mlirGetDialectHandle__linalg__");
    }
    public static MemorySegment mlirGetDialectHandle__linalg__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__linalg__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$230.mlirRegisterLinalgPasses$MH,"mlirRegisterLinalgPasses");
    }
    public static void mlirRegisterLinalgPasses () {
        var mh$ = mlirRegisterLinalgPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgConvertElementwiseToLinalg$MH() {
        return RuntimeHelper.requireNonNull(constants$230.mlirCreateLinalgConvertElementwiseToLinalg$MH,"mlirCreateLinalgConvertElementwiseToLinalg");
    }
    public static MemorySegment mlirCreateLinalgConvertElementwiseToLinalg ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgConvertElementwiseToLinalg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgConvertElementwiseToLinalg$MH() {
        return RuntimeHelper.requireNonNull(constants$230.mlirRegisterLinalgConvertElementwiseToLinalg$MH,"mlirRegisterLinalgConvertElementwiseToLinalg");
    }
    public static void mlirRegisterLinalgConvertElementwiseToLinalg () {
        var mh$ = mlirRegisterLinalgConvertElementwiseToLinalg$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgBufferize$MH() {
        return RuntimeHelper.requireNonNull(constants$230.mlirCreateLinalgLinalgBufferize$MH,"mlirCreateLinalgLinalgBufferize");
    }
    public static MemorySegment mlirCreateLinalgLinalgBufferize ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgBufferize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgBufferize$MH() {
        return RuntimeHelper.requireNonNull(constants$231.mlirRegisterLinalgLinalgBufferize$MH,"mlirRegisterLinalgLinalgBufferize");
    }
    public static void mlirRegisterLinalgLinalgBufferize () {
        var mh$ = mlirRegisterLinalgLinalgBufferize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgDetensorize$MH() {
        return RuntimeHelper.requireNonNull(constants$231.mlirCreateLinalgLinalgDetensorize$MH,"mlirCreateLinalgLinalgDetensorize");
    }
    public static MemorySegment mlirCreateLinalgLinalgDetensorize ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgDetensorize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgDetensorize$MH() {
        return RuntimeHelper.requireNonNull(constants$231.mlirRegisterLinalgLinalgDetensorize$MH,"mlirRegisterLinalgLinalgDetensorize");
    }
    public static void mlirRegisterLinalgLinalgDetensorize () {
        var mh$ = mlirRegisterLinalgLinalgDetensorize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgElementwiseOpFusion$MH() {
        return RuntimeHelper.requireNonNull(constants$231.mlirCreateLinalgLinalgElementwiseOpFusion$MH,"mlirCreateLinalgLinalgElementwiseOpFusion");
    }
    public static MemorySegment mlirCreateLinalgLinalgElementwiseOpFusion ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgElementwiseOpFusion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgElementwiseOpFusion$MH() {
        return RuntimeHelper.requireNonNull(constants$231.mlirRegisterLinalgLinalgElementwiseOpFusion$MH,"mlirRegisterLinalgLinalgElementwiseOpFusion");
    }
    public static void mlirRegisterLinalgLinalgElementwiseOpFusion () {
        var mh$ = mlirRegisterLinalgLinalgElementwiseOpFusion$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgFoldUnitExtentDims$MH() {
        return RuntimeHelper.requireNonNull(constants$231.mlirCreateLinalgLinalgFoldUnitExtentDims$MH,"mlirCreateLinalgLinalgFoldUnitExtentDims");
    }
    public static MemorySegment mlirCreateLinalgLinalgFoldUnitExtentDims ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgFoldUnitExtentDims$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgFoldUnitExtentDims$MH() {
        return RuntimeHelper.requireNonNull(constants$232.mlirRegisterLinalgLinalgFoldUnitExtentDims$MH,"mlirRegisterLinalgLinalgFoldUnitExtentDims");
    }
    public static void mlirRegisterLinalgLinalgFoldUnitExtentDims () {
        var mh$ = mlirRegisterLinalgLinalgFoldUnitExtentDims$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgGeneralization$MH() {
        return RuntimeHelper.requireNonNull(constants$232.mlirCreateLinalgLinalgGeneralization$MH,"mlirCreateLinalgLinalgGeneralization");
    }
    public static MemorySegment mlirCreateLinalgLinalgGeneralization ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgGeneralization$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgGeneralization$MH() {
        return RuntimeHelper.requireNonNull(constants$232.mlirRegisterLinalgLinalgGeneralization$MH,"mlirRegisterLinalgLinalgGeneralization");
    }
    public static void mlirRegisterLinalgLinalgGeneralization () {
        var mh$ = mlirRegisterLinalgLinalgGeneralization$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgInlineScalarOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$232.mlirCreateLinalgLinalgInlineScalarOperands$MH,"mlirCreateLinalgLinalgInlineScalarOperands");
    }
    public static MemorySegment mlirCreateLinalgLinalgInlineScalarOperands ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgInlineScalarOperands$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgInlineScalarOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$232.mlirRegisterLinalgLinalgInlineScalarOperands$MH,"mlirRegisterLinalgLinalgInlineScalarOperands");
    }
    public static void mlirRegisterLinalgLinalgInlineScalarOperands () {
        var mh$ = mlirRegisterLinalgLinalgInlineScalarOperands$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgLowerToAffineLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$232.mlirCreateLinalgLinalgLowerToAffineLoops$MH,"mlirCreateLinalgLinalgLowerToAffineLoops");
    }
    public static MemorySegment mlirCreateLinalgLinalgLowerToAffineLoops ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgLowerToAffineLoops$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgLowerToAffineLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$233.mlirRegisterLinalgLinalgLowerToAffineLoops$MH,"mlirRegisterLinalgLinalgLowerToAffineLoops");
    }
    public static void mlirRegisterLinalgLinalgLowerToAffineLoops () {
        var mh$ = mlirRegisterLinalgLinalgLowerToAffineLoops$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgLowerToLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$233.mlirCreateLinalgLinalgLowerToLoops$MH,"mlirCreateLinalgLinalgLowerToLoops");
    }
    public static MemorySegment mlirCreateLinalgLinalgLowerToLoops ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgLowerToLoops$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgLowerToLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$233.mlirRegisterLinalgLinalgLowerToLoops$MH,"mlirRegisterLinalgLinalgLowerToLoops");
    }
    public static void mlirRegisterLinalgLinalgLowerToLoops () {
        var mh$ = mlirRegisterLinalgLinalgLowerToLoops$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgLowerToParallelLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$233.mlirCreateLinalgLinalgLowerToParallelLoops$MH,"mlirCreateLinalgLinalgLowerToParallelLoops");
    }
    public static MemorySegment mlirCreateLinalgLinalgLowerToParallelLoops ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgLowerToParallelLoops$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgLowerToParallelLoops$MH() {
        return RuntimeHelper.requireNonNull(constants$233.mlirRegisterLinalgLinalgLowerToParallelLoops$MH,"mlirRegisterLinalgLinalgLowerToParallelLoops");
    }
    public static void mlirRegisterLinalgLinalgLowerToParallelLoops () {
        var mh$ = mlirRegisterLinalgLinalgLowerToParallelLoops$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateLinalgLinalgNamedOpConversion$MH() {
        return RuntimeHelper.requireNonNull(constants$233.mlirCreateLinalgLinalgNamedOpConversion$MH,"mlirCreateLinalgLinalgNamedOpConversion");
    }
    public static MemorySegment mlirCreateLinalgLinalgNamedOpConversion ( SegmentAllocator allocator) {
        var mh$ = mlirCreateLinalgLinalgNamedOpConversion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterLinalgLinalgNamedOpConversion$MH() {
        return RuntimeHelper.requireNonNull(constants$234.mlirRegisterLinalgLinalgNamedOpConversion$MH,"mlirRegisterLinalgLinalgNamedOpConversion");
    }
    public static void mlirRegisterLinalgLinalgNamedOpConversion () {
        var mh$ = mlirRegisterLinalgLinalgNamedOpConversion$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLowerSwitchPass$MH() {
        return RuntimeHelper.requireNonNull(constants$234.LLVMAddLowerSwitchPass$MH,"LLVMAddLowerSwitchPass");
    }
    public static void LLVMAddLowerSwitchPass ( Addressable PM) {
        var mh$ = LLVMAddLowerSwitchPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddPromoteMemoryToRegisterPass$MH() {
        return RuntimeHelper.requireNonNull(constants$234.LLVMAddPromoteMemoryToRegisterPass$MH,"LLVMAddPromoteMemoryToRegisterPass");
    }
    public static void LLVMAddPromoteMemoryToRegisterPass ( Addressable PM) {
        var mh$ = LLVMAddPromoteMemoryToRegisterPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAddDiscriminatorsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$234.LLVMAddAddDiscriminatorsPass$MH,"LLVMAddAddDiscriminatorsPass");
    }
    public static void LLVMAddAddDiscriminatorsPass ( Addressable PM) {
        var mh$ = LLVMAddAddDiscriminatorsPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMAbortProcessAction() {
        return (int)0L;
    }
    public static int LLVMPrintMessageAction() {
        return (int)1L;
    }
    public static int LLVMReturnStatusAction() {
        return (int)2L;
    }
    public static MethodHandle LLVMVerifyModule$MH() {
        return RuntimeHelper.requireNonNull(constants$234.LLVMVerifyModule$MH,"LLVMVerifyModule");
    }
    public static int LLVMVerifyModule ( Addressable M,  int Action,  Addressable OutMessage) {
        var mh$ = LLVMVerifyModule$MH();
        try {
            return (int)mh$.invokeExact(M, Action, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMVerifyFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$234.LLVMVerifyFunction$MH,"LLVMVerifyFunction");
    }
    public static int LLVMVerifyFunction ( Addressable Fn,  int Action) {
        var mh$ = LLVMVerifyFunction$MH();
        try {
            return (int)mh$.invokeExact(Fn, Action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMViewFunctionCFG$MH() {
        return RuntimeHelper.requireNonNull(constants$235.LLVMViewFunctionCFG$MH,"LLVMViewFunctionCFG");
    }
    public static void LLVMViewFunctionCFG ( Addressable Fn) {
        var mh$ = LLVMViewFunctionCFG$MH();
        try {
            mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMViewFunctionCFGOnly$MH() {
        return RuntimeHelper.requireNonNull(constants$235.LLVMViewFunctionCFGOnly$MH,"LLVMViewFunctionCFGOnly");
    }
    public static void LLVMViewFunctionCFGOnly ( Addressable Fn) {
        var mh$ = LLVMViewFunctionCFGOnly$MH();
        try {
            mh$.invokeExact(Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$235.mlirRegisterConversionPasses$MH,"mlirRegisterConversionPasses");
    }
    public static void mlirRegisterConversionPasses () {
        var mh$ = mlirRegisterConversionPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionArithToLLVMConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$235.mlirCreateConversionArithToLLVMConversionPass$MH,"mlirCreateConversionArithToLLVMConversionPass");
    }
    public static MemorySegment mlirCreateConversionArithToLLVMConversionPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionArithToLLVMConversionPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionArithToLLVMConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$235.mlirRegisterConversionArithToLLVMConversionPass$MH,"mlirRegisterConversionArithToLLVMConversionPass");
    }
    public static void mlirRegisterConversionArithToLLVMConversionPass () {
        var mh$ = mlirRegisterConversionArithToLLVMConversionPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertAMDGPUToROCDL$MH() {
        return RuntimeHelper.requireNonNull(constants$235.mlirCreateConversionConvertAMDGPUToROCDL$MH,"mlirCreateConversionConvertAMDGPUToROCDL");
    }
    public static MemorySegment mlirCreateConversionConvertAMDGPUToROCDL ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertAMDGPUToROCDL$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertAMDGPUToROCDL$MH() {
        return RuntimeHelper.requireNonNull(constants$236.mlirRegisterConversionConvertAMDGPUToROCDL$MH,"mlirRegisterConversionConvertAMDGPUToROCDL");
    }
    public static void mlirRegisterConversionConvertAMDGPUToROCDL () {
        var mh$ = mlirRegisterConversionConvertAMDGPUToROCDL$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertAffineForToGPU$MH() {
        return RuntimeHelper.requireNonNull(constants$236.mlirCreateConversionConvertAffineForToGPU$MH,"mlirCreateConversionConvertAffineForToGPU");
    }
    public static MemorySegment mlirCreateConversionConvertAffineForToGPU ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertAffineForToGPU$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertAffineForToGPU$MH() {
        return RuntimeHelper.requireNonNull(constants$236.mlirRegisterConversionConvertAffineForToGPU$MH,"mlirRegisterConversionConvertAffineForToGPU");
    }
    public static void mlirRegisterConversionConvertAffineForToGPU () {
        var mh$ = mlirRegisterConversionConvertAffineForToGPU$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertAffineToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$236.mlirCreateConversionConvertAffineToStandard$MH,"mlirCreateConversionConvertAffineToStandard");
    }
    public static MemorySegment mlirCreateConversionConvertAffineToStandard ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertAffineToStandard$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertAffineToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$236.mlirRegisterConversionConvertAffineToStandard$MH,"mlirRegisterConversionConvertAffineToStandard");
    }
    public static void mlirRegisterConversionConvertAffineToStandard () {
        var mh$ = mlirRegisterConversionConvertAffineToStandard$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertArithToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$236.mlirCreateConversionConvertArithToSPIRV$MH,"mlirCreateConversionConvertArithToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertArithToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertArithToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertArithToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$237.mlirRegisterConversionConvertArithToSPIRV$MH,"mlirRegisterConversionConvertArithToSPIRV");
    }
    public static void mlirRegisterConversionConvertArithToSPIRV () {
        var mh$ = mlirRegisterConversionConvertArithToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertArmNeon2dToIntr$MH() {
        return RuntimeHelper.requireNonNull(constants$237.mlirCreateConversionConvertArmNeon2dToIntr$MH,"mlirCreateConversionConvertArmNeon2dToIntr");
    }
    public static MemorySegment mlirCreateConversionConvertArmNeon2dToIntr ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertArmNeon2dToIntr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertArmNeon2dToIntr$MH() {
        return RuntimeHelper.requireNonNull(constants$237.mlirRegisterConversionConvertArmNeon2dToIntr$MH,"mlirRegisterConversionConvertArmNeon2dToIntr");
    }
    public static void mlirRegisterConversionConvertArmNeon2dToIntr () {
        var mh$ = mlirRegisterConversionConvertArmNeon2dToIntr$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertAsyncToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$237.mlirCreateConversionConvertAsyncToLLVMPass$MH,"mlirCreateConversionConvertAsyncToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertAsyncToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertAsyncToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertAsyncToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$237.mlirRegisterConversionConvertAsyncToLLVMPass$MH,"mlirRegisterConversionConvertAsyncToLLVMPass");
    }
    public static void mlirRegisterConversionConvertAsyncToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertAsyncToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertBufferizationToMemRef$MH() {
        return RuntimeHelper.requireNonNull(constants$237.mlirCreateConversionConvertBufferizationToMemRef$MH,"mlirCreateConversionConvertBufferizationToMemRef");
    }
    public static MemorySegment mlirCreateConversionConvertBufferizationToMemRef ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertBufferizationToMemRef$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertBufferizationToMemRef$MH() {
        return RuntimeHelper.requireNonNull(constants$238.mlirRegisterConversionConvertBufferizationToMemRef$MH,"mlirRegisterConversionConvertBufferizationToMemRef");
    }
    public static void mlirRegisterConversionConvertBufferizationToMemRef () {
        var mh$ = mlirRegisterConversionConvertBufferizationToMemRef$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertComplexToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$238.mlirCreateConversionConvertComplexToLLVMPass$MH,"mlirCreateConversionConvertComplexToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertComplexToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertComplexToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertComplexToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$238.mlirRegisterConversionConvertComplexToLLVMPass$MH,"mlirRegisterConversionConvertComplexToLLVMPass");
    }
    public static void mlirRegisterConversionConvertComplexToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertComplexToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertComplexToLibm$MH() {
        return RuntimeHelper.requireNonNull(constants$238.mlirCreateConversionConvertComplexToLibm$MH,"mlirCreateConversionConvertComplexToLibm");
    }
    public static MemorySegment mlirCreateConversionConvertComplexToLibm ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertComplexToLibm$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertComplexToLibm$MH() {
        return RuntimeHelper.requireNonNull(constants$238.mlirRegisterConversionConvertComplexToLibm$MH,"mlirRegisterConversionConvertComplexToLibm");
    }
    public static void mlirRegisterConversionConvertComplexToLibm () {
        var mh$ = mlirRegisterConversionConvertComplexToLibm$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertComplexToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$238.mlirCreateConversionConvertComplexToStandard$MH,"mlirCreateConversionConvertComplexToStandard");
    }
    public static MemorySegment mlirCreateConversionConvertComplexToStandard ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertComplexToStandard$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertComplexToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$239.mlirRegisterConversionConvertComplexToStandard$MH,"mlirRegisterConversionConvertComplexToStandard");
    }
    public static void mlirRegisterConversionConvertComplexToStandard () {
        var mh$ = mlirRegisterConversionConvertComplexToStandard$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertControlFlowToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$239.mlirCreateConversionConvertControlFlowToLLVMPass$MH,"mlirCreateConversionConvertControlFlowToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertControlFlowToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertControlFlowToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertControlFlowToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$239.mlirRegisterConversionConvertControlFlowToLLVMPass$MH,"mlirRegisterConversionConvertControlFlowToLLVMPass");
    }
    public static void mlirRegisterConversionConvertControlFlowToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertControlFlowToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertControlFlowToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$239.mlirCreateConversionConvertControlFlowToSPIRV$MH,"mlirCreateConversionConvertControlFlowToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertControlFlowToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertControlFlowToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertControlFlowToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$239.mlirRegisterConversionConvertControlFlowToSPIRV$MH,"mlirRegisterConversionConvertControlFlowToSPIRV");
    }
    public static void mlirRegisterConversionConvertControlFlowToSPIRV () {
        var mh$ = mlirRegisterConversionConvertControlFlowToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertFuncToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$239.mlirCreateConversionConvertFuncToLLVMPass$MH,"mlirCreateConversionConvertFuncToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertFuncToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertFuncToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertFuncToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$240.mlirRegisterConversionConvertFuncToLLVMPass$MH,"mlirRegisterConversionConvertFuncToLLVMPass");
    }
    public static void mlirRegisterConversionConvertFuncToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertFuncToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertFuncToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$240.mlirCreateConversionConvertFuncToSPIRV$MH,"mlirCreateConversionConvertFuncToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertFuncToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertFuncToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertFuncToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$240.mlirRegisterConversionConvertFuncToSPIRV$MH,"mlirRegisterConversionConvertFuncToSPIRV");
    }
    public static void mlirRegisterConversionConvertFuncToSPIRV () {
        var mh$ = mlirRegisterConversionConvertFuncToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertGPUToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$240.mlirCreateConversionConvertGPUToSPIRV$MH,"mlirCreateConversionConvertGPUToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertGPUToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertGPUToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertGPUToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$240.mlirRegisterConversionConvertGPUToSPIRV$MH,"mlirRegisterConversionConvertGPUToSPIRV");
    }
    public static void mlirRegisterConversionConvertGPUToSPIRV () {
        var mh$ = mlirRegisterConversionConvertGPUToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$240.mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH,"mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc");
    }
    public static MemorySegment mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$241.mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH,"mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc");
    }
    public static void mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc () {
        var mh$ = mlirRegisterConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertGpuOpsToNVVMOps$MH() {
        return RuntimeHelper.requireNonNull(constants$241.mlirCreateConversionConvertGpuOpsToNVVMOps$MH,"mlirCreateConversionConvertGpuOpsToNVVMOps");
    }
    public static MemorySegment mlirCreateConversionConvertGpuOpsToNVVMOps ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertGpuOpsToNVVMOps$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertGpuOpsToNVVMOps$MH() {
        return RuntimeHelper.requireNonNull(constants$241.mlirRegisterConversionConvertGpuOpsToNVVMOps$MH,"mlirRegisterConversionConvertGpuOpsToNVVMOps");
    }
    public static void mlirRegisterConversionConvertGpuOpsToNVVMOps () {
        var mh$ = mlirRegisterConversionConvertGpuOpsToNVVMOps$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertGpuOpsToROCDLOps$MH() {
        return RuntimeHelper.requireNonNull(constants$241.mlirCreateConversionConvertGpuOpsToROCDLOps$MH,"mlirCreateConversionConvertGpuOpsToROCDLOps");
    }
    public static MemorySegment mlirCreateConversionConvertGpuOpsToROCDLOps ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertGpuOpsToROCDLOps$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertGpuOpsToROCDLOps$MH() {
        return RuntimeHelper.requireNonNull(constants$241.mlirRegisterConversionConvertGpuOpsToROCDLOps$MH,"mlirRegisterConversionConvertGpuOpsToROCDLOps");
    }
    public static void mlirRegisterConversionConvertGpuOpsToROCDLOps () {
        var mh$ = mlirRegisterConversionConvertGpuOpsToROCDLOps$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertIndexToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$241.mlirCreateConversionConvertIndexToLLVMPass$MH,"mlirCreateConversionConvertIndexToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertIndexToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertIndexToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertIndexToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$242.mlirRegisterConversionConvertIndexToLLVMPass$MH,"mlirRegisterConversionConvertIndexToLLVMPass");
    }
    public static void mlirRegisterConversionConvertIndexToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertIndexToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertLinalgToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$242.mlirCreateConversionConvertLinalgToLLVMPass$MH,"mlirCreateConversionConvertLinalgToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertLinalgToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertLinalgToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertLinalgToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$242.mlirRegisterConversionConvertLinalgToLLVMPass$MH,"mlirRegisterConversionConvertLinalgToLLVMPass");
    }
    public static void mlirRegisterConversionConvertLinalgToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertLinalgToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertLinalgToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$242.mlirCreateConversionConvertLinalgToStandard$MH,"mlirCreateConversionConvertLinalgToStandard");
    }
    public static MemorySegment mlirCreateConversionConvertLinalgToStandard ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertLinalgToStandard$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertLinalgToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$242.mlirRegisterConversionConvertLinalgToStandard$MH,"mlirRegisterConversionConvertLinalgToStandard");
    }
    public static void mlirRegisterConversionConvertLinalgToStandard () {
        var mh$ = mlirRegisterConversionConvertLinalgToStandard$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertMathToFuncs$MH() {
        return RuntimeHelper.requireNonNull(constants$242.mlirCreateConversionConvertMathToFuncs$MH,"mlirCreateConversionConvertMathToFuncs");
    }
    public static MemorySegment mlirCreateConversionConvertMathToFuncs ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertMathToFuncs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertMathToFuncs$MH() {
        return RuntimeHelper.requireNonNull(constants$243.mlirRegisterConversionConvertMathToFuncs$MH,"mlirRegisterConversionConvertMathToFuncs");
    }
    public static void mlirRegisterConversionConvertMathToFuncs () {
        var mh$ = mlirRegisterConversionConvertMathToFuncs$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertMathToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$243.mlirCreateConversionConvertMathToLLVMPass$MH,"mlirCreateConversionConvertMathToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertMathToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertMathToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertMathToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$243.mlirRegisterConversionConvertMathToLLVMPass$MH,"mlirRegisterConversionConvertMathToLLVMPass");
    }
    public static void mlirRegisterConversionConvertMathToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertMathToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertMathToLibm$MH() {
        return RuntimeHelper.requireNonNull(constants$243.mlirCreateConversionConvertMathToLibm$MH,"mlirCreateConversionConvertMathToLibm");
    }
    public static MemorySegment mlirCreateConversionConvertMathToLibm ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertMathToLibm$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertMathToLibm$MH() {
        return RuntimeHelper.requireNonNull(constants$243.mlirRegisterConversionConvertMathToLibm$MH,"mlirRegisterConversionConvertMathToLibm");
    }
    public static void mlirRegisterConversionConvertMathToLibm () {
        var mh$ = mlirRegisterConversionConvertMathToLibm$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertMathToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$243.mlirCreateConversionConvertMathToSPIRV$MH,"mlirCreateConversionConvertMathToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertMathToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertMathToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertMathToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$244.mlirRegisterConversionConvertMathToSPIRV$MH,"mlirRegisterConversionConvertMathToSPIRV");
    }
    public static void mlirRegisterConversionConvertMathToSPIRV () {
        var mh$ = mlirRegisterConversionConvertMathToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertMemRefToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$244.mlirCreateConversionConvertMemRefToSPIRV$MH,"mlirCreateConversionConvertMemRefToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertMemRefToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertMemRefToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertMemRefToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$244.mlirRegisterConversionConvertMemRefToSPIRV$MH,"mlirRegisterConversionConvertMemRefToSPIRV");
    }
    public static void mlirRegisterConversionConvertMemRefToSPIRV () {
        var mh$ = mlirRegisterConversionConvertMemRefToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertNVGPUToNVVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$244.mlirCreateConversionConvertNVGPUToNVVMPass$MH,"mlirCreateConversionConvertNVGPUToNVVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertNVGPUToNVVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertNVGPUToNVVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertNVGPUToNVVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$244.mlirRegisterConversionConvertNVGPUToNVVMPass$MH,"mlirRegisterConversionConvertNVGPUToNVVMPass");
    }
    public static void mlirRegisterConversionConvertNVGPUToNVVMPass () {
        var mh$ = mlirRegisterConversionConvertNVGPUToNVVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertOpenACCToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$244.mlirCreateConversionConvertOpenACCToLLVMPass$MH,"mlirCreateConversionConvertOpenACCToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertOpenACCToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertOpenACCToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertOpenACCToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$245.mlirRegisterConversionConvertOpenACCToLLVMPass$MH,"mlirRegisterConversionConvertOpenACCToLLVMPass");
    }
    public static void mlirRegisterConversionConvertOpenACCToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertOpenACCToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertOpenACCToSCF$MH() {
        return RuntimeHelper.requireNonNull(constants$245.mlirCreateConversionConvertOpenACCToSCF$MH,"mlirCreateConversionConvertOpenACCToSCF");
    }
    public static MemorySegment mlirCreateConversionConvertOpenACCToSCF ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertOpenACCToSCF$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertOpenACCToSCF$MH() {
        return RuntimeHelper.requireNonNull(constants$245.mlirRegisterConversionConvertOpenACCToSCF$MH,"mlirRegisterConversionConvertOpenACCToSCF");
    }
    public static void mlirRegisterConversionConvertOpenACCToSCF () {
        var mh$ = mlirRegisterConversionConvertOpenACCToSCF$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertOpenMPToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$245.mlirCreateConversionConvertOpenMPToLLVMPass$MH,"mlirCreateConversionConvertOpenMPToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertOpenMPToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertOpenMPToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertOpenMPToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$245.mlirRegisterConversionConvertOpenMPToLLVMPass$MH,"mlirRegisterConversionConvertOpenMPToLLVMPass");
    }
    public static void mlirRegisterConversionConvertOpenMPToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertOpenMPToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertPDLToPDLInterp$MH() {
        return RuntimeHelper.requireNonNull(constants$245.mlirCreateConversionConvertPDLToPDLInterp$MH,"mlirCreateConversionConvertPDLToPDLInterp");
    }
    public static MemorySegment mlirCreateConversionConvertPDLToPDLInterp ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertPDLToPDLInterp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertPDLToPDLInterp$MH() {
        return RuntimeHelper.requireNonNull(constants$246.mlirRegisterConversionConvertPDLToPDLInterp$MH,"mlirRegisterConversionConvertPDLToPDLInterp");
    }
    public static void mlirRegisterConversionConvertPDLToPDLInterp () {
        var mh$ = mlirRegisterConversionConvertPDLToPDLInterp$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertParallelLoopToGpu$MH() {
        return RuntimeHelper.requireNonNull(constants$246.mlirCreateConversionConvertParallelLoopToGpu$MH,"mlirCreateConversionConvertParallelLoopToGpu");
    }
    public static MemorySegment mlirCreateConversionConvertParallelLoopToGpu ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertParallelLoopToGpu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertParallelLoopToGpu$MH() {
        return RuntimeHelper.requireNonNull(constants$246.mlirRegisterConversionConvertParallelLoopToGpu$MH,"mlirRegisterConversionConvertParallelLoopToGpu");
    }
    public static void mlirRegisterConversionConvertParallelLoopToGpu () {
        var mh$ = mlirRegisterConversionConvertParallelLoopToGpu$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertSCFToOpenMPPass$MH() {
        return RuntimeHelper.requireNonNull(constants$246.mlirCreateConversionConvertSCFToOpenMPPass$MH,"mlirCreateConversionConvertSCFToOpenMPPass");
    }
    public static MemorySegment mlirCreateConversionConvertSCFToOpenMPPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertSCFToOpenMPPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertSCFToOpenMPPass$MH() {
        return RuntimeHelper.requireNonNull(constants$246.mlirRegisterConversionConvertSCFToOpenMPPass$MH,"mlirRegisterConversionConvertSCFToOpenMPPass");
    }
    public static void mlirRegisterConversionConvertSCFToOpenMPPass () {
        var mh$ = mlirRegisterConversionConvertSCFToOpenMPPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertSPIRVToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$246.mlirCreateConversionConvertSPIRVToLLVMPass$MH,"mlirCreateConversionConvertSPIRVToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertSPIRVToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertSPIRVToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertSPIRVToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$247.mlirRegisterConversionConvertSPIRVToLLVMPass$MH,"mlirRegisterConversionConvertSPIRVToLLVMPass");
    }
    public static void mlirRegisterConversionConvertSPIRVToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertSPIRVToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertShapeConstraints$MH() {
        return RuntimeHelper.requireNonNull(constants$247.mlirCreateConversionConvertShapeConstraints$MH,"mlirCreateConversionConvertShapeConstraints");
    }
    public static MemorySegment mlirCreateConversionConvertShapeConstraints ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertShapeConstraints$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertShapeConstraints$MH() {
        return RuntimeHelper.requireNonNull(constants$247.mlirRegisterConversionConvertShapeConstraints$MH,"mlirRegisterConversionConvertShapeConstraints");
    }
    public static void mlirRegisterConversionConvertShapeConstraints () {
        var mh$ = mlirRegisterConversionConvertShapeConstraints$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertShapeToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$247.mlirCreateConversionConvertShapeToStandard$MH,"mlirCreateConversionConvertShapeToStandard");
    }
    public static MemorySegment mlirCreateConversionConvertShapeToStandard ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertShapeToStandard$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertShapeToStandard$MH() {
        return RuntimeHelper.requireNonNull(constants$247.mlirRegisterConversionConvertShapeToStandard$MH,"mlirRegisterConversionConvertShapeToStandard");
    }
    public static void mlirRegisterConversionConvertShapeToStandard () {
        var mh$ = mlirRegisterConversionConvertShapeToStandard$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertTensorToLinalg$MH() {
        return RuntimeHelper.requireNonNull(constants$247.mlirCreateConversionConvertTensorToLinalg$MH,"mlirCreateConversionConvertTensorToLinalg");
    }
    public static MemorySegment mlirCreateConversionConvertTensorToLinalg ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertTensorToLinalg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertTensorToLinalg$MH() {
        return RuntimeHelper.requireNonNull(constants$248.mlirRegisterConversionConvertTensorToLinalg$MH,"mlirRegisterConversionConvertTensorToLinalg");
    }
    public static void mlirRegisterConversionConvertTensorToLinalg () {
        var mh$ = mlirRegisterConversionConvertTensorToLinalg$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertTensorToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$248.mlirCreateConversionConvertTensorToSPIRV$MH,"mlirCreateConversionConvertTensorToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertTensorToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertTensorToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertTensorToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$248.mlirRegisterConversionConvertTensorToSPIRV$MH,"mlirRegisterConversionConvertTensorToSPIRV");
    }
    public static void mlirRegisterConversionConvertTensorToSPIRV () {
        var mh$ = mlirRegisterConversionConvertTensorToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertVectorToGPU$MH() {
        return RuntimeHelper.requireNonNull(constants$248.mlirCreateConversionConvertVectorToGPU$MH,"mlirCreateConversionConvertVectorToGPU");
    }
    public static MemorySegment mlirCreateConversionConvertVectorToGPU ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertVectorToGPU$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertVectorToGPU$MH() {
        return RuntimeHelper.requireNonNull(constants$248.mlirRegisterConversionConvertVectorToGPU$MH,"mlirRegisterConversionConvertVectorToGPU");
    }
    public static void mlirRegisterConversionConvertVectorToGPU () {
        var mh$ = mlirRegisterConversionConvertVectorToGPU$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertVectorToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$248.mlirCreateConversionConvertVectorToLLVMPass$MH,"mlirCreateConversionConvertVectorToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionConvertVectorToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertVectorToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertVectorToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$249.mlirRegisterConversionConvertVectorToLLVMPass$MH,"mlirRegisterConversionConvertVectorToLLVMPass");
    }
    public static void mlirRegisterConversionConvertVectorToLLVMPass () {
        var mh$ = mlirRegisterConversionConvertVectorToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertVectorToSCF$MH() {
        return RuntimeHelper.requireNonNull(constants$249.mlirCreateConversionConvertVectorToSCF$MH,"mlirCreateConversionConvertVectorToSCF");
    }
    public static MemorySegment mlirCreateConversionConvertVectorToSCF ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertVectorToSCF$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertVectorToSCF$MH() {
        return RuntimeHelper.requireNonNull(constants$249.mlirRegisterConversionConvertVectorToSCF$MH,"mlirRegisterConversionConvertVectorToSCF");
    }
    public static void mlirRegisterConversionConvertVectorToSCF () {
        var mh$ = mlirRegisterConversionConvertVectorToSCF$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertVectorToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$249.mlirCreateConversionConvertVectorToSPIRV$MH,"mlirCreateConversionConvertVectorToSPIRV");
    }
    public static MemorySegment mlirCreateConversionConvertVectorToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertVectorToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertVectorToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$249.mlirRegisterConversionConvertVectorToSPIRV$MH,"mlirRegisterConversionConvertVectorToSPIRV");
    }
    public static void mlirRegisterConversionConvertVectorToSPIRV () {
        var mh$ = mlirRegisterConversionConvertVectorToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$249.mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH,"mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass");
    }
    public static MemorySegment mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$250.mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH,"mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCallsPass");
    }
    public static void mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCallsPass () {
        var mh$ = mlirRegisterConversionConvertVulkanLaunchFuncToVulkanCallsPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionFinalizeMemRefToLLVMConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$250.mlirCreateConversionFinalizeMemRefToLLVMConversionPass$MH,"mlirCreateConversionFinalizeMemRefToLLVMConversionPass");
    }
    public static MemorySegment mlirCreateConversionFinalizeMemRefToLLVMConversionPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionFinalizeMemRefToLLVMConversionPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionFinalizeMemRefToLLVMConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$250.mlirRegisterConversionFinalizeMemRefToLLVMConversionPass$MH,"mlirRegisterConversionFinalizeMemRefToLLVMConversionPass");
    }
    public static void mlirRegisterConversionFinalizeMemRefToLLVMConversionPass () {
        var mh$ = mlirRegisterConversionFinalizeMemRefToLLVMConversionPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionGpuToLLVMConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$250.mlirCreateConversionGpuToLLVMConversionPass$MH,"mlirCreateConversionGpuToLLVMConversionPass");
    }
    public static MemorySegment mlirCreateConversionGpuToLLVMConversionPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionGpuToLLVMConversionPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionGpuToLLVMConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$250.mlirRegisterConversionGpuToLLVMConversionPass$MH,"mlirRegisterConversionGpuToLLVMConversionPass");
    }
    public static void mlirRegisterConversionGpuToLLVMConversionPass () {
        var mh$ = mlirRegisterConversionGpuToLLVMConversionPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionLowerHostCodeToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$250.mlirCreateConversionLowerHostCodeToLLVMPass$MH,"mlirCreateConversionLowerHostCodeToLLVMPass");
    }
    public static MemorySegment mlirCreateConversionLowerHostCodeToLLVMPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionLowerHostCodeToLLVMPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionLowerHostCodeToLLVMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$251.mlirRegisterConversionLowerHostCodeToLLVMPass$MH,"mlirRegisterConversionLowerHostCodeToLLVMPass");
    }
    public static void mlirRegisterConversionLowerHostCodeToLLVMPass () {
        var mh$ = mlirRegisterConversionLowerHostCodeToLLVMPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionMapMemRefStorageClass$MH() {
        return RuntimeHelper.requireNonNull(constants$251.mlirCreateConversionMapMemRefStorageClass$MH,"mlirCreateConversionMapMemRefStorageClass");
    }
    public static MemorySegment mlirCreateConversionMapMemRefStorageClass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionMapMemRefStorageClass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionMapMemRefStorageClass$MH() {
        return RuntimeHelper.requireNonNull(constants$251.mlirRegisterConversionMapMemRefStorageClass$MH,"mlirRegisterConversionMapMemRefStorageClass");
    }
    public static void mlirRegisterConversionMapMemRefStorageClass () {
        var mh$ = mlirRegisterConversionMapMemRefStorageClass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionReconcileUnrealizedCasts$MH() {
        return RuntimeHelper.requireNonNull(constants$251.mlirCreateConversionReconcileUnrealizedCasts$MH,"mlirCreateConversionReconcileUnrealizedCasts");
    }
    public static MemorySegment mlirCreateConversionReconcileUnrealizedCasts ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionReconcileUnrealizedCasts$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionReconcileUnrealizedCasts$MH() {
        return RuntimeHelper.requireNonNull(constants$251.mlirRegisterConversionReconcileUnrealizedCasts$MH,"mlirRegisterConversionReconcileUnrealizedCasts");
    }
    public static void mlirRegisterConversionReconcileUnrealizedCasts () {
        var mh$ = mlirRegisterConversionReconcileUnrealizedCasts$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionSCFToControlFlow$MH() {
        return RuntimeHelper.requireNonNull(constants$251.mlirCreateConversionSCFToControlFlow$MH,"mlirCreateConversionSCFToControlFlow");
    }
    public static MemorySegment mlirCreateConversionSCFToControlFlow ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionSCFToControlFlow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionSCFToControlFlow$MH() {
        return RuntimeHelper.requireNonNull(constants$252.mlirRegisterConversionSCFToControlFlow$MH,"mlirRegisterConversionSCFToControlFlow");
    }
    public static void mlirRegisterConversionSCFToControlFlow () {
        var mh$ = mlirRegisterConversionSCFToControlFlow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionSCFToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$252.mlirCreateConversionSCFToSPIRV$MH,"mlirCreateConversionSCFToSPIRV");
    }
    public static MemorySegment mlirCreateConversionSCFToSPIRV ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionSCFToSPIRV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionSCFToSPIRV$MH() {
        return RuntimeHelper.requireNonNull(constants$252.mlirRegisterConversionSCFToSPIRV$MH,"mlirRegisterConversionSCFToSPIRV");
    }
    public static void mlirRegisterConversionSCFToSPIRV () {
        var mh$ = mlirRegisterConversionSCFToSPIRV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionTosaToArith$MH() {
        return RuntimeHelper.requireNonNull(constants$252.mlirCreateConversionTosaToArith$MH,"mlirCreateConversionTosaToArith");
    }
    public static MemorySegment mlirCreateConversionTosaToArith ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionTosaToArith$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionTosaToArith$MH() {
        return RuntimeHelper.requireNonNull(constants$252.mlirRegisterConversionTosaToArith$MH,"mlirRegisterConversionTosaToArith");
    }
    public static void mlirRegisterConversionTosaToArith () {
        var mh$ = mlirRegisterConversionTosaToArith$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionTosaToLinalg$MH() {
        return RuntimeHelper.requireNonNull(constants$252.mlirCreateConversionTosaToLinalg$MH,"mlirCreateConversionTosaToLinalg");
    }
    public static MemorySegment mlirCreateConversionTosaToLinalg ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionTosaToLinalg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionTosaToLinalg$MH() {
        return RuntimeHelper.requireNonNull(constants$253.mlirRegisterConversionTosaToLinalg$MH,"mlirRegisterConversionTosaToLinalg");
    }
    public static void mlirRegisterConversionTosaToLinalg () {
        var mh$ = mlirRegisterConversionTosaToLinalg$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionTosaToLinalgNamed$MH() {
        return RuntimeHelper.requireNonNull(constants$253.mlirCreateConversionTosaToLinalgNamed$MH,"mlirCreateConversionTosaToLinalgNamed");
    }
    public static MemorySegment mlirCreateConversionTosaToLinalgNamed ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionTosaToLinalgNamed$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionTosaToLinalgNamed$MH() {
        return RuntimeHelper.requireNonNull(constants$253.mlirRegisterConversionTosaToLinalgNamed$MH,"mlirRegisterConversionTosaToLinalgNamed");
    }
    public static void mlirRegisterConversionTosaToLinalgNamed () {
        var mh$ = mlirRegisterConversionTosaToLinalgNamed$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionTosaToSCF$MH() {
        return RuntimeHelper.requireNonNull(constants$253.mlirCreateConversionTosaToSCF$MH,"mlirCreateConversionTosaToSCF");
    }
    public static MemorySegment mlirCreateConversionTosaToSCF ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionTosaToSCF$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionTosaToSCF$MH() {
        return RuntimeHelper.requireNonNull(constants$253.mlirRegisterConversionTosaToSCF$MH,"mlirRegisterConversionTosaToSCF");
    }
    public static void mlirRegisterConversionTosaToSCF () {
        var mh$ = mlirRegisterConversionTosaToSCF$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateConversionTosaToTensor$MH() {
        return RuntimeHelper.requireNonNull(constants$253.mlirCreateConversionTosaToTensor$MH,"mlirCreateConversionTosaToTensor");
    }
    public static MemorySegment mlirCreateConversionTosaToTensor ( SegmentAllocator allocator) {
        var mh$ = mlirCreateConversionTosaToTensor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterConversionTosaToTensor$MH() {
        return RuntimeHelper.requireNonNull(constants$254.mlirRegisterConversionTosaToTensor$MH,"mlirRegisterConversionTosaToTensor");
    }
    public static void mlirRegisterConversionTosaToTensor () {
        var mh$ = mlirRegisterConversionTosaToTensor$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMLinkerDestroySource() {
        return (int)0L;
    }
    public static int LLVMLinkerPreserveSource_Removed() {
        return (int)1L;
    }
    public static MethodHandle LLVMLinkModules2$MH() {
        return RuntimeHelper.requireNonNull(constants$254.LLVMLinkModules2$MH,"LLVMLinkModules2");
    }
    public static int LLVMLinkModules2 ( Addressable Dest,  Addressable Src) {
        var mh$ = LLVMLinkModules2$MH();
        try {
            return (int)mh$.invokeExact(Dest, Src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMLinkInMCJIT$MH() {
        return RuntimeHelper.requireNonNull(constants$254.LLVMLinkInMCJIT$MH,"LLVMLinkInMCJIT");
    }
    public static void LLVMLinkInMCJIT () {
        var mh$ = LLVMLinkInMCJIT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMLinkInInterpreter$MH() {
        return RuntimeHelper.requireNonNull(constants$254.LLVMLinkInInterpreter$MH,"LLVMLinkInInterpreter");
    }
    public static void LLVMLinkInInterpreter () {
        var mh$ = LLVMLinkInInterpreter$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMGenericValueRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMExecutionEngineRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMMCJITMemoryManagerRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMCreateGenericValueOfInt$MH() {
        return RuntimeHelper.requireNonNull(constants$254.LLVMCreateGenericValueOfInt$MH,"LLVMCreateGenericValueOfInt");
    }
    public static MemoryAddress LLVMCreateGenericValueOfInt ( Addressable Ty,  long N,  int IsSigned) {
        var mh$ = LLVMCreateGenericValueOfInt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty, N, IsSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateGenericValueOfPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$254.LLVMCreateGenericValueOfPointer$MH,"LLVMCreateGenericValueOfPointer");
    }
    public static MemoryAddress LLVMCreateGenericValueOfPointer ( Addressable P) {
        var mh$ = LLVMCreateGenericValueOfPointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(P);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateGenericValueOfFloat$MH() {
        return RuntimeHelper.requireNonNull(constants$255.LLVMCreateGenericValueOfFloat$MH,"LLVMCreateGenericValueOfFloat");
    }
    public static MemoryAddress LLVMCreateGenericValueOfFloat ( Addressable Ty,  double N) {
        var mh$ = LLVMCreateGenericValueOfFloat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ty, N);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGenericValueIntWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$255.LLVMGenericValueIntWidth$MH,"LLVMGenericValueIntWidth");
    }
    public static int LLVMGenericValueIntWidth ( Addressable GenValRef) {
        var mh$ = LLVMGenericValueIntWidth$MH();
        try {
            return (int)mh$.invokeExact(GenValRef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGenericValueToInt$MH() {
        return RuntimeHelper.requireNonNull(constants$255.LLVMGenericValueToInt$MH,"LLVMGenericValueToInt");
    }
    public static long LLVMGenericValueToInt ( Addressable GenVal,  int IsSigned) {
        var mh$ = LLVMGenericValueToInt$MH();
        try {
            return (long)mh$.invokeExact(GenVal, IsSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGenericValueToPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$255.LLVMGenericValueToPointer$MH,"LLVMGenericValueToPointer");
    }
    public static MemoryAddress LLVMGenericValueToPointer ( Addressable GenVal) {
        var mh$ = LLVMGenericValueToPointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GenVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGenericValueToFloat$MH() {
        return RuntimeHelper.requireNonNull(constants$255.LLVMGenericValueToFloat$MH,"LLVMGenericValueToFloat");
    }
    public static double LLVMGenericValueToFloat ( Addressable TyRef,  Addressable GenVal) {
        var mh$ = LLVMGenericValueToFloat$MH();
        try {
            return (double)mh$.invokeExact(TyRef, GenVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeGenericValue$MH() {
        return RuntimeHelper.requireNonNull(constants$255.LLVMDisposeGenericValue$MH,"LLVMDisposeGenericValue");
    }
    public static void LLVMDisposeGenericValue ( Addressable GenVal) {
        var mh$ = LLVMDisposeGenericValue$MH();
        try {
            mh$.invokeExact(GenVal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateExecutionEngineForModule$MH() {
        return RuntimeHelper.requireNonNull(constants$256.LLVMCreateExecutionEngineForModule$MH,"LLVMCreateExecutionEngineForModule");
    }
    public static int LLVMCreateExecutionEngineForModule ( Addressable OutEE,  Addressable M,  Addressable OutError) {
        var mh$ = LLVMCreateExecutionEngineForModule$MH();
        try {
            return (int)mh$.invokeExact(OutEE, M, OutError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateInterpreterForModule$MH() {
        return RuntimeHelper.requireNonNull(constants$256.LLVMCreateInterpreterForModule$MH,"LLVMCreateInterpreterForModule");
    }
    public static int LLVMCreateInterpreterForModule ( Addressable OutInterp,  Addressable M,  Addressable OutError) {
        var mh$ = LLVMCreateInterpreterForModule$MH();
        try {
            return (int)mh$.invokeExact(OutInterp, M, OutError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateJITCompilerForModule$MH() {
        return RuntimeHelper.requireNonNull(constants$256.LLVMCreateJITCompilerForModule$MH,"LLVMCreateJITCompilerForModule");
    }
    public static int LLVMCreateJITCompilerForModule ( Addressable OutJIT,  Addressable M,  int OptLevel,  Addressable OutError) {
        var mh$ = LLVMCreateJITCompilerForModule$MH();
        try {
            return (int)mh$.invokeExact(OutJIT, M, OptLevel, OutError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeMCJITCompilerOptions$MH() {
        return RuntimeHelper.requireNonNull(constants$256.LLVMInitializeMCJITCompilerOptions$MH,"LLVMInitializeMCJITCompilerOptions");
    }
    public static void LLVMInitializeMCJITCompilerOptions ( Addressable Options,  long SizeOfOptions) {
        var mh$ = LLVMInitializeMCJITCompilerOptions$MH();
        try {
            mh$.invokeExact(Options, SizeOfOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateMCJITCompilerForModule$MH() {
        return RuntimeHelper.requireNonNull(constants$256.LLVMCreateMCJITCompilerForModule$MH,"LLVMCreateMCJITCompilerForModule");
    }
    public static int LLVMCreateMCJITCompilerForModule ( Addressable OutJIT,  Addressable M,  Addressable Options,  long SizeOfOptions,  Addressable OutError) {
        var mh$ = LLVMCreateMCJITCompilerForModule$MH();
        try {
            return (int)mh$.invokeExact(OutJIT, M, Options, SizeOfOptions, OutError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeExecutionEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$256.LLVMDisposeExecutionEngine$MH,"LLVMDisposeExecutionEngine");
    }
    public static void LLVMDisposeExecutionEngine ( Addressable EE) {
        var mh$ = LLVMDisposeExecutionEngine$MH();
        try {
            mh$.invokeExact(EE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRunStaticConstructors$MH() {
        return RuntimeHelper.requireNonNull(constants$257.LLVMRunStaticConstructors$MH,"LLVMRunStaticConstructors");
    }
    public static void LLVMRunStaticConstructors ( Addressable EE) {
        var mh$ = LLVMRunStaticConstructors$MH();
        try {
            mh$.invokeExact(EE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRunStaticDestructors$MH() {
        return RuntimeHelper.requireNonNull(constants$257.LLVMRunStaticDestructors$MH,"LLVMRunStaticDestructors");
    }
    public static void LLVMRunStaticDestructors ( Addressable EE) {
        var mh$ = LLVMRunStaticDestructors$MH();
        try {
            mh$.invokeExact(EE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRunFunctionAsMain$MH() {
        return RuntimeHelper.requireNonNull(constants$257.LLVMRunFunctionAsMain$MH,"LLVMRunFunctionAsMain");
    }
    public static int LLVMRunFunctionAsMain ( Addressable EE,  Addressable F,  int ArgC,  Addressable ArgV,  Addressable EnvP) {
        var mh$ = LLVMRunFunctionAsMain$MH();
        try {
            return (int)mh$.invokeExact(EE, F, ArgC, ArgV, EnvP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRunFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$257.LLVMRunFunction$MH,"LLVMRunFunction");
    }
    public static MemoryAddress LLVMRunFunction ( Addressable EE,  Addressable F,  int NumArgs,  Addressable Args) {
        var mh$ = LLVMRunFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(EE, F, NumArgs, Args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFreeMachineCodeForFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$257.LLVMFreeMachineCodeForFunction$MH,"LLVMFreeMachineCodeForFunction");
    }
    public static void LLVMFreeMachineCodeForFunction ( Addressable EE,  Addressable F) {
        var mh$ = LLVMFreeMachineCodeForFunction$MH();
        try {
            mh$.invokeExact(EE, F);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddModule$MH() {
        return RuntimeHelper.requireNonNull(constants$257.LLVMAddModule$MH,"LLVMAddModule");
    }
    public static void LLVMAddModule ( Addressable EE,  Addressable M) {
        var mh$ = LLVMAddModule$MH();
        try {
            mh$.invokeExact(EE, M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemoveModule$MH() {
        return RuntimeHelper.requireNonNull(constants$258.LLVMRemoveModule$MH,"LLVMRemoveModule");
    }
    public static int LLVMRemoveModule ( Addressable EE,  Addressable M,  Addressable OutMod,  Addressable OutError) {
        var mh$ = LLVMRemoveModule$MH();
        try {
            return (int)mh$.invokeExact(EE, M, OutMod, OutError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMFindFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$258.LLVMFindFunction$MH,"LLVMFindFunction");
    }
    public static int LLVMFindFunction ( Addressable EE,  Addressable Name,  Addressable OutFn) {
        var mh$ = LLVMFindFunction$MH();
        try {
            return (int)mh$.invokeExact(EE, Name, OutFn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRecompileAndRelinkFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$258.LLVMRecompileAndRelinkFunction$MH,"LLVMRecompileAndRelinkFunction");
    }
    public static MemoryAddress LLVMRecompileAndRelinkFunction ( Addressable EE,  Addressable Fn) {
        var mh$ = LLVMRecompileAndRelinkFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(EE, Fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetExecutionEngineTargetData$MH() {
        return RuntimeHelper.requireNonNull(constants$258.LLVMGetExecutionEngineTargetData$MH,"LLVMGetExecutionEngineTargetData");
    }
    public static MemoryAddress LLVMGetExecutionEngineTargetData ( Addressable EE) {
        var mh$ = LLVMGetExecutionEngineTargetData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(EE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetExecutionEngineTargetMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$258.LLVMGetExecutionEngineTargetMachine$MH,"LLVMGetExecutionEngineTargetMachine");
    }
    public static MemoryAddress LLVMGetExecutionEngineTargetMachine ( Addressable EE) {
        var mh$ = LLVMGetExecutionEngineTargetMachine$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(EE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddGlobalMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$258.LLVMAddGlobalMapping$MH,"LLVMAddGlobalMapping");
    }
    public static void LLVMAddGlobalMapping ( Addressable EE,  Addressable Global,  Addressable Addr) {
        var mh$ = LLVMAddGlobalMapping$MH();
        try {
            mh$.invokeExact(EE, Global, Addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetPointerToGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$259.LLVMGetPointerToGlobal$MH,"LLVMGetPointerToGlobal");
    }
    public static MemoryAddress LLVMGetPointerToGlobal ( Addressable EE,  Addressable Global) {
        var mh$ = LLVMGetPointerToGlobal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(EE, Global);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetGlobalValueAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$259.LLVMGetGlobalValueAddress$MH,"LLVMGetGlobalValueAddress");
    }
    public static long LLVMGetGlobalValueAddress ( Addressable EE,  Addressable Name) {
        var mh$ = LLVMGetGlobalValueAddress$MH();
        try {
            return (long)mh$.invokeExact(EE, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$259.LLVMGetFunctionAddress$MH,"LLVMGetFunctionAddress");
    }
    public static long LLVMGetFunctionAddress ( Addressable EE,  Addressable Name) {
        var mh$ = LLVMGetFunctionAddress$MH();
        try {
            return (long)mh$.invokeExact(EE, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMExecutionEngineGetErrMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$259.LLVMExecutionEngineGetErrMsg$MH,"LLVMExecutionEngineGetErrMsg");
    }
    public static int LLVMExecutionEngineGetErrMsg ( Addressable EE,  Addressable OutError) {
        var mh$ = LLVMExecutionEngineGetErrMsg$MH();
        try {
            return (int)mh$.invokeExact(EE, OutError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateSimpleMCJITMemoryManager$MH() {
        return RuntimeHelper.requireNonNull(constants$261.LLVMCreateSimpleMCJITMemoryManager$MH,"LLVMCreateSimpleMCJITMemoryManager");
    }
    public static MemoryAddress LLVMCreateSimpleMCJITMemoryManager ( Addressable Opaque,  Addressable AllocateCodeSection,  Addressable AllocateDataSection,  Addressable FinalizeMemory,  Addressable Destroy) {
        var mh$ = LLVMCreateSimpleMCJITMemoryManager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Opaque, AllocateCodeSection, AllocateDataSection, FinalizeMemory, Destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeMCJITMemoryManager$MH() {
        return RuntimeHelper.requireNonNull(constants$261.LLVMDisposeMCJITMemoryManager$MH,"LLVMDisposeMCJITMemoryManager");
    }
    public static void LLVMDisposeMCJITMemoryManager ( Addressable MM) {
        var mh$ = LLVMDisposeMCJITMemoryManager$MH();
        try {
            mh$.invokeExact(MM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateGDBRegistrationListener$MH() {
        return RuntimeHelper.requireNonNull(constants$261.LLVMCreateGDBRegistrationListener$MH,"LLVMCreateGDBRegistrationListener");
    }
    public static MemoryAddress LLVMCreateGDBRegistrationListener () {
        var mh$ = LLVMCreateGDBRegistrationListener$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateIntelJITEventListener$MH() {
        return RuntimeHelper.requireNonNull(constants$261.LLVMCreateIntelJITEventListener$MH,"LLVMCreateIntelJITEventListener");
    }
    public static MemoryAddress LLVMCreateIntelJITEventListener () {
        var mh$ = LLVMCreateIntelJITEventListener$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateOProfileJITEventListener$MH() {
        return RuntimeHelper.requireNonNull(constants$261.LLVMCreateOProfileJITEventListener$MH,"LLVMCreateOProfileJITEventListener");
    }
    public static MemoryAddress LLVMCreateOProfileJITEventListener () {
        var mh$ = LLVMCreateOProfileJITEventListener$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreatePerfJITEventListener$MH() {
        return RuntimeHelper.requireNonNull(constants$261.LLVMCreatePerfJITEventListener$MH,"LLVMCreatePerfJITEventListener");
    }
    public static MemoryAddress LLVMCreatePerfJITEventListener () {
        var mh$ = LLVMCreatePerfJITEventListener$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager$MH() {
        return RuntimeHelper.requireNonNull(constants$262.LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager$MH,"LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager");
    }
    public static MemoryAddress LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager ( Addressable ES) {
        var mh$ = LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$262.LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks$MH,"LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks");
    }
    public static MemoryAddress LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks ( Addressable ES,  Addressable CreateContextCtx,  Addressable CreateContext,  Addressable NotifyTerminating,  Addressable AllocateCodeSection,  Addressable AllocateDataSection,  Addressable FinalizeMemory,  Addressable Destroy) {
        var mh$ = LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ES, CreateContextCtx, CreateContext, NotifyTerminating, AllocateCodeSection, AllocateDataSection, FinalizeMemory, Destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener$MH() {
        return RuntimeHelper.requireNonNull(constants$263.LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener$MH,"LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener");
    }
    public static void LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener ( Addressable RTDyldObjLinkingLayer,  Addressable Listener) {
        var mh$ = LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener$MH();
        try {
            mh$.invokeExact(RTDyldObjLinkingLayer, Listener);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirEnableGlobalDebug$MH() {
        return RuntimeHelper.requireNonNull(constants$263.mlirEnableGlobalDebug$MH,"mlirEnableGlobalDebug");
    }
    public static void mlirEnableGlobalDebug ( boolean enable) {
        var mh$ = mlirEnableGlobalDebug$MH();
        try {
            mh$.invokeExact(enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIsGlobalDebugEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$263.mlirIsGlobalDebugEnabled$MH,"mlirIsGlobalDebugEnabled");
    }
    public static boolean mlirIsGlobalDebugEnabled (Object... x0) {
        var mh$ = mlirIsGlobalDebugEnabled$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__ml_program__$MH() {
        return RuntimeHelper.requireNonNull(constants$263.mlirGetDialectHandle__ml_program__$MH,"mlirGetDialectHandle__ml_program__");
    }
    public static MemorySegment mlirGetDialectHandle__ml_program__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__ml_program__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__gpu__$MH() {
        return RuntimeHelper.requireNonNull(constants$263.mlirGetDialectHandle__gpu__$MH,"mlirGetDialectHandle__gpu__");
    }
    public static MemorySegment mlirGetDialectHandle__gpu__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__gpu__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterGPUPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$263.mlirRegisterGPUPasses$MH,"mlirRegisterGPUPasses");
    }
    public static void mlirRegisterGPUPasses () {
        var mh$ = mlirRegisterGPUPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateGPUGpuAsyncRegionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$264.mlirCreateGPUGpuAsyncRegionPass$MH,"mlirCreateGPUGpuAsyncRegionPass");
    }
    public static MemorySegment mlirCreateGPUGpuAsyncRegionPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateGPUGpuAsyncRegionPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterGPUGpuAsyncRegionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$264.mlirRegisterGPUGpuAsyncRegionPass$MH,"mlirRegisterGPUGpuAsyncRegionPass");
    }
    public static void mlirRegisterGPUGpuAsyncRegionPass () {
        var mh$ = mlirRegisterGPUGpuAsyncRegionPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateGPUGpuKernelOutlining$MH() {
        return RuntimeHelper.requireNonNull(constants$264.mlirCreateGPUGpuKernelOutlining$MH,"mlirCreateGPUGpuKernelOutlining");
    }
    public static MemorySegment mlirCreateGPUGpuKernelOutlining ( SegmentAllocator allocator) {
        var mh$ = mlirCreateGPUGpuKernelOutlining$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterGPUGpuKernelOutlining$MH() {
        return RuntimeHelper.requireNonNull(constants$264.mlirRegisterGPUGpuKernelOutlining$MH,"mlirRegisterGPUGpuKernelOutlining");
    }
    public static void mlirRegisterGPUGpuKernelOutlining () {
        var mh$ = mlirRegisterGPUGpuKernelOutlining$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateGPUGpuLaunchSinkIndexComputations$MH() {
        return RuntimeHelper.requireNonNull(constants$264.mlirCreateGPUGpuLaunchSinkIndexComputations$MH,"mlirCreateGPUGpuLaunchSinkIndexComputations");
    }
    public static MemorySegment mlirCreateGPUGpuLaunchSinkIndexComputations ( SegmentAllocator allocator) {
        var mh$ = mlirCreateGPUGpuLaunchSinkIndexComputations$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterGPUGpuLaunchSinkIndexComputations$MH() {
        return RuntimeHelper.requireNonNull(constants$264.mlirRegisterGPUGpuLaunchSinkIndexComputations$MH,"mlirRegisterGPUGpuLaunchSinkIndexComputations");
    }
    public static void mlirRegisterGPUGpuLaunchSinkIndexComputations () {
        var mh$ = mlirRegisterGPUGpuLaunchSinkIndexComputations$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateGPUGpuMapParallelLoopsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$265.mlirCreateGPUGpuMapParallelLoopsPass$MH,"mlirCreateGPUGpuMapParallelLoopsPass");
    }
    public static MemorySegment mlirCreateGPUGpuMapParallelLoopsPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateGPUGpuMapParallelLoopsPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterGPUGpuMapParallelLoopsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$265.mlirRegisterGPUGpuMapParallelLoopsPass$MH,"mlirRegisterGPUGpuMapParallelLoopsPass");
    }
    public static void mlirRegisterGPUGpuMapParallelLoopsPass () {
        var mh$ = mlirRegisterGPUGpuMapParallelLoopsPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__func__$MH() {
        return RuntimeHelper.requireNonNull(constants$265.mlirGetDialectHandle__func__$MH,"mlirGetDialectHandle__func__");
    }
    public static MemorySegment mlirGetDialectHandle__func__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__func__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__shape__$MH() {
        return RuntimeHelper.requireNonNull(constants$265.mlirGetDialectHandle__shape__$MH,"mlirGetDialectHandle__shape__");
    }
    public static MemorySegment mlirGetDialectHandle__shape__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__shape__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__sparse_tensor__$MH() {
        return RuntimeHelper.requireNonNull(constants$265.mlirGetDialectHandle__sparse_tensor__$MH,"mlirGetDialectHandle__sparse_tensor__");
    }
    public static MemorySegment mlirGetDialectHandle__sparse_tensor__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__sparse_tensor__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_DENSE() {
        return (int)4L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED() {
        return (int)8L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU() {
        return (int)9L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NO() {
        return (int)10L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_COMPRESSED_NU_NO() {
        return (int)11L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON() {
        return (int)16L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU() {
        return (int)17L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NO() {
        return (int)18L;
    }
    public static int MLIR_SPARSE_TENSOR_DIM_LEVEL_SINGLETON_NU_NO() {
        return (int)19L;
    }
    public static MethodHandle mlirAttributeIsASparseTensorEncodingAttr$MH() {
        return RuntimeHelper.requireNonNull(constants$265.mlirAttributeIsASparseTensorEncodingAttr$MH,"mlirAttributeIsASparseTensorEncodingAttr");
    }
    public static boolean mlirAttributeIsASparseTensorEncodingAttr ( MemorySegment attr) {
        var mh$ = mlirAttributeIsASparseTensorEncodingAttr$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$266.mlirSparseTensorEncodingAttrGet$MH,"mlirSparseTensorEncodingAttrGet");
    }
    public static MemorySegment mlirSparseTensorEncodingAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  long numDimLevelTypes,  Addressable dimLevelTypes,  MemorySegment dimOrdering,  MemorySegment higherOrdering,  int pointerBitWidth,  int indexBitWidth) {
        var mh$ = mlirSparseTensorEncodingAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, numDimLevelTypes, dimLevelTypes, dimOrdering, higherOrdering, pointerBitWidth, indexBitWidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingGetNumDimLevelTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$266.mlirSparseTensorEncodingGetNumDimLevelTypes$MH,"mlirSparseTensorEncodingGetNumDimLevelTypes");
    }
    public static long mlirSparseTensorEncodingGetNumDimLevelTypes ( MemorySegment attr) {
        var mh$ = mlirSparseTensorEncodingGetNumDimLevelTypes$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingAttrGetDimLevelType$MH() {
        return RuntimeHelper.requireNonNull(constants$266.mlirSparseTensorEncodingAttrGetDimLevelType$MH,"mlirSparseTensorEncodingAttrGetDimLevelType");
    }
    public static int mlirSparseTensorEncodingAttrGetDimLevelType ( MemorySegment attr,  long pos) {
        var mh$ = mlirSparseTensorEncodingAttrGetDimLevelType$MH();
        try {
            return (int)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingAttrGetDimOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$266.mlirSparseTensorEncodingAttrGetDimOrdering$MH,"mlirSparseTensorEncodingAttrGetDimOrdering");
    }
    public static MemorySegment mlirSparseTensorEncodingAttrGetDimOrdering ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirSparseTensorEncodingAttrGetDimOrdering$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingAttrGetHigherOrdering$MH() {
        return RuntimeHelper.requireNonNull(constants$266.mlirSparseTensorEncodingAttrGetHigherOrdering$MH,"mlirSparseTensorEncodingAttrGetHigherOrdering");
    }
    public static MemorySegment mlirSparseTensorEncodingAttrGetHigherOrdering ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirSparseTensorEncodingAttrGetHigherOrdering$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingAttrGetPointerBitWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$266.mlirSparseTensorEncodingAttrGetPointerBitWidth$MH,"mlirSparseTensorEncodingAttrGetPointerBitWidth");
    }
    public static int mlirSparseTensorEncodingAttrGetPointerBitWidth ( MemorySegment attr) {
        var mh$ = mlirSparseTensorEncodingAttrGetPointerBitWidth$MH();
        try {
            return (int)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseTensorEncodingAttrGetIndexBitWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$267.mlirSparseTensorEncodingAttrGetIndexBitWidth$MH,"mlirSparseTensorEncodingAttrGetIndexBitWidth");
    }
    public static int mlirSparseTensorEncodingAttrGetIndexBitWidth ( MemorySegment attr) {
        var mh$ = mlirSparseTensorEncodingAttrGetIndexBitWidth$MH();
        try {
            return (int)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$267.mlirRegisterSparseTensorPasses$MH,"mlirRegisterSparseTensorPasses");
    }
    public static void mlirRegisterSparseTensorPasses () {
        var mh$ = mlirRegisterSparseTensorPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorPostSparsificationRewrite$MH() {
        return RuntimeHelper.requireNonNull(constants$267.mlirCreateSparseTensorPostSparsificationRewrite$MH,"mlirCreateSparseTensorPostSparsificationRewrite");
    }
    public static MemorySegment mlirCreateSparseTensorPostSparsificationRewrite ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorPostSparsificationRewrite$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorPostSparsificationRewrite$MH() {
        return RuntimeHelper.requireNonNull(constants$267.mlirRegisterSparseTensorPostSparsificationRewrite$MH,"mlirRegisterSparseTensorPostSparsificationRewrite");
    }
    public static void mlirRegisterSparseTensorPostSparsificationRewrite () {
        var mh$ = mlirRegisterSparseTensorPostSparsificationRewrite$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorPreSparsificationRewrite$MH() {
        return RuntimeHelper.requireNonNull(constants$267.mlirCreateSparseTensorPreSparsificationRewrite$MH,"mlirCreateSparseTensorPreSparsificationRewrite");
    }
    public static MemorySegment mlirCreateSparseTensorPreSparsificationRewrite ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorPreSparsificationRewrite$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorPreSparsificationRewrite$MH() {
        return RuntimeHelper.requireNonNull(constants$267.mlirRegisterSparseTensorPreSparsificationRewrite$MH,"mlirRegisterSparseTensorPreSparsificationRewrite");
    }
    public static void mlirRegisterSparseTensorPreSparsificationRewrite () {
        var mh$ = mlirRegisterSparseTensorPreSparsificationRewrite$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorSparseBufferRewrite$MH() {
        return RuntimeHelper.requireNonNull(constants$268.mlirCreateSparseTensorSparseBufferRewrite$MH,"mlirCreateSparseTensorSparseBufferRewrite");
    }
    public static MemorySegment mlirCreateSparseTensorSparseBufferRewrite ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorSparseBufferRewrite$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorSparseBufferRewrite$MH() {
        return RuntimeHelper.requireNonNull(constants$268.mlirRegisterSparseTensorSparseBufferRewrite$MH,"mlirRegisterSparseTensorSparseBufferRewrite");
    }
    public static void mlirRegisterSparseTensorSparseBufferRewrite () {
        var mh$ = mlirRegisterSparseTensorSparseBufferRewrite$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorSparseTensorCodegen$MH() {
        return RuntimeHelper.requireNonNull(constants$268.mlirCreateSparseTensorSparseTensorCodegen$MH,"mlirCreateSparseTensorSparseTensorCodegen");
    }
    public static MemorySegment mlirCreateSparseTensorSparseTensorCodegen ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorSparseTensorCodegen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorSparseTensorCodegen$MH() {
        return RuntimeHelper.requireNonNull(constants$268.mlirRegisterSparseTensorSparseTensorCodegen$MH,"mlirRegisterSparseTensorSparseTensorCodegen");
    }
    public static void mlirRegisterSparseTensorSparseTensorCodegen () {
        var mh$ = mlirRegisterSparseTensorSparseTensorCodegen$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorSparseTensorConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$268.mlirCreateSparseTensorSparseTensorConversionPass$MH,"mlirCreateSparseTensorSparseTensorConversionPass");
    }
    public static MemorySegment mlirCreateSparseTensorSparseTensorConversionPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorSparseTensorConversionPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorSparseTensorConversionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$268.mlirRegisterSparseTensorSparseTensorConversionPass$MH,"mlirRegisterSparseTensorSparseTensorConversionPass");
    }
    public static void mlirRegisterSparseTensorSparseTensorConversionPass () {
        var mh$ = mlirRegisterSparseTensorSparseTensorConversionPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorSparseVectorization$MH() {
        return RuntimeHelper.requireNonNull(constants$269.mlirCreateSparseTensorSparseVectorization$MH,"mlirCreateSparseTensorSparseVectorization");
    }
    public static MemorySegment mlirCreateSparseTensorSparseVectorization ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorSparseVectorization$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorSparseVectorization$MH() {
        return RuntimeHelper.requireNonNull(constants$269.mlirRegisterSparseTensorSparseVectorization$MH,"mlirRegisterSparseTensorSparseVectorization");
    }
    public static void mlirRegisterSparseTensorSparseVectorization () {
        var mh$ = mlirRegisterSparseTensorSparseVectorization$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorSparsificationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$269.mlirCreateSparseTensorSparsificationPass$MH,"mlirCreateSparseTensorSparsificationPass");
    }
    public static MemorySegment mlirCreateSparseTensorSparsificationPass ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorSparsificationPass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorSparsificationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$269.mlirRegisterSparseTensorSparsificationPass$MH,"mlirRegisterSparseTensorSparsificationPass");
    }
    public static void mlirRegisterSparseTensorSparsificationPass () {
        var mh$ = mlirRegisterSparseTensorSparsificationPass$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateSparseTensorStorageSpecifierToLLVM$MH() {
        return RuntimeHelper.requireNonNull(constants$269.mlirCreateSparseTensorStorageSpecifierToLLVM$MH,"mlirCreateSparseTensorStorageSpecifierToLLVM");
    }
    public static MemorySegment mlirCreateSparseTensorStorageSpecifierToLLVM ( SegmentAllocator allocator) {
        var mh$ = mlirCreateSparseTensorStorageSpecifierToLLVM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterSparseTensorStorageSpecifierToLLVM$MH() {
        return RuntimeHelper.requireNonNull(constants$269.mlirRegisterSparseTensorStorageSpecifierToLLVM$MH,"mlirRegisterSparseTensorStorageSpecifierToLLVM");
    }
    public static void mlirRegisterSparseTensorStorageSpecifierToLLVM () {
        var mh$ = mlirRegisterSparseTensorStorageSpecifierToLLVM$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddInstructionCombiningPass$MH() {
        return RuntimeHelper.requireNonNull(constants$270.LLVMAddInstructionCombiningPass$MH,"LLVMAddInstructionCombiningPass");
    }
    public static void LLVMAddInstructionCombiningPass ( Addressable PM) {
        var mh$ = LLVMAddInstructionCombiningPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MlirDiagnosticError() {
        return (int)0L;
    }
    public static int MlirDiagnosticWarning() {
        return (int)1L;
    }
    public static int MlirDiagnosticNote() {
        return (int)2L;
    }
    public static int MlirDiagnosticRemark() {
        return (int)3L;
    }
    public static MethodHandle mlirDiagnosticPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$270.mlirDiagnosticPrint$MH,"mlirDiagnosticPrint");
    }
    public static void mlirDiagnosticPrint ( MemorySegment diagnostic,  Addressable callback,  Addressable userData) {
        var mh$ = mlirDiagnosticPrint$MH();
        try {
            mh$.invokeExact(diagnostic, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDiagnosticGetLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$270.mlirDiagnosticGetLocation$MH,"mlirDiagnosticGetLocation");
    }
    public static MemorySegment mlirDiagnosticGetLocation ( SegmentAllocator allocator,  MemorySegment diagnostic) {
        var mh$ = mlirDiagnosticGetLocation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, diagnostic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDiagnosticGetSeverity$MH() {
        return RuntimeHelper.requireNonNull(constants$270.mlirDiagnosticGetSeverity$MH,"mlirDiagnosticGetSeverity");
    }
    public static int mlirDiagnosticGetSeverity ( MemorySegment diagnostic) {
        var mh$ = mlirDiagnosticGetSeverity$MH();
        try {
            return (int)mh$.invokeExact(diagnostic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDiagnosticGetNumNotes$MH() {
        return RuntimeHelper.requireNonNull(constants$271.mlirDiagnosticGetNumNotes$MH,"mlirDiagnosticGetNumNotes");
    }
    public static long mlirDiagnosticGetNumNotes ( MemorySegment diagnostic) {
        var mh$ = mlirDiagnosticGetNumNotes$MH();
        try {
            return (long)mh$.invokeExact(diagnostic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDiagnosticGetNote$MH() {
        return RuntimeHelper.requireNonNull(constants$271.mlirDiagnosticGetNote$MH,"mlirDiagnosticGetNote");
    }
    public static MemorySegment mlirDiagnosticGetNote ( SegmentAllocator allocator,  MemorySegment diagnostic,  long pos) {
        var mh$ = mlirDiagnosticGetNote$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, diagnostic, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextAttachDiagnosticHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$271.mlirContextAttachDiagnosticHandler$MH,"mlirContextAttachDiagnosticHandler");
    }
    public static long mlirContextAttachDiagnosticHandler ( MemorySegment context,  Addressable handler,  Addressable userData,  Addressable deleteUserData) {
        var mh$ = mlirContextAttachDiagnosticHandler$MH();
        try {
            return (long)mh$.invokeExact(context, handler, userData, deleteUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextDetachDiagnosticHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$271.mlirContextDetachDiagnosticHandler$MH,"mlirContextDetachDiagnosticHandler");
    }
    public static void mlirContextDetachDiagnosticHandler ( MemorySegment context,  long id) {
        var mh$ = mlirContextDetachDiagnosticHandler$MH();
        try {
            mh$.invokeExact(context, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirEmitError$MH() {
        return RuntimeHelper.requireNonNull(constants$272.mlirEmitError$MH,"mlirEmitError");
    }
    public static void mlirEmitError ( MemorySegment location,  Addressable message) {
        var mh$ = mlirEmitError$MH();
        try {
            mh$.invokeExact(location, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LTO_SYMBOL_ALIGNMENT_MASK() {
        return (int)31L;
    }
    public static int LTO_SYMBOL_PERMISSIONS_MASK() {
        return (int)224L;
    }
    public static int LTO_SYMBOL_PERMISSIONS_CODE() {
        return (int)160L;
    }
    public static int LTO_SYMBOL_PERMISSIONS_DATA() {
        return (int)192L;
    }
    public static int LTO_SYMBOL_PERMISSIONS_RODATA() {
        return (int)128L;
    }
    public static int LTO_SYMBOL_DEFINITION_MASK() {
        return (int)1792L;
    }
    public static int LTO_SYMBOL_DEFINITION_REGULAR() {
        return (int)256L;
    }
    public static int LTO_SYMBOL_DEFINITION_TENTATIVE() {
        return (int)512L;
    }
    public static int LTO_SYMBOL_DEFINITION_WEAK() {
        return (int)768L;
    }
    public static int LTO_SYMBOL_DEFINITION_UNDEFINED() {
        return (int)1024L;
    }
    public static int LTO_SYMBOL_DEFINITION_WEAKUNDEF() {
        return (int)1280L;
    }
    public static int LTO_SYMBOL_SCOPE_MASK() {
        return (int)14336L;
    }
    public static int LTO_SYMBOL_SCOPE_INTERNAL() {
        return (int)2048L;
    }
    public static int LTO_SYMBOL_SCOPE_HIDDEN() {
        return (int)4096L;
    }
    public static int LTO_SYMBOL_SCOPE_PROTECTED() {
        return (int)8192L;
    }
    public static int LTO_SYMBOL_SCOPE_DEFAULT() {
        return (int)6144L;
    }
    public static int LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN() {
        return (int)10240L;
    }
    public static int LTO_SYMBOL_COMDAT() {
        return (int)16384L;
    }
    public static int LTO_SYMBOL_ALIAS() {
        return (int)32768L;
    }
    public static int LTO_DEBUG_MODEL_NONE() {
        return (int)0L;
    }
    public static int LTO_DEBUG_MODEL_DWARF() {
        return (int)1L;
    }
    public static int LTO_CODEGEN_PIC_MODEL_STATIC() {
        return (int)0L;
    }
    public static int LTO_CODEGEN_PIC_MODEL_DYNAMIC() {
        return (int)1L;
    }
    public static int LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC() {
        return (int)2L;
    }
    public static int LTO_CODEGEN_PIC_MODEL_DEFAULT() {
        return (int)3L;
    }
    public static OfAddress lto_module_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress lto_code_gen_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress thinlto_code_gen_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle lto_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$272.lto_get_version$MH,"lto_get_version");
    }
    public static MemoryAddress lto_get_version () {
        var mh$ = lto_get_version$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_get_error_message$MH() {
        return RuntimeHelper.requireNonNull(constants$272.lto_get_error_message$MH,"lto_get_error_message");
    }
    public static MemoryAddress lto_get_error_message () {
        var mh$ = lto_get_error_message$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_is_object_file$MH() {
        return RuntimeHelper.requireNonNull(constants$272.lto_module_is_object_file$MH,"lto_module_is_object_file");
    }
    public static boolean lto_module_is_object_file ( Addressable path) {
        var mh$ = lto_module_is_object_file$MH();
        try {
            return (boolean)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_is_object_file_for_target$MH() {
        return RuntimeHelper.requireNonNull(constants$272.lto_module_is_object_file_for_target$MH,"lto_module_is_object_file_for_target");
    }
    public static boolean lto_module_is_object_file_for_target ( Addressable path,  Addressable target_triple_prefix) {
        var mh$ = lto_module_is_object_file_for_target$MH();
        try {
            return (boolean)mh$.invokeExact(path, target_triple_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_has_objc_category$MH() {
        return RuntimeHelper.requireNonNull(constants$272.lto_module_has_objc_category$MH,"lto_module_has_objc_category");
    }
    public static boolean lto_module_has_objc_category ( Addressable mem,  long length) {
        var mh$ = lto_module_has_objc_category$MH();
        try {
            return (boolean)mh$.invokeExact(mem, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_is_object_file_in_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$273.lto_module_is_object_file_in_memory$MH,"lto_module_is_object_file_in_memory");
    }
    public static boolean lto_module_is_object_file_in_memory ( Addressable mem,  long length) {
        var mh$ = lto_module_is_object_file_in_memory$MH();
        try {
            return (boolean)mh$.invokeExact(mem, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_is_object_file_in_memory_for_target$MH() {
        return RuntimeHelper.requireNonNull(constants$273.lto_module_is_object_file_in_memory_for_target$MH,"lto_module_is_object_file_in_memory_for_target");
    }
    public static boolean lto_module_is_object_file_in_memory_for_target ( Addressable mem,  long length,  Addressable target_triple_prefix) {
        var mh$ = lto_module_is_object_file_in_memory_for_target$MH();
        try {
            return (boolean)mh$.invokeExact(mem, length, target_triple_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create$MH() {
        return RuntimeHelper.requireNonNull(constants$273.lto_module_create$MH,"lto_module_create");
    }
    public static MemoryAddress lto_module_create ( Addressable path) {
        var mh$ = lto_module_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create_from_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$273.lto_module_create_from_memory$MH,"lto_module_create_from_memory");
    }
    public static MemoryAddress lto_module_create_from_memory ( Addressable mem,  long length) {
        var mh$ = lto_module_create_from_memory$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create_from_memory_with_path$MH() {
        return RuntimeHelper.requireNonNull(constants$273.lto_module_create_from_memory_with_path$MH,"lto_module_create_from_memory_with_path");
    }
    public static MemoryAddress lto_module_create_from_memory_with_path ( Addressable mem,  long length,  Addressable path) {
        var mh$ = lto_module_create_from_memory_with_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem, length, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create_in_local_context$MH() {
        return RuntimeHelper.requireNonNull(constants$273.lto_module_create_in_local_context$MH,"lto_module_create_in_local_context");
    }
    public static MemoryAddress lto_module_create_in_local_context ( Addressable mem,  long length,  Addressable path) {
        var mh$ = lto_module_create_in_local_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem, length, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create_in_codegen_context$MH() {
        return RuntimeHelper.requireNonNull(constants$274.lto_module_create_in_codegen_context$MH,"lto_module_create_in_codegen_context");
    }
    public static MemoryAddress lto_module_create_in_codegen_context ( Addressable mem,  long length,  Addressable path,  Addressable cg) {
        var mh$ = lto_module_create_in_codegen_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem, length, path, cg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create_from_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$274.lto_module_create_from_fd$MH,"lto_module_create_from_fd");
    }
    public static MemoryAddress lto_module_create_from_fd ( int fd,  Addressable path,  long file_size) {
        var mh$ = lto_module_create_from_fd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fd, path, file_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_create_from_fd_at_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$274.lto_module_create_from_fd_at_offset$MH,"lto_module_create_from_fd_at_offset");
    }
    public static MemoryAddress lto_module_create_from_fd_at_offset ( int fd,  Addressable path,  long file_size,  long map_size,  long offset) {
        var mh$ = lto_module_create_from_fd_at_offset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fd, path, file_size, map_size, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_dispose$MH() {
        return RuntimeHelper.requireNonNull(constants$274.lto_module_dispose$MH,"lto_module_dispose");
    }
    public static void lto_module_dispose ( Addressable mod) {
        var mh$ = lto_module_dispose$MH();
        try {
            mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_get_target_triple$MH() {
        return RuntimeHelper.requireNonNull(constants$274.lto_module_get_target_triple$MH,"lto_module_get_target_triple");
    }
    public static MemoryAddress lto_module_get_target_triple ( Addressable mod) {
        var mh$ = lto_module_get_target_triple$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_set_target_triple$MH() {
        return RuntimeHelper.requireNonNull(constants$274.lto_module_set_target_triple$MH,"lto_module_set_target_triple");
    }
    public static void lto_module_set_target_triple ( Addressable mod,  Addressable triple) {
        var mh$ = lto_module_set_target_triple$MH();
        try {
            mh$.invokeExact(mod, triple);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_get_num_symbols$MH() {
        return RuntimeHelper.requireNonNull(constants$275.lto_module_get_num_symbols$MH,"lto_module_get_num_symbols");
    }
    public static int lto_module_get_num_symbols ( Addressable mod) {
        var mh$ = lto_module_get_num_symbols$MH();
        try {
            return (int)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_get_symbol_name$MH() {
        return RuntimeHelper.requireNonNull(constants$275.lto_module_get_symbol_name$MH,"lto_module_get_symbol_name");
    }
    public static MemoryAddress lto_module_get_symbol_name ( Addressable mod,  int index) {
        var mh$ = lto_module_get_symbol_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mod, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_get_symbol_attribute$MH() {
        return RuntimeHelper.requireNonNull(constants$275.lto_module_get_symbol_attribute$MH,"lto_module_get_symbol_attribute");
    }
    public static int lto_module_get_symbol_attribute ( Addressable mod,  int index) {
        var mh$ = lto_module_get_symbol_attribute$MH();
        try {
            return (int)mh$.invokeExact(mod, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_get_linkeropts$MH() {
        return RuntimeHelper.requireNonNull(constants$275.lto_module_get_linkeropts$MH,"lto_module_get_linkeropts");
    }
    public static MemoryAddress lto_module_get_linkeropts ( Addressable mod) {
        var mh$ = lto_module_get_linkeropts$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_get_macho_cputype$MH() {
        return RuntimeHelper.requireNonNull(constants$275.lto_module_get_macho_cputype$MH,"lto_module_get_macho_cputype");
    }
    public static boolean lto_module_get_macho_cputype ( Addressable mod,  Addressable out_cputype,  Addressable out_cpusubtype) {
        var mh$ = lto_module_get_macho_cputype$MH();
        try {
            return (boolean)mh$.invokeExact(mod, out_cputype, out_cpusubtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_has_ctor_dtor$MH() {
        return RuntimeHelper.requireNonNull(constants$275.lto_module_has_ctor_dtor$MH,"lto_module_has_ctor_dtor");
    }
    public static boolean lto_module_has_ctor_dtor ( Addressable mod) {
        var mh$ = lto_module_has_ctor_dtor$MH();
        try {
            return (boolean)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LTO_DS_ERROR() {
        return (int)0L;
    }
    public static int LTO_DS_WARNING() {
        return (int)1L;
    }
    public static int LTO_DS_REMARK() {
        return (int)3L;
    }
    public static int LTO_DS_NOTE() {
        return (int)2L;
    }
    public static MethodHandle lto_codegen_set_diagnostic_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$276.lto_codegen_set_diagnostic_handler$MH,"lto_codegen_set_diagnostic_handler");
    }
    public static void lto_codegen_set_diagnostic_handler ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = lto_codegen_set_diagnostic_handler$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_create$MH() {
        return RuntimeHelper.requireNonNull(constants$276.lto_codegen_create$MH,"lto_codegen_create");
    }
    public static MemoryAddress lto_codegen_create () {
        var mh$ = lto_codegen_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_create_in_local_context$MH() {
        return RuntimeHelper.requireNonNull(constants$276.lto_codegen_create_in_local_context$MH,"lto_codegen_create_in_local_context");
    }
    public static MemoryAddress lto_codegen_create_in_local_context () {
        var mh$ = lto_codegen_create_in_local_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_dispose$MH() {
        return RuntimeHelper.requireNonNull(constants$276.lto_codegen_dispose$MH,"lto_codegen_dispose");
    }
    public static void lto_codegen_dispose ( Addressable x0) {
        var mh$ = lto_codegen_dispose$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_add_module$MH() {
        return RuntimeHelper.requireNonNull(constants$277.lto_codegen_add_module$MH,"lto_codegen_add_module");
    }
    public static boolean lto_codegen_add_module ( Addressable cg,  Addressable mod) {
        var mh$ = lto_codegen_add_module$MH();
        try {
            return (boolean)mh$.invokeExact(cg, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_module$MH() {
        return RuntimeHelper.requireNonNull(constants$277.lto_codegen_set_module$MH,"lto_codegen_set_module");
    }
    public static void lto_codegen_set_module ( Addressable cg,  Addressable mod) {
        var mh$ = lto_codegen_set_module$MH();
        try {
            mh$.invokeExact(cg, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_debug_model$MH() {
        return RuntimeHelper.requireNonNull(constants$277.lto_codegen_set_debug_model$MH,"lto_codegen_set_debug_model");
    }
    public static boolean lto_codegen_set_debug_model ( Addressable cg,  int x1) {
        var mh$ = lto_codegen_set_debug_model$MH();
        try {
            return (boolean)mh$.invokeExact(cg, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_pic_model$MH() {
        return RuntimeHelper.requireNonNull(constants$277.lto_codegen_set_pic_model$MH,"lto_codegen_set_pic_model");
    }
    public static boolean lto_codegen_set_pic_model ( Addressable cg,  int x1) {
        var mh$ = lto_codegen_set_pic_model$MH();
        try {
            return (boolean)mh$.invokeExact(cg, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_cpu$MH() {
        return RuntimeHelper.requireNonNull(constants$277.lto_codegen_set_cpu$MH,"lto_codegen_set_cpu");
    }
    public static void lto_codegen_set_cpu ( Addressable cg,  Addressable cpu) {
        var mh$ = lto_codegen_set_cpu$MH();
        try {
            mh$.invokeExact(cg, cpu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_assembler_path$MH() {
        return RuntimeHelper.requireNonNull(constants$277.lto_codegen_set_assembler_path$MH,"lto_codegen_set_assembler_path");
    }
    public static void lto_codegen_set_assembler_path ( Addressable cg,  Addressable path) {
        var mh$ = lto_codegen_set_assembler_path$MH();
        try {
            mh$.invokeExact(cg, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_assembler_args$MH() {
        return RuntimeHelper.requireNonNull(constants$278.lto_codegen_set_assembler_args$MH,"lto_codegen_set_assembler_args");
    }
    public static void lto_codegen_set_assembler_args ( Addressable cg,  Addressable args,  int nargs) {
        var mh$ = lto_codegen_set_assembler_args$MH();
        try {
            mh$.invokeExact(cg, args, nargs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_add_must_preserve_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$278.lto_codegen_add_must_preserve_symbol$MH,"lto_codegen_add_must_preserve_symbol");
    }
    public static void lto_codegen_add_must_preserve_symbol ( Addressable cg,  Addressable symbol) {
        var mh$ = lto_codegen_add_must_preserve_symbol$MH();
        try {
            mh$.invokeExact(cg, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_write_merged_modules$MH() {
        return RuntimeHelper.requireNonNull(constants$278.lto_codegen_write_merged_modules$MH,"lto_codegen_write_merged_modules");
    }
    public static boolean lto_codegen_write_merged_modules ( Addressable cg,  Addressable path) {
        var mh$ = lto_codegen_write_merged_modules$MH();
        try {
            return (boolean)mh$.invokeExact(cg, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_compile$MH() {
        return RuntimeHelper.requireNonNull(constants$278.lto_codegen_compile$MH,"lto_codegen_compile");
    }
    public static MemoryAddress lto_codegen_compile ( Addressable cg,  Addressable length) {
        var mh$ = lto_codegen_compile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cg, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_compile_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$278.lto_codegen_compile_to_file$MH,"lto_codegen_compile_to_file");
    }
    public static boolean lto_codegen_compile_to_file ( Addressable cg,  Addressable name) {
        var mh$ = lto_codegen_compile_to_file$MH();
        try {
            return (boolean)mh$.invokeExact(cg, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_optimize$MH() {
        return RuntimeHelper.requireNonNull(constants$278.lto_codegen_optimize$MH,"lto_codegen_optimize");
    }
    public static boolean lto_codegen_optimize ( Addressable cg) {
        var mh$ = lto_codegen_optimize$MH();
        try {
            return (boolean)mh$.invokeExact(cg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_compile_optimized$MH() {
        return RuntimeHelper.requireNonNull(constants$279.lto_codegen_compile_optimized$MH,"lto_codegen_compile_optimized");
    }
    public static MemoryAddress lto_codegen_compile_optimized ( Addressable cg,  Addressable length) {
        var mh$ = lto_codegen_compile_optimized$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cg, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_api_version$MH() {
        return RuntimeHelper.requireNonNull(constants$279.lto_api_version$MH,"lto_api_version");
    }
    public static int lto_api_version () {
        var mh$ = lto_api_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_set_debug_options$MH() {
        return RuntimeHelper.requireNonNull(constants$279.lto_set_debug_options$MH,"lto_set_debug_options");
    }
    public static void lto_set_debug_options ( Addressable options,  int number) {
        var mh$ = lto_set_debug_options$MH();
        try {
            mh$.invokeExact(options, number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_debug_options$MH() {
        return RuntimeHelper.requireNonNull(constants$279.lto_codegen_debug_options$MH,"lto_codegen_debug_options");
    }
    public static void lto_codegen_debug_options ( Addressable cg,  Addressable x1) {
        var mh$ = lto_codegen_debug_options$MH();
        try {
            mh$.invokeExact(cg, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_debug_options_array$MH() {
        return RuntimeHelper.requireNonNull(constants$279.lto_codegen_debug_options_array$MH,"lto_codegen_debug_options_array");
    }
    public static void lto_codegen_debug_options_array ( Addressable cg,  Addressable x1,  int number) {
        var mh$ = lto_codegen_debug_options_array$MH();
        try {
            mh$.invokeExact(cg, x1, number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_initialize_disassembler$MH() {
        return RuntimeHelper.requireNonNull(constants$279.lto_initialize_disassembler$MH,"lto_initialize_disassembler");
    }
    public static void lto_initialize_disassembler () {
        var mh$ = lto_initialize_disassembler$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_should_internalize$MH() {
        return RuntimeHelper.requireNonNull(constants$280.lto_codegen_set_should_internalize$MH,"lto_codegen_set_should_internalize");
    }
    public static void lto_codegen_set_should_internalize ( Addressable cg,  boolean ShouldInternalize) {
        var mh$ = lto_codegen_set_should_internalize$MH();
        try {
            mh$.invokeExact(cg, ShouldInternalize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_codegen_set_should_embed_uselists$MH() {
        return RuntimeHelper.requireNonNull(constants$280.lto_codegen_set_should_embed_uselists$MH,"lto_codegen_set_should_embed_uselists");
    }
    public static void lto_codegen_set_should_embed_uselists ( Addressable cg,  boolean ShouldEmbedUselists) {
        var mh$ = lto_codegen_set_should_embed_uselists$MH();
        try {
            mh$.invokeExact(cg, ShouldEmbedUselists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress lto_input_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle lto_input_create$MH() {
        return RuntimeHelper.requireNonNull(constants$280.lto_input_create$MH,"lto_input_create");
    }
    public static MemoryAddress lto_input_create ( Addressable buffer,  long buffer_size,  Addressable path) {
        var mh$ = lto_input_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, buffer_size, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_input_dispose$MH() {
        return RuntimeHelper.requireNonNull(constants$280.lto_input_dispose$MH,"lto_input_dispose");
    }
    public static void lto_input_dispose ( Addressable input) {
        var mh$ = lto_input_dispose$MH();
        try {
            mh$.invokeExact(input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_input_get_num_dependent_libraries$MH() {
        return RuntimeHelper.requireNonNull(constants$280.lto_input_get_num_dependent_libraries$MH,"lto_input_get_num_dependent_libraries");
    }
    public static int lto_input_get_num_dependent_libraries ( Addressable input) {
        var mh$ = lto_input_get_num_dependent_libraries$MH();
        try {
            return (int)mh$.invokeExact(input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_input_get_dependent_library$MH() {
        return RuntimeHelper.requireNonNull(constants$280.lto_input_get_dependent_library$MH,"lto_input_get_dependent_library");
    }
    public static MemoryAddress lto_input_get_dependent_library ( Addressable input,  long index,  Addressable size) {
        var mh$ = lto_input_get_dependent_library$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(input, index, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_runtime_lib_symbols_list$MH() {
        return RuntimeHelper.requireNonNull(constants$281.lto_runtime_lib_symbols_list$MH,"lto_runtime_lib_symbols_list");
    }
    public static MemoryAddress lto_runtime_lib_symbols_list ( Addressable size) {
        var mh$ = lto_runtime_lib_symbols_list$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_create_codegen$MH() {
        return RuntimeHelper.requireNonNull(constants$281.thinlto_create_codegen$MH,"thinlto_create_codegen");
    }
    public static MemoryAddress thinlto_create_codegen () {
        var mh$ = thinlto_create_codegen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_dispose$MH() {
        return RuntimeHelper.requireNonNull(constants$281.thinlto_codegen_dispose$MH,"thinlto_codegen_dispose");
    }
    public static void thinlto_codegen_dispose ( Addressable cg) {
        var mh$ = thinlto_codegen_dispose$MH();
        try {
            mh$.invokeExact(cg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_add_module$MH() {
        return RuntimeHelper.requireNonNull(constants$281.thinlto_codegen_add_module$MH,"thinlto_codegen_add_module");
    }
    public static void thinlto_codegen_add_module ( Addressable cg,  Addressable identifier,  Addressable data,  int length) {
        var mh$ = thinlto_codegen_add_module$MH();
        try {
            mh$.invokeExact(cg, identifier, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_process$MH() {
        return RuntimeHelper.requireNonNull(constants$281.thinlto_codegen_process$MH,"thinlto_codegen_process");
    }
    public static void thinlto_codegen_process ( Addressable cg) {
        var mh$ = thinlto_codegen_process$MH();
        try {
            mh$.invokeExact(cg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_module_get_num_objects$MH() {
        return RuntimeHelper.requireNonNull(constants$281.thinlto_module_get_num_objects$MH,"thinlto_module_get_num_objects");
    }
    public static int thinlto_module_get_num_objects ( Addressable cg) {
        var mh$ = thinlto_module_get_num_objects$MH();
        try {
            return (int)mh$.invokeExact(cg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_module_get_object$MH() {
        return RuntimeHelper.requireNonNull(constants$282.thinlto_module_get_object$MH,"thinlto_module_get_object");
    }
    public static MemorySegment thinlto_module_get_object ( SegmentAllocator allocator,  Addressable cg,  int index) {
        var mh$ = thinlto_module_get_object$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, cg, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_module_get_num_object_files$MH() {
        return RuntimeHelper.requireNonNull(constants$282.thinlto_module_get_num_object_files$MH,"thinlto_module_get_num_object_files");
    }
    public static int thinlto_module_get_num_object_files ( Addressable cg) {
        var mh$ = thinlto_module_get_num_object_files$MH();
        try {
            return (int)mh$.invokeExact(cg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_module_get_object_file$MH() {
        return RuntimeHelper.requireNonNull(constants$282.thinlto_module_get_object_file$MH,"thinlto_module_get_object_file");
    }
    public static MemoryAddress thinlto_module_get_object_file ( Addressable cg,  int index) {
        var mh$ = thinlto_module_get_object_file$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cg, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_pic_model$MH() {
        return RuntimeHelper.requireNonNull(constants$282.thinlto_codegen_set_pic_model$MH,"thinlto_codegen_set_pic_model");
    }
    public static boolean thinlto_codegen_set_pic_model ( Addressable cg,  int x1) {
        var mh$ = thinlto_codegen_set_pic_model$MH();
        try {
            return (boolean)mh$.invokeExact(cg, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_savetemps_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$282.thinlto_codegen_set_savetemps_dir$MH,"thinlto_codegen_set_savetemps_dir");
    }
    public static void thinlto_codegen_set_savetemps_dir ( Addressable cg,  Addressable save_temps_dir) {
        var mh$ = thinlto_codegen_set_savetemps_dir$MH();
        try {
            mh$.invokeExact(cg, save_temps_dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_set_generated_objects_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$282.thinlto_set_generated_objects_dir$MH,"thinlto_set_generated_objects_dir");
    }
    public static void thinlto_set_generated_objects_dir ( Addressable cg,  Addressable save_temps_dir) {
        var mh$ = thinlto_set_generated_objects_dir$MH();
        try {
            mh$.invokeExact(cg, save_temps_dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cpu$MH() {
        return RuntimeHelper.requireNonNull(constants$283.thinlto_codegen_set_cpu$MH,"thinlto_codegen_set_cpu");
    }
    public static void thinlto_codegen_set_cpu ( Addressable cg,  Addressable cpu) {
        var mh$ = thinlto_codegen_set_cpu$MH();
        try {
            mh$.invokeExact(cg, cpu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_disable_codegen$MH() {
        return RuntimeHelper.requireNonNull(constants$283.thinlto_codegen_disable_codegen$MH,"thinlto_codegen_disable_codegen");
    }
    public static void thinlto_codegen_disable_codegen ( Addressable cg,  boolean disable) {
        var mh$ = thinlto_codegen_disable_codegen$MH();
        try {
            mh$.invokeExact(cg, disable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_codegen_only$MH() {
        return RuntimeHelper.requireNonNull(constants$283.thinlto_codegen_set_codegen_only$MH,"thinlto_codegen_set_codegen_only");
    }
    public static void thinlto_codegen_set_codegen_only ( Addressable cg,  boolean codegen_only) {
        var mh$ = thinlto_codegen_set_codegen_only$MH();
        try {
            mh$.invokeExact(cg, codegen_only);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_debug_options$MH() {
        return RuntimeHelper.requireNonNull(constants$283.thinlto_debug_options$MH,"thinlto_debug_options");
    }
    public static void thinlto_debug_options ( Addressable options,  int number) {
        var mh$ = thinlto_debug_options$MH();
        try {
            mh$.invokeExact(options, number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lto_module_is_thinlto$MH() {
        return RuntimeHelper.requireNonNull(constants$283.lto_module_is_thinlto$MH,"lto_module_is_thinlto");
    }
    public static boolean lto_module_is_thinlto ( Addressable mod) {
        var mh$ = lto_module_is_thinlto$MH();
        try {
            return (boolean)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_add_must_preserve_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$283.thinlto_codegen_add_must_preserve_symbol$MH,"thinlto_codegen_add_must_preserve_symbol");
    }
    public static void thinlto_codegen_add_must_preserve_symbol ( Addressable cg,  Addressable name,  int length) {
        var mh$ = thinlto_codegen_add_must_preserve_symbol$MH();
        try {
            mh$.invokeExact(cg, name, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_add_cross_referenced_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$284.thinlto_codegen_add_cross_referenced_symbol$MH,"thinlto_codegen_add_cross_referenced_symbol");
    }
    public static void thinlto_codegen_add_cross_referenced_symbol ( Addressable cg,  Addressable name,  int length) {
        var mh$ = thinlto_codegen_add_cross_referenced_symbol$MH();
        try {
            mh$.invokeExact(cg, name, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cache_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$284.thinlto_codegen_set_cache_dir$MH,"thinlto_codegen_set_cache_dir");
    }
    public static void thinlto_codegen_set_cache_dir ( Addressable cg,  Addressable cache_dir) {
        var mh$ = thinlto_codegen_set_cache_dir$MH();
        try {
            mh$.invokeExact(cg, cache_dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cache_pruning_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$284.thinlto_codegen_set_cache_pruning_interval$MH,"thinlto_codegen_set_cache_pruning_interval");
    }
    public static void thinlto_codegen_set_cache_pruning_interval ( Addressable cg,  int interval) {
        var mh$ = thinlto_codegen_set_cache_pruning_interval$MH();
        try {
            mh$.invokeExact(cg, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_final_cache_size_relative_to_available_space$MH() {
        return RuntimeHelper.requireNonNull(constants$284.thinlto_codegen_set_final_cache_size_relative_to_available_space$MH,"thinlto_codegen_set_final_cache_size_relative_to_available_space");
    }
    public static void thinlto_codegen_set_final_cache_size_relative_to_available_space ( Addressable cg,  int percentage) {
        var mh$ = thinlto_codegen_set_final_cache_size_relative_to_available_space$MH();
        try {
            mh$.invokeExact(cg, percentage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cache_entry_expiration$MH() {
        return RuntimeHelper.requireNonNull(constants$284.thinlto_codegen_set_cache_entry_expiration$MH,"thinlto_codegen_set_cache_entry_expiration");
    }
    public static void thinlto_codegen_set_cache_entry_expiration ( Addressable cg,  int expiration) {
        var mh$ = thinlto_codegen_set_cache_entry_expiration$MH();
        try {
            mh$.invokeExact(cg, expiration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cache_size_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$284.thinlto_codegen_set_cache_size_bytes$MH,"thinlto_codegen_set_cache_size_bytes");
    }
    public static void thinlto_codegen_set_cache_size_bytes ( Addressable cg,  int max_size_bytes) {
        var mh$ = thinlto_codegen_set_cache_size_bytes$MH();
        try {
            mh$.invokeExact(cg, max_size_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cache_size_megabytes$MH() {
        return RuntimeHelper.requireNonNull(constants$285.thinlto_codegen_set_cache_size_megabytes$MH,"thinlto_codegen_set_cache_size_megabytes");
    }
    public static void thinlto_codegen_set_cache_size_megabytes ( Addressable cg,  int max_size_megabytes) {
        var mh$ = thinlto_codegen_set_cache_size_megabytes$MH();
        try {
            mh$.invokeExact(cg, max_size_megabytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle thinlto_codegen_set_cache_size_files$MH() {
        return RuntimeHelper.requireNonNull(constants$285.thinlto_codegen_set_cache_size_files$MH,"thinlto_codegen_set_cache_size_files");
    }
    public static void thinlto_codegen_set_cache_size_files ( Addressable cg,  int max_size_files) {
        var mh$ = thinlto_codegen_set_cache_size_files$MH();
        try {
            mh$.invokeExact(cg, max_size_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeTransformUtils$MH() {
        return RuntimeHelper.requireNonNull(constants$285.LLVMInitializeTransformUtils$MH,"LLVMInitializeTransformUtils");
    }
    public static void LLVMInitializeTransformUtils ( Addressable R) {
        var mh$ = LLVMInitializeTransformUtils$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeScalarOpts$MH() {
        return RuntimeHelper.requireNonNull(constants$285.LLVMInitializeScalarOpts$MH,"LLVMInitializeScalarOpts");
    }
    public static void LLVMInitializeScalarOpts ( Addressable R) {
        var mh$ = LLVMInitializeScalarOpts$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeVectorization$MH() {
        return RuntimeHelper.requireNonNull(constants$285.LLVMInitializeVectorization$MH,"LLVMInitializeVectorization");
    }
    public static void LLVMInitializeVectorization ( Addressable R) {
        var mh$ = LLVMInitializeVectorization$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeInstCombine$MH() {
        return RuntimeHelper.requireNonNull(constants$285.LLVMInitializeInstCombine$MH,"LLVMInitializeInstCombine");
    }
    public static void LLVMInitializeInstCombine ( Addressable R) {
        var mh$ = LLVMInitializeInstCombine$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeIPO$MH() {
        return RuntimeHelper.requireNonNull(constants$286.LLVMInitializeIPO$MH,"LLVMInitializeIPO");
    }
    public static void LLVMInitializeIPO ( Addressable R) {
        var mh$ = LLVMInitializeIPO$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAnalysis$MH() {
        return RuntimeHelper.requireNonNull(constants$286.LLVMInitializeAnalysis$MH,"LLVMInitializeAnalysis");
    }
    public static void LLVMInitializeAnalysis ( Addressable R) {
        var mh$ = LLVMInitializeAnalysis$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeIPA$MH() {
        return RuntimeHelper.requireNonNull(constants$286.LLVMInitializeIPA$MH,"LLVMInitializeIPA");
    }
    public static void LLVMInitializeIPA ( Addressable R) {
        var mh$ = LLVMInitializeIPA$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeCodeGen$MH() {
        return RuntimeHelper.requireNonNull(constants$286.LLVMInitializeCodeGen$MH,"LLVMInitializeCodeGen");
    }
    public static void LLVMInitializeCodeGen ( Addressable R) {
        var mh$ = LLVMInitializeCodeGen$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$286.LLVMInitializeTarget$MH,"LLVMInitializeTarget");
    }
    public static void LLVMInitializeTarget ( Addressable R) {
        var mh$ = LLVMInitializeTarget$MH();
        try {
            mh$.invokeExact(R);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMPassBuilderOptionsRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMRunPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$286.LLVMRunPasses$MH,"LLVMRunPasses");
    }
    public static MemoryAddress LLVMRunPasses ( Addressable M,  Addressable Passes,  Addressable TM,  Addressable Options) {
        var mh$ = LLVMRunPasses$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Passes, TM, Options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreatePassBuilderOptions$MH() {
        return RuntimeHelper.requireNonNull(constants$287.LLVMCreatePassBuilderOptions$MH,"LLVMCreatePassBuilderOptions");
    }
    public static MemoryAddress LLVMCreatePassBuilderOptions () {
        var mh$ = LLVMCreatePassBuilderOptions$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetVerifyEach$MH() {
        return RuntimeHelper.requireNonNull(constants$287.LLVMPassBuilderOptionsSetVerifyEach$MH,"LLVMPassBuilderOptionsSetVerifyEach");
    }
    public static void LLVMPassBuilderOptionsSetVerifyEach ( Addressable Options,  int VerifyEach) {
        var mh$ = LLVMPassBuilderOptionsSetVerifyEach$MH();
        try {
            mh$.invokeExact(Options, VerifyEach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetDebugLogging$MH() {
        return RuntimeHelper.requireNonNull(constants$287.LLVMPassBuilderOptionsSetDebugLogging$MH,"LLVMPassBuilderOptionsSetDebugLogging");
    }
    public static void LLVMPassBuilderOptionsSetDebugLogging ( Addressable Options,  int DebugLogging) {
        var mh$ = LLVMPassBuilderOptionsSetDebugLogging$MH();
        try {
            mh$.invokeExact(Options, DebugLogging);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetLoopInterleaving$MH() {
        return RuntimeHelper.requireNonNull(constants$287.LLVMPassBuilderOptionsSetLoopInterleaving$MH,"LLVMPassBuilderOptionsSetLoopInterleaving");
    }
    public static void LLVMPassBuilderOptionsSetLoopInterleaving ( Addressable Options,  int LoopInterleaving) {
        var mh$ = LLVMPassBuilderOptionsSetLoopInterleaving$MH();
        try {
            mh$.invokeExact(Options, LoopInterleaving);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetLoopVectorization$MH() {
        return RuntimeHelper.requireNonNull(constants$287.LLVMPassBuilderOptionsSetLoopVectorization$MH,"LLVMPassBuilderOptionsSetLoopVectorization");
    }
    public static void LLVMPassBuilderOptionsSetLoopVectorization ( Addressable Options,  int LoopVectorization) {
        var mh$ = LLVMPassBuilderOptionsSetLoopVectorization$MH();
        try {
            mh$.invokeExact(Options, LoopVectorization);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetSLPVectorization$MH() {
        return RuntimeHelper.requireNonNull(constants$287.LLVMPassBuilderOptionsSetSLPVectorization$MH,"LLVMPassBuilderOptionsSetSLPVectorization");
    }
    public static void LLVMPassBuilderOptionsSetSLPVectorization ( Addressable Options,  int SLPVectorization) {
        var mh$ = LLVMPassBuilderOptionsSetSLPVectorization$MH();
        try {
            mh$.invokeExact(Options, SLPVectorization);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetLoopUnrolling$MH() {
        return RuntimeHelper.requireNonNull(constants$288.LLVMPassBuilderOptionsSetLoopUnrolling$MH,"LLVMPassBuilderOptionsSetLoopUnrolling");
    }
    public static void LLVMPassBuilderOptionsSetLoopUnrolling ( Addressable Options,  int LoopUnrolling) {
        var mh$ = LLVMPassBuilderOptionsSetLoopUnrolling$MH();
        try {
            mh$.invokeExact(Options, LoopUnrolling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll$MH() {
        return RuntimeHelper.requireNonNull(constants$288.LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll$MH,"LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll");
    }
    public static void LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll ( Addressable Options,  int ForgetAllSCEVInLoopUnroll) {
        var mh$ = LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll$MH();
        try {
            mh$.invokeExact(Options, ForgetAllSCEVInLoopUnroll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetLicmMssaOptCap$MH() {
        return RuntimeHelper.requireNonNull(constants$288.LLVMPassBuilderOptionsSetLicmMssaOptCap$MH,"LLVMPassBuilderOptionsSetLicmMssaOptCap");
    }
    public static void LLVMPassBuilderOptionsSetLicmMssaOptCap ( Addressable Options,  int LicmMssaOptCap) {
        var mh$ = LLVMPassBuilderOptionsSetLicmMssaOptCap$MH();
        try {
            mh$.invokeExact(Options, LicmMssaOptCap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap$MH() {
        return RuntimeHelper.requireNonNull(constants$288.LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap$MH,"LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap");
    }
    public static void LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap ( Addressable Options,  int LicmMssaNoAccForPromotionCap) {
        var mh$ = LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap$MH();
        try {
            mh$.invokeExact(Options, LicmMssaNoAccForPromotionCap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetCallGraphProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$288.LLVMPassBuilderOptionsSetCallGraphProfile$MH,"LLVMPassBuilderOptionsSetCallGraphProfile");
    }
    public static void LLVMPassBuilderOptionsSetCallGraphProfile ( Addressable Options,  int CallGraphProfile) {
        var mh$ = LLVMPassBuilderOptionsSetCallGraphProfile$MH();
        try {
            mh$.invokeExact(Options, CallGraphProfile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPassBuilderOptionsSetMergeFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$288.LLVMPassBuilderOptionsSetMergeFunctions$MH,"LLVMPassBuilderOptionsSetMergeFunctions");
    }
    public static void LLVMPassBuilderOptionsSetMergeFunctions ( Addressable Options,  int MergeFunctions) {
        var mh$ = LLVMPassBuilderOptionsSetMergeFunctions$MH();
        try {
            mh$.invokeExact(Options, MergeFunctions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposePassBuilderOptions$MH() {
        return RuntimeHelper.requireNonNull(constants$289.LLVMDisposePassBuilderOptions$MH,"LLVMDisposePassBuilderOptions");
    }
    public static void LLVMDisposePassBuilderOptions ( Addressable Options) {
        var mh$ = LLVMDisposePassBuilderOptions$MH();
        try {
            mh$.invokeExact(Options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLoopVectorizePass$MH() {
        return RuntimeHelper.requireNonNull(constants$289.LLVMAddLoopVectorizePass$MH,"LLVMAddLoopVectorizePass");
    }
    public static void LLVMAddLoopVectorizePass ( Addressable PM) {
        var mh$ = LLVMAddLoopVectorizePass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddSLPVectorizePass$MH() {
        return RuntimeHelper.requireNonNull(constants$289.LLVMAddSLPVectorizePass$MH,"LLVMAddSLPVectorizePass");
    }
    public static void LLVMAddSLPVectorizePass ( Addressable PM) {
        var mh$ = LLVMAddSLPVectorizePass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddConstantMergePass$MH() {
        return RuntimeHelper.requireNonNull(constants$289.LLVMAddConstantMergePass$MH,"LLVMAddConstantMergePass");
    }
    public static void LLVMAddConstantMergePass ( Addressable PM) {
        var mh$ = LLVMAddConstantMergePass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddDeadArgEliminationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$289.LLVMAddDeadArgEliminationPass$MH,"LLVMAddDeadArgEliminationPass");
    }
    public static void LLVMAddDeadArgEliminationPass ( Addressable PM) {
        var mh$ = LLVMAddDeadArgEliminationPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddFunctionAttrsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$289.LLVMAddFunctionAttrsPass$MH,"LLVMAddFunctionAttrsPass");
    }
    public static void LLVMAddFunctionAttrsPass ( Addressable PM) {
        var mh$ = LLVMAddFunctionAttrsPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAlwaysInlinerPass$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LLVMAddAlwaysInlinerPass$MH,"LLVMAddAlwaysInlinerPass");
    }
    public static void LLVMAddAlwaysInlinerPass ( Addressable PM) {
        var mh$ = LLVMAddAlwaysInlinerPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddGlobalDCEPass$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LLVMAddGlobalDCEPass$MH,"LLVMAddGlobalDCEPass");
    }
    public static void LLVMAddGlobalDCEPass ( Addressable PM) {
        var mh$ = LLVMAddGlobalDCEPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMLoadLibraryPermanently$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LLVMLoadLibraryPermanently$MH,"LLVMLoadLibraryPermanently");
    }
    public static int LLVMLoadLibraryPermanently ( Addressable Filename) {
        var mh$ = LLVMLoadLibraryPermanently$MH();
        try {
            return (int)mh$.invokeExact(Filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMParseCommandLineOptions$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LLVMParseCommandLineOptions$MH,"LLVMParseCommandLineOptions");
    }
    public static void LLVMParseCommandLineOptions ( int argc,  Addressable argv,  Addressable Overview) {
        var mh$ = LLVMParseCommandLineOptions$MH();
        try {
            mh$.invokeExact(argc, argv, Overview);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSearchForAddressOfSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LLVMSearchForAddressOfSymbol$MH,"LLVMSearchForAddressOfSymbol");
    }
    public static MemoryAddress LLVMSearchForAddressOfSymbol ( Addressable symbolName) {
        var mh$ = LLVMSearchForAddressOfSymbol$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(symbolName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$290.LLVMAddSymbol$MH,"LLVMAddSymbol");
    }
    public static void LLVMAddSymbol ( Addressable symbolName,  Addressable symbolValue) {
        var mh$ = LLVMAddSymbol$MH();
        try {
            mh$.invokeExact(symbolName, symbolValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__pdl__$MH() {
        return RuntimeHelper.requireNonNull(constants$291.mlirGetDialectHandle__pdl__$MH,"mlirGetDialectHandle__pdl__");
    }
    public static MemorySegment mlirGetDialectHandle__pdl__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__pdl__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAPDLType$MH() {
        return RuntimeHelper.requireNonNull(constants$291.mlirTypeIsAPDLType$MH,"mlirTypeIsAPDLType");
    }
    public static boolean mlirTypeIsAPDLType ( MemorySegment type) {
        var mh$ = mlirTypeIsAPDLType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAPDLAttributeType$MH() {
        return RuntimeHelper.requireNonNull(constants$291.mlirTypeIsAPDLAttributeType$MH,"mlirTypeIsAPDLAttributeType");
    }
    public static boolean mlirTypeIsAPDLAttributeType ( MemorySegment type) {
        var mh$ = mlirTypeIsAPDLAttributeType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPDLAttributeTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$291.mlirPDLAttributeTypeGet$MH,"mlirPDLAttributeTypeGet");
    }
    public static MemorySegment mlirPDLAttributeTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirPDLAttributeTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAPDLOperationType$MH() {
        return RuntimeHelper.requireNonNull(constants$291.mlirTypeIsAPDLOperationType$MH,"mlirTypeIsAPDLOperationType");
    }
    public static boolean mlirTypeIsAPDLOperationType ( MemorySegment type) {
        var mh$ = mlirTypeIsAPDLOperationType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPDLOperationTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$291.mlirPDLOperationTypeGet$MH,"mlirPDLOperationTypeGet");
    }
    public static MemorySegment mlirPDLOperationTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirPDLOperationTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAPDLRangeType$MH() {
        return RuntimeHelper.requireNonNull(constants$292.mlirTypeIsAPDLRangeType$MH,"mlirTypeIsAPDLRangeType");
    }
    public static boolean mlirTypeIsAPDLRangeType ( MemorySegment type) {
        var mh$ = mlirTypeIsAPDLRangeType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPDLRangeTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$292.mlirPDLRangeTypeGet$MH,"mlirPDLRangeTypeGet");
    }
    public static MemorySegment mlirPDLRangeTypeGet ( SegmentAllocator allocator,  MemorySegment elementType) {
        var mh$ = mlirPDLRangeTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPDLRangeTypeGetElementType$MH() {
        return RuntimeHelper.requireNonNull(constants$292.mlirPDLRangeTypeGetElementType$MH,"mlirPDLRangeTypeGetElementType");
    }
    public static MemorySegment mlirPDLRangeTypeGetElementType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirPDLRangeTypeGetElementType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAPDLTypeType$MH() {
        return RuntimeHelper.requireNonNull(constants$292.mlirTypeIsAPDLTypeType$MH,"mlirTypeIsAPDLTypeType");
    }
    public static boolean mlirTypeIsAPDLTypeType ( MemorySegment type) {
        var mh$ = mlirTypeIsAPDLTypeType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPDLTypeTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$292.mlirPDLTypeTypeGet$MH,"mlirPDLTypeTypeGet");
    }
    public static MemorySegment mlirPDLTypeTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirPDLTypeTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAPDLValueType$MH() {
        return RuntimeHelper.requireNonNull(constants$292.mlirTypeIsAPDLValueType$MH,"mlirTypeIsAPDLValueType");
    }
    public static boolean mlirTypeIsAPDLValueType ( MemorySegment type) {
        var mh$ = mlirTypeIsAPDLValueType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirPDLValueTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$293.mlirPDLValueTypeGet$MH,"mlirPDLValueTypeGet");
    }
    public static MemorySegment mlirPDLValueTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirPDLValueTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$293.mlirExecutionEngineCreate$MH,"mlirExecutionEngineCreate");
    }
    public static MemorySegment mlirExecutionEngineCreate ( SegmentAllocator allocator,  MemorySegment op,  int optLevel,  int numPaths,  Addressable sharedLibPaths,  boolean enableObjectDump) {
        var mh$ = mlirExecutionEngineCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, optLevel, numPaths, sharedLibPaths, enableObjectDump);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$293.mlirExecutionEngineDestroy$MH,"mlirExecutionEngineDestroy");
    }
    public static void mlirExecutionEngineDestroy ( MemorySegment jit) {
        var mh$ = mlirExecutionEngineDestroy$MH();
        try {
            mh$.invokeExact(jit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$293.mlirExecutionEngineIsNull$MH,"mlirExecutionEngineIsNull");
    }
    public static boolean mlirExecutionEngineIsNull ( MemorySegment jit) {
        var mh$ = mlirExecutionEngineIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(jit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineInvokePacked$MH() {
        return RuntimeHelper.requireNonNull(constants$293.mlirExecutionEngineInvokePacked$MH,"mlirExecutionEngineInvokePacked");
    }
    public static MemorySegment mlirExecutionEngineInvokePacked ( SegmentAllocator allocator,  MemorySegment jit,  MemorySegment name,  Addressable arguments) {
        var mh$ = mlirExecutionEngineInvokePacked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, jit, name, arguments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineLookupPacked$MH() {
        return RuntimeHelper.requireNonNull(constants$293.mlirExecutionEngineLookupPacked$MH,"mlirExecutionEngineLookupPacked");
    }
    public static MemoryAddress mlirExecutionEngineLookupPacked ( MemorySegment jit,  MemorySegment name) {
        var mh$ = mlirExecutionEngineLookupPacked$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(jit, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineLookup$MH() {
        return RuntimeHelper.requireNonNull(constants$294.mlirExecutionEngineLookup$MH,"mlirExecutionEngineLookup");
    }
    public static MemoryAddress mlirExecutionEngineLookup ( MemorySegment jit,  MemorySegment name) {
        var mh$ = mlirExecutionEngineLookup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(jit, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineRegisterSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$294.mlirExecutionEngineRegisterSymbol$MH,"mlirExecutionEngineRegisterSymbol");
    }
    public static void mlirExecutionEngineRegisterSymbol ( MemorySegment jit,  MemorySegment name,  Addressable sym) {
        var mh$ = mlirExecutionEngineRegisterSymbol$MH();
        try {
            mh$.invokeExact(jit, name, sym);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirExecutionEngineDumpToObjectFile$MH() {
        return RuntimeHelper.requireNonNull(constants$294.mlirExecutionEngineDumpToObjectFile$MH,"mlirExecutionEngineDumpToObjectFile");
    }
    public static void mlirExecutionEngineDumpToObjectFile ( MemorySegment jit,  MemorySegment fileName) {
        var mh$ = mlirExecutionEngineDumpToObjectFile$MH();
        try {
            mh$.invokeExact(jit, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMParseBitcode$MH() {
        return RuntimeHelper.requireNonNull(constants$294.LLVMParseBitcode$MH,"LLVMParseBitcode");
    }
    public static int LLVMParseBitcode ( Addressable MemBuf,  Addressable OutModule,  Addressable OutMessage) {
        var mh$ = LLVMParseBitcode$MH();
        try {
            return (int)mh$.invokeExact(MemBuf, OutModule, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMParseBitcode2$MH() {
        return RuntimeHelper.requireNonNull(constants$294.LLVMParseBitcode2$MH,"LLVMParseBitcode2");
    }
    public static int LLVMParseBitcode2 ( Addressable MemBuf,  Addressable OutModule) {
        var mh$ = LLVMParseBitcode2$MH();
        try {
            return (int)mh$.invokeExact(MemBuf, OutModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMParseBitcodeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$294.LLVMParseBitcodeInContext$MH,"LLVMParseBitcodeInContext");
    }
    public static int LLVMParseBitcodeInContext ( Addressable ContextRef,  Addressable MemBuf,  Addressable OutModule,  Addressable OutMessage) {
        var mh$ = LLVMParseBitcodeInContext$MH();
        try {
            return (int)mh$.invokeExact(ContextRef, MemBuf, OutModule, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMParseBitcodeInContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$295.LLVMParseBitcodeInContext2$MH,"LLVMParseBitcodeInContext2");
    }
    public static int LLVMParseBitcodeInContext2 ( Addressable ContextRef,  Addressable MemBuf,  Addressable OutModule) {
        var mh$ = LLVMParseBitcodeInContext2$MH();
        try {
            return (int)mh$.invokeExact(ContextRef, MemBuf, OutModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBitcodeModuleInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$295.LLVMGetBitcodeModuleInContext$MH,"LLVMGetBitcodeModuleInContext");
    }
    public static int LLVMGetBitcodeModuleInContext ( Addressable ContextRef,  Addressable MemBuf,  Addressable OutM,  Addressable OutMessage) {
        var mh$ = LLVMGetBitcodeModuleInContext$MH();
        try {
            return (int)mh$.invokeExact(ContextRef, MemBuf, OutM, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBitcodeModuleInContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$295.LLVMGetBitcodeModuleInContext2$MH,"LLVMGetBitcodeModuleInContext2");
    }
    public static int LLVMGetBitcodeModuleInContext2 ( Addressable ContextRef,  Addressable MemBuf,  Addressable OutM) {
        var mh$ = LLVMGetBitcodeModuleInContext2$MH();
        try {
            return (int)mh$.invokeExact(ContextRef, MemBuf, OutM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBitcodeModule$MH() {
        return RuntimeHelper.requireNonNull(constants$295.LLVMGetBitcodeModule$MH,"LLVMGetBitcodeModule");
    }
    public static int LLVMGetBitcodeModule ( Addressable MemBuf,  Addressable OutM,  Addressable OutMessage) {
        var mh$ = LLVMGetBitcodeModule$MH();
        try {
            return (int)mh$.invokeExact(MemBuf, OutM, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetBitcodeModule2$MH() {
        return RuntimeHelper.requireNonNull(constants$295.LLVMGetBitcodeModule2$MH,"LLVMGetBitcodeModule2");
    }
    public static int LLVMGetBitcodeModule2 ( Addressable MemBuf,  Addressable OutM) {
        var mh$ = LLVMGetBitcodeModule2$MH();
        try {
            return (int)mh$.invokeExact(MemBuf, OutM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMWriteBitcodeToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$295.LLVMWriteBitcodeToFile$MH,"LLVMWriteBitcodeToFile");
    }
    public static int LLVMWriteBitcodeToFile ( Addressable M,  Addressable Path) {
        var mh$ = LLVMWriteBitcodeToFile$MH();
        try {
            return (int)mh$.invokeExact(M, Path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMWriteBitcodeToFD$MH() {
        return RuntimeHelper.requireNonNull(constants$296.LLVMWriteBitcodeToFD$MH,"LLVMWriteBitcodeToFD");
    }
    public static int LLVMWriteBitcodeToFD ( Addressable M,  int FD,  int ShouldClose,  int Unbuffered) {
        var mh$ = LLVMWriteBitcodeToFD$MH();
        try {
            return (int)mh$.invokeExact(M, FD, ShouldClose, Unbuffered);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMWriteBitcodeToFileHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$296.LLVMWriteBitcodeToFileHandle$MH,"LLVMWriteBitcodeToFileHandle");
    }
    public static int LLVMWriteBitcodeToFileHandle ( Addressable M,  int Handle) {
        var mh$ = LLVMWriteBitcodeToFileHandle$MH();
        try {
            return (int)mh$.invokeExact(M, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMWriteBitcodeToMemoryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$296.LLVMWriteBitcodeToMemoryBuffer$MH,"LLVMWriteBitcodeToMemoryBuffer");
    }
    public static MemoryAddress LLVMWriteBitcodeToMemoryBuffer ( Addressable M) {
        var mh$ = LLVMWriteBitcodeToMemoryBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__quant__$MH() {
        return RuntimeHelper.requireNonNull(constants$296.mlirGetDialectHandle__quant__$MH,"mlirGetDialectHandle__quant__");
    }
    public static MemorySegment mlirGetDialectHandle__quant__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__quant__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAQuantizedType$MH() {
        return RuntimeHelper.requireNonNull(constants$296.mlirTypeIsAQuantizedType$MH,"mlirTypeIsAQuantizedType");
    }
    public static boolean mlirTypeIsAQuantizedType ( MemorySegment type) {
        var mh$ = mlirTypeIsAQuantizedType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetSignedFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$296.mlirQuantizedTypeGetSignedFlag$MH,"mlirQuantizedTypeGetSignedFlag");
    }
    public static int mlirQuantizedTypeGetSignedFlag () {
        var mh$ = mlirQuantizedTypeGetSignedFlag$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetDefaultMinimumForInteger$MH() {
        return RuntimeHelper.requireNonNull(constants$297.mlirQuantizedTypeGetDefaultMinimumForInteger$MH,"mlirQuantizedTypeGetDefaultMinimumForInteger");
    }
    public static long mlirQuantizedTypeGetDefaultMinimumForInteger ( boolean isSigned,  int integralWidth) {
        var mh$ = mlirQuantizedTypeGetDefaultMinimumForInteger$MH();
        try {
            return (long)mh$.invokeExact(isSigned, integralWidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetDefaultMaximumForInteger$MH() {
        return RuntimeHelper.requireNonNull(constants$297.mlirQuantizedTypeGetDefaultMaximumForInteger$MH,"mlirQuantizedTypeGetDefaultMaximumForInteger");
    }
    public static long mlirQuantizedTypeGetDefaultMaximumForInteger ( boolean isSigned,  int integralWidth) {
        var mh$ = mlirQuantizedTypeGetDefaultMaximumForInteger$MH();
        try {
            return (long)mh$.invokeExact(isSigned, integralWidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetExpressedType$MH() {
        return RuntimeHelper.requireNonNull(constants$297.mlirQuantizedTypeGetExpressedType$MH,"mlirQuantizedTypeGetExpressedType");
    }
    public static MemorySegment mlirQuantizedTypeGetExpressedType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetExpressedType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$297.mlirQuantizedTypeGetFlags$MH,"mlirQuantizedTypeGetFlags");
    }
    public static int mlirQuantizedTypeGetFlags ( MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetFlags$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeIsSigned$MH() {
        return RuntimeHelper.requireNonNull(constants$297.mlirQuantizedTypeIsSigned$MH,"mlirQuantizedTypeIsSigned");
    }
    public static boolean mlirQuantizedTypeIsSigned ( MemorySegment type) {
        var mh$ = mlirQuantizedTypeIsSigned$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetStorageType$MH() {
        return RuntimeHelper.requireNonNull(constants$297.mlirQuantizedTypeGetStorageType$MH,"mlirQuantizedTypeGetStorageType");
    }
    public static MemorySegment mlirQuantizedTypeGetStorageType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetStorageType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetStorageTypeMin$MH() {
        return RuntimeHelper.requireNonNull(constants$298.mlirQuantizedTypeGetStorageTypeMin$MH,"mlirQuantizedTypeGetStorageTypeMin");
    }
    public static long mlirQuantizedTypeGetStorageTypeMin ( MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetStorageTypeMin$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetStorageTypeMax$MH() {
        return RuntimeHelper.requireNonNull(constants$298.mlirQuantizedTypeGetStorageTypeMax$MH,"mlirQuantizedTypeGetStorageTypeMax");
    }
    public static long mlirQuantizedTypeGetStorageTypeMax ( MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetStorageTypeMax$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetStorageTypeIntegralWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$298.mlirQuantizedTypeGetStorageTypeIntegralWidth$MH,"mlirQuantizedTypeGetStorageTypeIntegralWidth");
    }
    public static int mlirQuantizedTypeGetStorageTypeIntegralWidth ( MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetStorageTypeIntegralWidth$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeIsCompatibleExpressedType$MH() {
        return RuntimeHelper.requireNonNull(constants$298.mlirQuantizedTypeIsCompatibleExpressedType$MH,"mlirQuantizedTypeIsCompatibleExpressedType");
    }
    public static boolean mlirQuantizedTypeIsCompatibleExpressedType ( MemorySegment type,  MemorySegment candidate) {
        var mh$ = mlirQuantizedTypeIsCompatibleExpressedType$MH();
        try {
            return (boolean)mh$.invokeExact(type, candidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeGetQuantizedElementType$MH() {
        return RuntimeHelper.requireNonNull(constants$298.mlirQuantizedTypeGetQuantizedElementType$MH,"mlirQuantizedTypeGetQuantizedElementType");
    }
    public static MemorySegment mlirQuantizedTypeGetQuantizedElementType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirQuantizedTypeGetQuantizedElementType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeCastFromStorageType$MH() {
        return RuntimeHelper.requireNonNull(constants$298.mlirQuantizedTypeCastFromStorageType$MH,"mlirQuantizedTypeCastFromStorageType");
    }
    public static MemorySegment mlirQuantizedTypeCastFromStorageType ( SegmentAllocator allocator,  MemorySegment type,  MemorySegment candidate) {
        var mh$ = mlirQuantizedTypeCastFromStorageType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, candidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeCastToStorageType$MH() {
        return RuntimeHelper.requireNonNull(constants$299.mlirQuantizedTypeCastToStorageType$MH,"mlirQuantizedTypeCastToStorageType");
    }
    public static MemorySegment mlirQuantizedTypeCastToStorageType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirQuantizedTypeCastToStorageType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeCastFromExpressedType$MH() {
        return RuntimeHelper.requireNonNull(constants$299.mlirQuantizedTypeCastFromExpressedType$MH,"mlirQuantizedTypeCastFromExpressedType");
    }
    public static MemorySegment mlirQuantizedTypeCastFromExpressedType ( SegmentAllocator allocator,  MemorySegment type,  MemorySegment candidate) {
        var mh$ = mlirQuantizedTypeCastFromExpressedType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, candidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeCastToExpressedType$MH() {
        return RuntimeHelper.requireNonNull(constants$299.mlirQuantizedTypeCastToExpressedType$MH,"mlirQuantizedTypeCastToExpressedType");
    }
    public static MemorySegment mlirQuantizedTypeCastToExpressedType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirQuantizedTypeCastToExpressedType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirQuantizedTypeCastExpressedToStorageType$MH() {
        return RuntimeHelper.requireNonNull(constants$299.mlirQuantizedTypeCastExpressedToStorageType$MH,"mlirQuantizedTypeCastExpressedToStorageType");
    }
    public static MemorySegment mlirQuantizedTypeCastExpressedToStorageType ( SegmentAllocator allocator,  MemorySegment type,  MemorySegment candidate) {
        var mh$ = mlirQuantizedTypeCastExpressedToStorageType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, candidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAAnyQuantizedType$MH() {
        return RuntimeHelper.requireNonNull(constants$299.mlirTypeIsAAnyQuantizedType$MH,"mlirTypeIsAAnyQuantizedType");
    }
    public static boolean mlirTypeIsAAnyQuantizedType ( MemorySegment type) {
        var mh$ = mlirTypeIsAAnyQuantizedType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAnyQuantizedTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$299.mlirAnyQuantizedTypeGet$MH,"mlirAnyQuantizedTypeGet");
    }
    public static MemorySegment mlirAnyQuantizedTypeGet ( SegmentAllocator allocator,  int flags,  MemorySegment storageType,  MemorySegment expressedType,  long storageTypeMin,  long storageTypeMax) {
        var mh$ = mlirAnyQuantizedTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, flags, storageType, expressedType, storageTypeMin, storageTypeMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAUniformQuantizedType$MH() {
        return RuntimeHelper.requireNonNull(constants$300.mlirTypeIsAUniformQuantizedType$MH,"mlirTypeIsAUniformQuantizedType");
    }
    public static boolean mlirTypeIsAUniformQuantizedType ( MemorySegment type) {
        var mh$ = mlirTypeIsAUniformQuantizedType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$300.mlirUniformQuantizedTypeGet$MH,"mlirUniformQuantizedTypeGet");
    }
    public static MemorySegment mlirUniformQuantizedTypeGet ( SegmentAllocator allocator,  int flags,  MemorySegment storageType,  MemorySegment expressedType,  double scale,  long zeroPoint,  long storageTypeMin,  long storageTypeMax) {
        var mh$ = mlirUniformQuantizedTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, flags, storageType, expressedType, scale, zeroPoint, storageTypeMin, storageTypeMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedTypeGetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$300.mlirUniformQuantizedTypeGetScale$MH,"mlirUniformQuantizedTypeGetScale");
    }
    public static double mlirUniformQuantizedTypeGetScale ( MemorySegment type) {
        var mh$ = mlirUniformQuantizedTypeGetScale$MH();
        try {
            return (double)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedTypeGetZeroPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$300.mlirUniformQuantizedTypeGetZeroPoint$MH,"mlirUniformQuantizedTypeGetZeroPoint");
    }
    public static long mlirUniformQuantizedTypeGetZeroPoint ( MemorySegment type) {
        var mh$ = mlirUniformQuantizedTypeGetZeroPoint$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedTypeIsFixedPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$300.mlirUniformQuantizedTypeIsFixedPoint$MH,"mlirUniformQuantizedTypeIsFixedPoint");
    }
    public static boolean mlirUniformQuantizedTypeIsFixedPoint ( MemorySegment type) {
        var mh$ = mlirUniformQuantizedTypeIsFixedPoint$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAUniformQuantizedPerAxisType$MH() {
        return RuntimeHelper.requireNonNull(constants$300.mlirTypeIsAUniformQuantizedPerAxisType$MH,"mlirTypeIsAUniformQuantizedPerAxisType");
    }
    public static boolean mlirTypeIsAUniformQuantizedPerAxisType ( MemorySegment type) {
        var mh$ = mlirTypeIsAUniformQuantizedPerAxisType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedPerAxisTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$301.mlirUniformQuantizedPerAxisTypeGet$MH,"mlirUniformQuantizedPerAxisTypeGet");
    }
    public static MemorySegment mlirUniformQuantizedPerAxisTypeGet ( SegmentAllocator allocator,  int flags,  MemorySegment storageType,  MemorySegment expressedType,  long nDims,  Addressable scales,  Addressable zeroPoints,  int quantizedDimension,  long storageTypeMin,  long storageTypeMax) {
        var mh$ = mlirUniformQuantizedPerAxisTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, flags, storageType, expressedType, nDims, scales, zeroPoints, quantizedDimension, storageTypeMin, storageTypeMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedPerAxisTypeGetNumDims$MH() {
        return RuntimeHelper.requireNonNull(constants$301.mlirUniformQuantizedPerAxisTypeGetNumDims$MH,"mlirUniformQuantizedPerAxisTypeGetNumDims");
    }
    public static long mlirUniformQuantizedPerAxisTypeGetNumDims ( MemorySegment type) {
        var mh$ = mlirUniformQuantizedPerAxisTypeGetNumDims$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedPerAxisTypeGetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$301.mlirUniformQuantizedPerAxisTypeGetScale$MH,"mlirUniformQuantizedPerAxisTypeGetScale");
    }
    public static double mlirUniformQuantizedPerAxisTypeGetScale ( MemorySegment type,  long pos) {
        var mh$ = mlirUniformQuantizedPerAxisTypeGetScale$MH();
        try {
            return (double)mh$.invokeExact(type, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedPerAxisTypeGetZeroPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$301.mlirUniformQuantizedPerAxisTypeGetZeroPoint$MH,"mlirUniformQuantizedPerAxisTypeGetZeroPoint");
    }
    public static long mlirUniformQuantizedPerAxisTypeGetZeroPoint ( MemorySegment type,  long pos) {
        var mh$ = mlirUniformQuantizedPerAxisTypeGetZeroPoint$MH();
        try {
            return (long)mh$.invokeExact(type, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedPerAxisTypeGetQuantizedDimension$MH() {
        return RuntimeHelper.requireNonNull(constants$301.mlirUniformQuantizedPerAxisTypeGetQuantizedDimension$MH,"mlirUniformQuantizedPerAxisTypeGetQuantizedDimension");
    }
    public static int mlirUniformQuantizedPerAxisTypeGetQuantizedDimension ( MemorySegment type) {
        var mh$ = mlirUniformQuantizedPerAxisTypeGetQuantizedDimension$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUniformQuantizedPerAxisTypeIsFixedPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$301.mlirUniformQuantizedPerAxisTypeIsFixedPoint$MH,"mlirUniformQuantizedPerAxisTypeIsFixedPoint");
    }
    public static boolean mlirUniformQuantizedPerAxisTypeIsFixedPoint ( MemorySegment type) {
        var mh$ = mlirUniformQuantizedPerAxisTypeIsFixedPoint$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsACalibratedQuantizedType$MH() {
        return RuntimeHelper.requireNonNull(constants$302.mlirTypeIsACalibratedQuantizedType$MH,"mlirTypeIsACalibratedQuantizedType");
    }
    public static boolean mlirTypeIsACalibratedQuantizedType ( MemorySegment type) {
        var mh$ = mlirTypeIsACalibratedQuantizedType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCalibratedQuantizedTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$302.mlirCalibratedQuantizedTypeGet$MH,"mlirCalibratedQuantizedTypeGet");
    }
    public static MemorySegment mlirCalibratedQuantizedTypeGet ( SegmentAllocator allocator,  MemorySegment expressedType,  double min,  double max) {
        var mh$ = mlirCalibratedQuantizedTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, expressedType, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCalibratedQuantizedTypeGetMin$MH() {
        return RuntimeHelper.requireNonNull(constants$302.mlirCalibratedQuantizedTypeGetMin$MH,"mlirCalibratedQuantizedTypeGetMin");
    }
    public static double mlirCalibratedQuantizedTypeGetMin ( MemorySegment type) {
        var mh$ = mlirCalibratedQuantizedTypeGetMin$MH();
        try {
            return (double)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCalibratedQuantizedTypeGetMax$MH() {
        return RuntimeHelper.requireNonNull(constants$302.mlirCalibratedQuantizedTypeGetMax$MH,"mlirCalibratedQuantizedTypeGetMax");
    }
    public static double mlirCalibratedQuantizedTypeGetMax ( MemorySegment type) {
        var mh$ = mlirCalibratedQuantizedTypeGetMax$MH();
        try {
            return (double)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAggressiveDCEPass$MH() {
        return RuntimeHelper.requireNonNull(constants$302.LLVMAddAggressiveDCEPass$MH,"LLVMAddAggressiveDCEPass");
    }
    public static void LLVMAddAggressiveDCEPass ( Addressable PM) {
        var mh$ = LLVMAddAggressiveDCEPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddDCEPass$MH() {
        return RuntimeHelper.requireNonNull(constants$302.LLVMAddDCEPass$MH,"LLVMAddDCEPass");
    }
    public static void LLVMAddDCEPass ( Addressable PM) {
        var mh$ = LLVMAddDCEPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddBitTrackingDCEPass$MH() {
        return RuntimeHelper.requireNonNull(constants$303.LLVMAddBitTrackingDCEPass$MH,"LLVMAddBitTrackingDCEPass");
    }
    public static void LLVMAddBitTrackingDCEPass ( Addressable PM) {
        var mh$ = LLVMAddBitTrackingDCEPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddAlignmentFromAssumptionsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$303.LLVMAddAlignmentFromAssumptionsPass$MH,"LLVMAddAlignmentFromAssumptionsPass");
    }
    public static void LLVMAddAlignmentFromAssumptionsPass ( Addressable PM) {
        var mh$ = LLVMAddAlignmentFromAssumptionsPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddCFGSimplificationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$303.LLVMAddCFGSimplificationPass$MH,"LLVMAddCFGSimplificationPass");
    }
    public static void LLVMAddCFGSimplificationPass ( Addressable PM) {
        var mh$ = LLVMAddCFGSimplificationPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddDeadStoreEliminationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$303.LLVMAddDeadStoreEliminationPass$MH,"LLVMAddDeadStoreEliminationPass");
    }
    public static void LLVMAddDeadStoreEliminationPass ( Addressable PM) {
        var mh$ = LLVMAddDeadStoreEliminationPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddScalarizerPass$MH() {
        return RuntimeHelper.requireNonNull(constants$303.LLVMAddScalarizerPass$MH,"LLVMAddScalarizerPass");
    }
    public static void LLVMAddScalarizerPass ( Addressable PM) {
        var mh$ = LLVMAddScalarizerPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddMergedLoadStoreMotionPass$MH() {
        return RuntimeHelper.requireNonNull(constants$303.LLVMAddMergedLoadStoreMotionPass$MH,"LLVMAddMergedLoadStoreMotionPass");
    }
    public static void LLVMAddMergedLoadStoreMotionPass ( Addressable PM) {
        var mh$ = LLVMAddMergedLoadStoreMotionPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddGVNPass$MH() {
        return RuntimeHelper.requireNonNull(constants$304.LLVMAddGVNPass$MH,"LLVMAddGVNPass");
    }
    public static void LLVMAddGVNPass ( Addressable PM) {
        var mh$ = LLVMAddGVNPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddNewGVNPass$MH() {
        return RuntimeHelper.requireNonNull(constants$304.LLVMAddNewGVNPass$MH,"LLVMAddNewGVNPass");
    }
    public static void LLVMAddNewGVNPass ( Addressable PM) {
        var mh$ = LLVMAddNewGVNPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddIndVarSimplifyPass$MH() {
        return RuntimeHelper.requireNonNull(constants$304.LLVMAddIndVarSimplifyPass$MH,"LLVMAddIndVarSimplifyPass");
    }
    public static void LLVMAddIndVarSimplifyPass ( Addressable PM) {
        var mh$ = LLVMAddIndVarSimplifyPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddInstructionSimplifyPass$MH() {
        return RuntimeHelper.requireNonNull(constants$304.LLVMAddInstructionSimplifyPass$MH,"LLVMAddInstructionSimplifyPass");
    }
    public static void LLVMAddInstructionSimplifyPass ( Addressable PM) {
        var mh$ = LLVMAddInstructionSimplifyPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddJumpThreadingPass$MH() {
        return RuntimeHelper.requireNonNull(constants$304.LLVMAddJumpThreadingPass$MH,"LLVMAddJumpThreadingPass");
    }
    public static void LLVMAddJumpThreadingPass ( Addressable PM) {
        var mh$ = LLVMAddJumpThreadingPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLICMPass$MH() {
        return RuntimeHelper.requireNonNull(constants$304.LLVMAddLICMPass$MH,"LLVMAddLICMPass");
    }
    public static void LLVMAddLICMPass ( Addressable PM) {
        var mh$ = LLVMAddLICMPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLoopRotatePass$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LLVMAddLoopRotatePass$MH,"LLVMAddLoopRotatePass");
    }
    public static void LLVMAddLoopRotatePass ( Addressable PM) {
        var mh$ = LLVMAddLoopRotatePass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLoopUnrollPass$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LLVMAddLoopUnrollPass$MH,"LLVMAddLoopUnrollPass");
    }
    public static void LLVMAddLoopUnrollPass ( Addressable PM) {
        var mh$ = LLVMAddLoopUnrollPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLowerAtomicPass$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LLVMAddLowerAtomicPass$MH,"LLVMAddLowerAtomicPass");
    }
    public static void LLVMAddLowerAtomicPass ( Addressable PM) {
        var mh$ = LLVMAddLowerAtomicPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddMemCpyOptPass$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LLVMAddMemCpyOptPass$MH,"LLVMAddMemCpyOptPass");
    }
    public static void LLVMAddMemCpyOptPass ( Addressable PM) {
        var mh$ = LLVMAddMemCpyOptPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddPartiallyInlineLibCallsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LLVMAddPartiallyInlineLibCallsPass$MH,"LLVMAddPartiallyInlineLibCallsPass");
    }
    public static void LLVMAddPartiallyInlineLibCallsPass ( Addressable PM) {
        var mh$ = LLVMAddPartiallyInlineLibCallsPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddReassociatePass$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LLVMAddReassociatePass$MH,"LLVMAddReassociatePass");
    }
    public static void LLVMAddReassociatePass ( Addressable PM) {
        var mh$ = LLVMAddReassociatePass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddScalarReplAggregatesPass$MH() {
        return RuntimeHelper.requireNonNull(constants$306.LLVMAddScalarReplAggregatesPass$MH,"LLVMAddScalarReplAggregatesPass");
    }
    public static void LLVMAddScalarReplAggregatesPass ( Addressable PM) {
        var mh$ = LLVMAddScalarReplAggregatesPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddScalarReplAggregatesPassSSA$MH() {
        return RuntimeHelper.requireNonNull(constants$306.LLVMAddScalarReplAggregatesPassSSA$MH,"LLVMAddScalarReplAggregatesPassSSA");
    }
    public static void LLVMAddScalarReplAggregatesPassSSA ( Addressable PM) {
        var mh$ = LLVMAddScalarReplAggregatesPassSSA$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddScalarReplAggregatesPassWithThreshold$MH() {
        return RuntimeHelper.requireNonNull(constants$306.LLVMAddScalarReplAggregatesPassWithThreshold$MH,"LLVMAddScalarReplAggregatesPassWithThreshold");
    }
    public static void LLVMAddScalarReplAggregatesPassWithThreshold ( Addressable PM,  int Threshold) {
        var mh$ = LLVMAddScalarReplAggregatesPassWithThreshold$MH();
        try {
            mh$.invokeExact(PM, Threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddSimplifyLibCallsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$306.LLVMAddSimplifyLibCallsPass$MH,"LLVMAddSimplifyLibCallsPass");
    }
    public static void LLVMAddSimplifyLibCallsPass ( Addressable PM) {
        var mh$ = LLVMAddSimplifyLibCallsPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddTailCallEliminationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$306.LLVMAddTailCallEliminationPass$MH,"LLVMAddTailCallEliminationPass");
    }
    public static void LLVMAddTailCallEliminationPass ( Addressable PM) {
        var mh$ = LLVMAddTailCallEliminationPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddDemoteMemoryToRegisterPass$MH() {
        return RuntimeHelper.requireNonNull(constants$306.LLVMAddDemoteMemoryToRegisterPass$MH,"LLVMAddDemoteMemoryToRegisterPass");
    }
    public static void LLVMAddDemoteMemoryToRegisterPass ( Addressable PM) {
        var mh$ = LLVMAddDemoteMemoryToRegisterPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddVerifierPass$MH() {
        return RuntimeHelper.requireNonNull(constants$307.LLVMAddVerifierPass$MH,"LLVMAddVerifierPass");
    }
    public static void LLVMAddVerifierPass ( Addressable PM) {
        var mh$ = LLVMAddVerifierPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddCorrelatedValuePropagationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$307.LLVMAddCorrelatedValuePropagationPass$MH,"LLVMAddCorrelatedValuePropagationPass");
    }
    public static void LLVMAddCorrelatedValuePropagationPass ( Addressable PM) {
        var mh$ = LLVMAddCorrelatedValuePropagationPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddEarlyCSEPass$MH() {
        return RuntimeHelper.requireNonNull(constants$307.LLVMAddEarlyCSEPass$MH,"LLVMAddEarlyCSEPass");
    }
    public static void LLVMAddEarlyCSEPass ( Addressable PM) {
        var mh$ = LLVMAddEarlyCSEPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddEarlyCSEMemSSAPass$MH() {
        return RuntimeHelper.requireNonNull(constants$307.LLVMAddEarlyCSEMemSSAPass$MH,"LLVMAddEarlyCSEMemSSAPass");
    }
    public static void LLVMAddEarlyCSEMemSSAPass ( Addressable PM) {
        var mh$ = LLVMAddEarlyCSEMemSSAPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLowerExpectIntrinsicPass$MH() {
        return RuntimeHelper.requireNonNull(constants$307.LLVMAddLowerExpectIntrinsicPass$MH,"LLVMAddLowerExpectIntrinsicPass");
    }
    public static void LLVMAddLowerExpectIntrinsicPass ( Addressable PM) {
        var mh$ = LLVMAddLowerExpectIntrinsicPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddLowerConstantIntrinsicsPass$MH() {
        return RuntimeHelper.requireNonNull(constants$307.LLVMAddLowerConstantIntrinsicsPass$MH,"LLVMAddLowerConstantIntrinsicsPass");
    }
    public static void LLVMAddLowerConstantIntrinsicsPass ( Addressable PM) {
        var mh$ = LLVMAddLowerConstantIntrinsicsPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddTypeBasedAliasAnalysisPass$MH() {
        return RuntimeHelper.requireNonNull(constants$308.LLVMAddTypeBasedAliasAnalysisPass$MH,"LLVMAddTypeBasedAliasAnalysisPass");
    }
    public static void LLVMAddTypeBasedAliasAnalysisPass ( Addressable PM) {
        var mh$ = LLVMAddTypeBasedAliasAnalysisPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddScopedNoAliasAAPass$MH() {
        return RuntimeHelper.requireNonNull(constants$308.LLVMAddScopedNoAliasAAPass$MH,"LLVMAddScopedNoAliasAAPass");
    }
    public static void LLVMAddScopedNoAliasAAPass ( Addressable PM) {
        var mh$ = LLVMAddScopedNoAliasAAPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddBasicAliasAnalysisPass$MH() {
        return RuntimeHelper.requireNonNull(constants$308.LLVMAddBasicAliasAnalysisPass$MH,"LLVMAddBasicAliasAnalysisPass");
    }
    public static void LLVMAddBasicAliasAnalysisPass ( Addressable PM) {
        var mh$ = LLVMAddBasicAliasAnalysisPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddUnifyFunctionExitNodesPass$MH() {
        return RuntimeHelper.requireNonNull(constants$308.LLVMAddUnifyFunctionExitNodesPass$MH,"LLVMAddUnifyFunctionExitNodesPass");
    }
    public static void LLVMAddUnifyFunctionExitNodesPass ( Addressable PM) {
        var mh$ = LLVMAddUnifyFunctionExitNodesPass$MH();
        try {
            mh$.invokeExact(PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMDisasmContextRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mlirRegisterTransformsPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$309.mlirRegisterTransformsPasses$MH,"mlirRegisterTransformsPasses");
    }
    public static void mlirRegisterTransformsPasses () {
        var mh$ = mlirRegisterTransformsPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsCSE$MH() {
        return RuntimeHelper.requireNonNull(constants$309.mlirCreateTransformsCSE$MH,"mlirCreateTransformsCSE");
    }
    public static MemorySegment mlirCreateTransformsCSE ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsCSE$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsCSE$MH() {
        return RuntimeHelper.requireNonNull(constants$309.mlirRegisterTransformsCSE$MH,"mlirRegisterTransformsCSE");
    }
    public static void mlirRegisterTransformsCSE () {
        var mh$ = mlirRegisterTransformsCSE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsCanonicalizer$MH() {
        return RuntimeHelper.requireNonNull(constants$309.mlirCreateTransformsCanonicalizer$MH,"mlirCreateTransformsCanonicalizer");
    }
    public static MemorySegment mlirCreateTransformsCanonicalizer ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsCanonicalizer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsCanonicalizer$MH() {
        return RuntimeHelper.requireNonNull(constants$310.mlirRegisterTransformsCanonicalizer$MH,"mlirRegisterTransformsCanonicalizer");
    }
    public static void mlirRegisterTransformsCanonicalizer () {
        var mh$ = mlirRegisterTransformsCanonicalizer$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsControlFlowSink$MH() {
        return RuntimeHelper.requireNonNull(constants$310.mlirCreateTransformsControlFlowSink$MH,"mlirCreateTransformsControlFlowSink");
    }
    public static MemorySegment mlirCreateTransformsControlFlowSink ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsControlFlowSink$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsControlFlowSink$MH() {
        return RuntimeHelper.requireNonNull(constants$310.mlirRegisterTransformsControlFlowSink$MH,"mlirRegisterTransformsControlFlowSink");
    }
    public static void mlirRegisterTransformsControlFlowSink () {
        var mh$ = mlirRegisterTransformsControlFlowSink$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsGenerateRuntimeVerification$MH() {
        return RuntimeHelper.requireNonNull(constants$310.mlirCreateTransformsGenerateRuntimeVerification$MH,"mlirCreateTransformsGenerateRuntimeVerification");
    }
    public static MemorySegment mlirCreateTransformsGenerateRuntimeVerification ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsGenerateRuntimeVerification$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsGenerateRuntimeVerification$MH() {
        return RuntimeHelper.requireNonNull(constants$310.mlirRegisterTransformsGenerateRuntimeVerification$MH,"mlirRegisterTransformsGenerateRuntimeVerification");
    }
    public static void mlirRegisterTransformsGenerateRuntimeVerification () {
        var mh$ = mlirRegisterTransformsGenerateRuntimeVerification$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsInliner$MH() {
        return RuntimeHelper.requireNonNull(constants$310.mlirCreateTransformsInliner$MH,"mlirCreateTransformsInliner");
    }
    public static MemorySegment mlirCreateTransformsInliner ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsInliner$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsInliner$MH() {
        return RuntimeHelper.requireNonNull(constants$311.mlirRegisterTransformsInliner$MH,"mlirRegisterTransformsInliner");
    }
    public static void mlirRegisterTransformsInliner () {
        var mh$ = mlirRegisterTransformsInliner$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsLocationSnapshot$MH() {
        return RuntimeHelper.requireNonNull(constants$311.mlirCreateTransformsLocationSnapshot$MH,"mlirCreateTransformsLocationSnapshot");
    }
    public static MemorySegment mlirCreateTransformsLocationSnapshot ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsLocationSnapshot$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsLocationSnapshot$MH() {
        return RuntimeHelper.requireNonNull(constants$311.mlirRegisterTransformsLocationSnapshot$MH,"mlirRegisterTransformsLocationSnapshot");
    }
    public static void mlirRegisterTransformsLocationSnapshot () {
        var mh$ = mlirRegisterTransformsLocationSnapshot$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsLoopInvariantCodeMotion$MH() {
        return RuntimeHelper.requireNonNull(constants$311.mlirCreateTransformsLoopInvariantCodeMotion$MH,"mlirCreateTransformsLoopInvariantCodeMotion");
    }
    public static MemorySegment mlirCreateTransformsLoopInvariantCodeMotion ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsLoopInvariantCodeMotion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsLoopInvariantCodeMotion$MH() {
        return RuntimeHelper.requireNonNull(constants$311.mlirRegisterTransformsLoopInvariantCodeMotion$MH,"mlirRegisterTransformsLoopInvariantCodeMotion");
    }
    public static void mlirRegisterTransformsLoopInvariantCodeMotion () {
        var mh$ = mlirRegisterTransformsLoopInvariantCodeMotion$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsPrintOpStats$MH() {
        return RuntimeHelper.requireNonNull(constants$311.mlirCreateTransformsPrintOpStats$MH,"mlirCreateTransformsPrintOpStats");
    }
    public static MemorySegment mlirCreateTransformsPrintOpStats ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsPrintOpStats$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsPrintOpStats$MH() {
        return RuntimeHelper.requireNonNull(constants$312.mlirRegisterTransformsPrintOpStats$MH,"mlirRegisterTransformsPrintOpStats");
    }
    public static void mlirRegisterTransformsPrintOpStats () {
        var mh$ = mlirRegisterTransformsPrintOpStats$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsSCCP$MH() {
        return RuntimeHelper.requireNonNull(constants$312.mlirCreateTransformsSCCP$MH,"mlirCreateTransformsSCCP");
    }
    public static MemorySegment mlirCreateTransformsSCCP ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsSCCP$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsSCCP$MH() {
        return RuntimeHelper.requireNonNull(constants$312.mlirRegisterTransformsSCCP$MH,"mlirRegisterTransformsSCCP");
    }
    public static void mlirRegisterTransformsSCCP () {
        var mh$ = mlirRegisterTransformsSCCP$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsStripDebugInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$312.mlirCreateTransformsStripDebugInfo$MH,"mlirCreateTransformsStripDebugInfo");
    }
    public static MemorySegment mlirCreateTransformsStripDebugInfo ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsStripDebugInfo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsStripDebugInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$312.mlirRegisterTransformsStripDebugInfo$MH,"mlirRegisterTransformsStripDebugInfo");
    }
    public static void mlirRegisterTransformsStripDebugInfo () {
        var mh$ = mlirRegisterTransformsStripDebugInfo$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsSymbolDCE$MH() {
        return RuntimeHelper.requireNonNull(constants$312.mlirCreateTransformsSymbolDCE$MH,"mlirCreateTransformsSymbolDCE");
    }
    public static MemorySegment mlirCreateTransformsSymbolDCE ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsSymbolDCE$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsSymbolDCE$MH() {
        return RuntimeHelper.requireNonNull(constants$313.mlirRegisterTransformsSymbolDCE$MH,"mlirRegisterTransformsSymbolDCE");
    }
    public static void mlirRegisterTransformsSymbolDCE () {
        var mh$ = mlirRegisterTransformsSymbolDCE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsSymbolPrivatize$MH() {
        return RuntimeHelper.requireNonNull(constants$313.mlirCreateTransformsSymbolPrivatize$MH,"mlirCreateTransformsSymbolPrivatize");
    }
    public static MemorySegment mlirCreateTransformsSymbolPrivatize ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsSymbolPrivatize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsSymbolPrivatize$MH() {
        return RuntimeHelper.requireNonNull(constants$313.mlirRegisterTransformsSymbolPrivatize$MH,"mlirRegisterTransformsSymbolPrivatize");
    }
    public static void mlirRegisterTransformsSymbolPrivatize () {
        var mh$ = mlirRegisterTransformsSymbolPrivatize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsTopologicalSort$MH() {
        return RuntimeHelper.requireNonNull(constants$313.mlirCreateTransformsTopologicalSort$MH,"mlirCreateTransformsTopologicalSort");
    }
    public static MemorySegment mlirCreateTransformsTopologicalSort ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsTopologicalSort$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsTopologicalSort$MH() {
        return RuntimeHelper.requireNonNull(constants$313.mlirRegisterTransformsTopologicalSort$MH,"mlirRegisterTransformsTopologicalSort");
    }
    public static void mlirRegisterTransformsTopologicalSort () {
        var mh$ = mlirRegisterTransformsTopologicalSort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirCreateTransformsViewOpGraph$MH() {
        return RuntimeHelper.requireNonNull(constants$313.mlirCreateTransformsViewOpGraph$MH,"mlirCreateTransformsViewOpGraph");
    }
    public static MemorySegment mlirCreateTransformsViewOpGraph ( SegmentAllocator allocator) {
        var mh$ = mlirCreateTransformsViewOpGraph$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterTransformsViewOpGraph$MH() {
        return RuntimeHelper.requireNonNull(constants$314.mlirRegisterTransformsViewOpGraph$MH,"mlirRegisterTransformsViewOpGraph");
    }
    public static void mlirRegisterTransformsViewOpGraph () {
        var mh$ = mlirRegisterTransformsViewOpGraph$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMDIFlagZero() {
        return (int)0L;
    }
    public static int LLVMDIFlagPrivate() {
        return (int)1L;
    }
    public static int LLVMDIFlagProtected() {
        return (int)2L;
    }
    public static int LLVMDIFlagPublic() {
        return (int)3L;
    }
    public static int LLVMDIFlagFwdDecl() {
        return (int)4L;
    }
    public static int LLVMDIFlagAppleBlock() {
        return (int)8L;
    }
    public static int LLVMDIFlagReservedBit4() {
        return (int)16L;
    }
    public static int LLVMDIFlagVirtual() {
        return (int)32L;
    }
    public static int LLVMDIFlagArtificial() {
        return (int)64L;
    }
    public static int LLVMDIFlagExplicit() {
        return (int)128L;
    }
    public static int LLVMDIFlagPrototyped() {
        return (int)256L;
    }
    public static int LLVMDIFlagObjcClassComplete() {
        return (int)512L;
    }
    public static int LLVMDIFlagObjectPointer() {
        return (int)1024L;
    }
    public static int LLVMDIFlagVector() {
        return (int)2048L;
    }
    public static int LLVMDIFlagStaticMember() {
        return (int)4096L;
    }
    public static int LLVMDIFlagLValueReference() {
        return (int)8192L;
    }
    public static int LLVMDIFlagRValueReference() {
        return (int)16384L;
    }
    public static int LLVMDIFlagReserved() {
        return (int)32768L;
    }
    public static int LLVMDIFlagSingleInheritance() {
        return (int)65536L;
    }
    public static int LLVMDIFlagMultipleInheritance() {
        return (int)131072L;
    }
    public static int LLVMDIFlagVirtualInheritance() {
        return (int)196608L;
    }
    public static int LLVMDIFlagIntroducedVirtual() {
        return (int)262144L;
    }
    public static int LLVMDIFlagBitField() {
        return (int)524288L;
    }
    public static int LLVMDIFlagNoReturn() {
        return (int)1048576L;
    }
    public static int LLVMDIFlagTypePassByValue() {
        return (int)4194304L;
    }
    public static int LLVMDIFlagTypePassByReference() {
        return (int)8388608L;
    }
    public static int LLVMDIFlagEnumClass() {
        return (int)16777216L;
    }
    public static int LLVMDIFlagFixedEnum() {
        return (int)16777216L;
    }
    public static int LLVMDIFlagThunk() {
        return (int)33554432L;
    }
    public static int LLVMDIFlagNonTrivial() {
        return (int)67108864L;
    }
    public static int LLVMDIFlagBigEndian() {
        return (int)134217728L;
    }
    public static int LLVMDIFlagLittleEndian() {
        return (int)268435456L;
    }
    public static int LLVMDIFlagIndirectVirtualBase() {
        return (int)36L;
    }
    public static int LLVMDIFlagAccessibility() {
        return (int)3L;
    }
    public static int LLVMDIFlagPtrToMemberRep() {
        return (int)196608L;
    }
    public static int LLVMDWARFSourceLanguageC89() {
        return (int)0L;
    }
    public static int LLVMDWARFSourceLanguageC() {
        return (int)1L;
    }
    public static int LLVMDWARFSourceLanguageAda83() {
        return (int)2L;
    }
    public static int LLVMDWARFSourceLanguageC_plus_plus() {
        return (int)3L;
    }
    public static int LLVMDWARFSourceLanguageCobol74() {
        return (int)4L;
    }
    public static int LLVMDWARFSourceLanguageCobol85() {
        return (int)5L;
    }
    public static int LLVMDWARFSourceLanguageFortran77() {
        return (int)6L;
    }
    public static int LLVMDWARFSourceLanguageFortran90() {
        return (int)7L;
    }
    public static int LLVMDWARFSourceLanguagePascal83() {
        return (int)8L;
    }
    public static int LLVMDWARFSourceLanguageModula2() {
        return (int)9L;
    }
    public static int LLVMDWARFSourceLanguageJava() {
        return (int)10L;
    }
    public static int LLVMDWARFSourceLanguageC99() {
        return (int)11L;
    }
    public static int LLVMDWARFSourceLanguageAda95() {
        return (int)12L;
    }
    public static int LLVMDWARFSourceLanguageFortran95() {
        return (int)13L;
    }
    public static int LLVMDWARFSourceLanguagePLI() {
        return (int)14L;
    }
    public static int LLVMDWARFSourceLanguageObjC() {
        return (int)15L;
    }
    public static int LLVMDWARFSourceLanguageObjC_plus_plus() {
        return (int)16L;
    }
    public static int LLVMDWARFSourceLanguageUPC() {
        return (int)17L;
    }
    public static int LLVMDWARFSourceLanguageD() {
        return (int)18L;
    }
    public static int LLVMDWARFSourceLanguagePython() {
        return (int)19L;
    }
    public static int LLVMDWARFSourceLanguageOpenCL() {
        return (int)20L;
    }
    public static int LLVMDWARFSourceLanguageGo() {
        return (int)21L;
    }
    public static int LLVMDWARFSourceLanguageModula3() {
        return (int)22L;
    }
    public static int LLVMDWARFSourceLanguageHaskell() {
        return (int)23L;
    }
    public static int LLVMDWARFSourceLanguageC_plus_plus_03() {
        return (int)24L;
    }
    public static int LLVMDWARFSourceLanguageC_plus_plus_11() {
        return (int)25L;
    }
    public static int LLVMDWARFSourceLanguageOCaml() {
        return (int)26L;
    }
    public static int LLVMDWARFSourceLanguageRust() {
        return (int)27L;
    }
    public static int LLVMDWARFSourceLanguageC11() {
        return (int)28L;
    }
    public static int LLVMDWARFSourceLanguageSwift() {
        return (int)29L;
    }
    public static int LLVMDWARFSourceLanguageJulia() {
        return (int)30L;
    }
    public static int LLVMDWARFSourceLanguageDylan() {
        return (int)31L;
    }
    public static int LLVMDWARFSourceLanguageC_plus_plus_14() {
        return (int)32L;
    }
    public static int LLVMDWARFSourceLanguageFortran03() {
        return (int)33L;
    }
    public static int LLVMDWARFSourceLanguageFortran08() {
        return (int)34L;
    }
    public static int LLVMDWARFSourceLanguageRenderScript() {
        return (int)35L;
    }
    public static int LLVMDWARFSourceLanguageBLISS() {
        return (int)36L;
    }
    public static int LLVMDWARFSourceLanguageKotlin() {
        return (int)37L;
    }
    public static int LLVMDWARFSourceLanguageZig() {
        return (int)38L;
    }
    public static int LLVMDWARFSourceLanguageCrystal() {
        return (int)39L;
    }
    public static int LLVMDWARFSourceLanguageC_plus_plus_17() {
        return (int)40L;
    }
    public static int LLVMDWARFSourceLanguageC_plus_plus_20() {
        return (int)41L;
    }
    public static int LLVMDWARFSourceLanguageC17() {
        return (int)42L;
    }
    public static int LLVMDWARFSourceLanguageFortran18() {
        return (int)43L;
    }
    public static int LLVMDWARFSourceLanguageAda2005() {
        return (int)44L;
    }
    public static int LLVMDWARFSourceLanguageAda2012() {
        return (int)45L;
    }
    public static int LLVMDWARFSourceLanguageMips_Assembler() {
        return (int)46L;
    }
    public static int LLVMDWARFSourceLanguageGOOGLE_RenderScript() {
        return (int)47L;
    }
    public static int LLVMDWARFSourceLanguageBORLAND_Delphi() {
        return (int)48L;
    }
    public static int LLVMDWARFEmissionNone() {
        return (int)0L;
    }
    public static int LLVMDWARFEmissionFull() {
        return (int)1L;
    }
    public static int LLVMDWARFEmissionLineTablesOnly() {
        return (int)2L;
    }
    public static int LLVMMDStringMetadataKind() {
        return (int)0L;
    }
    public static int LLVMConstantAsMetadataMetadataKind() {
        return (int)1L;
    }
    public static int LLVMLocalAsMetadataMetadataKind() {
        return (int)2L;
    }
    public static int LLVMDistinctMDOperandPlaceholderMetadataKind() {
        return (int)3L;
    }
    public static int LLVMMDTupleMetadataKind() {
        return (int)4L;
    }
    public static int LLVMDILocationMetadataKind() {
        return (int)5L;
    }
    public static int LLVMDIExpressionMetadataKind() {
        return (int)6L;
    }
    public static int LLVMDIGlobalVariableExpressionMetadataKind() {
        return (int)7L;
    }
    public static int LLVMGenericDINodeMetadataKind() {
        return (int)8L;
    }
    public static int LLVMDISubrangeMetadataKind() {
        return (int)9L;
    }
    public static int LLVMDIEnumeratorMetadataKind() {
        return (int)10L;
    }
    public static int LLVMDIBasicTypeMetadataKind() {
        return (int)11L;
    }
    public static int LLVMDIDerivedTypeMetadataKind() {
        return (int)12L;
    }
    public static int LLVMDICompositeTypeMetadataKind() {
        return (int)13L;
    }
    public static int LLVMDISubroutineTypeMetadataKind() {
        return (int)14L;
    }
    public static int LLVMDIFileMetadataKind() {
        return (int)15L;
    }
    public static int LLVMDICompileUnitMetadataKind() {
        return (int)16L;
    }
    public static int LLVMDISubprogramMetadataKind() {
        return (int)17L;
    }
    public static int LLVMDILexicalBlockMetadataKind() {
        return (int)18L;
    }
    public static int LLVMDILexicalBlockFileMetadataKind() {
        return (int)19L;
    }
    public static int LLVMDINamespaceMetadataKind() {
        return (int)20L;
    }
    public static int LLVMDIModuleMetadataKind() {
        return (int)21L;
    }
    public static int LLVMDITemplateTypeParameterMetadataKind() {
        return (int)22L;
    }
    public static int LLVMDITemplateValueParameterMetadataKind() {
        return (int)23L;
    }
    public static int LLVMDIGlobalVariableMetadataKind() {
        return (int)24L;
    }
    public static int LLVMDILocalVariableMetadataKind() {
        return (int)25L;
    }
    public static int LLVMDILabelMetadataKind() {
        return (int)26L;
    }
    public static int LLVMDIObjCPropertyMetadataKind() {
        return (int)27L;
    }
    public static int LLVMDIImportedEntityMetadataKind() {
        return (int)28L;
    }
    public static int LLVMDIMacroMetadataKind() {
        return (int)29L;
    }
    public static int LLVMDIMacroFileMetadataKind() {
        return (int)30L;
    }
    public static int LLVMDICommonBlockMetadataKind() {
        return (int)31L;
    }
    public static int LLVMDIStringTypeMetadataKind() {
        return (int)32L;
    }
    public static int LLVMDIGenericSubrangeMetadataKind() {
        return (int)33L;
    }
    public static int LLVMDIArgListMetadataKind() {
        return (int)34L;
    }
    public static int LLVMDIAssignIDMetadataKind() {
        return (int)35L;
    }
    public static int LLVMDWARFMacinfoRecordTypeDefine() {
        return (int)1L;
    }
    public static int LLVMDWARFMacinfoRecordTypeMacro() {
        return (int)2L;
    }
    public static int LLVMDWARFMacinfoRecordTypeStartFile() {
        return (int)3L;
    }
    public static int LLVMDWARFMacinfoRecordTypeEndFile() {
        return (int)4L;
    }
    public static int LLVMDWARFMacinfoRecordTypeVendorExt() {
        return (int)255L;
    }
    public static MethodHandle LLVMDebugMetadataVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$314.LLVMDebugMetadataVersion$MH,"LLVMDebugMetadataVersion");
    }
    public static int LLVMDebugMetadataVersion () {
        var mh$ = LLVMDebugMetadataVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetModuleDebugMetadataVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$314.LLVMGetModuleDebugMetadataVersion$MH,"LLVMGetModuleDebugMetadataVersion");
    }
    public static int LLVMGetModuleDebugMetadataVersion ( Addressable Module) {
        var mh$ = LLVMGetModuleDebugMetadataVersion$MH();
        try {
            return (int)mh$.invokeExact(Module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStripModuleDebugInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$314.LLVMStripModuleDebugInfo$MH,"LLVMStripModuleDebugInfo");
    }
    public static int LLVMStripModuleDebugInfo ( Addressable Module) {
        var mh$ = LLVMStripModuleDebugInfo$MH();
        try {
            return (int)mh$.invokeExact(Module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateDIBuilderDisallowUnresolved$MH() {
        return RuntimeHelper.requireNonNull(constants$314.LLVMCreateDIBuilderDisallowUnresolved$MH,"LLVMCreateDIBuilderDisallowUnresolved");
    }
    public static MemoryAddress LLVMCreateDIBuilderDisallowUnresolved ( Addressable M) {
        var mh$ = LLVMCreateDIBuilderDisallowUnresolved$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateDIBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$314.LLVMCreateDIBuilder$MH,"LLVMCreateDIBuilder");
    }
    public static MemoryAddress LLVMCreateDIBuilder ( Addressable M) {
        var mh$ = LLVMCreateDIBuilder$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeDIBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$315.LLVMDisposeDIBuilder$MH,"LLVMDisposeDIBuilder");
    }
    public static void LLVMDisposeDIBuilder ( Addressable Builder) {
        var mh$ = LLVMDisposeDIBuilder$MH();
        try {
            mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderFinalize$MH() {
        return RuntimeHelper.requireNonNull(constants$315.LLVMDIBuilderFinalize$MH,"LLVMDIBuilderFinalize");
    }
    public static void LLVMDIBuilderFinalize ( Addressable Builder) {
        var mh$ = LLVMDIBuilderFinalize$MH();
        try {
            mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderFinalizeSubprogram$MH() {
        return RuntimeHelper.requireNonNull(constants$315.LLVMDIBuilderFinalizeSubprogram$MH,"LLVMDIBuilderFinalizeSubprogram");
    }
    public static void LLVMDIBuilderFinalizeSubprogram ( Addressable Builder,  Addressable Subprogram) {
        var mh$ = LLVMDIBuilderFinalizeSubprogram$MH();
        try {
            mh$.invokeExact(Builder, Subprogram);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateCompileUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$315.LLVMDIBuilderCreateCompileUnit$MH,"LLVMDIBuilderCreateCompileUnit");
    }
    public static MemoryAddress LLVMDIBuilderCreateCompileUnit ( Addressable Builder,  int Lang,  Addressable FileRef,  Addressable Producer,  long ProducerLen,  int isOptimized,  Addressable Flags,  long FlagsLen,  int RuntimeVer,  Addressable SplitName,  long SplitNameLen,  int Kind,  int DWOId,  int SplitDebugInlining,  int DebugInfoForProfiling,  Addressable SysRoot,  long SysRootLen,  Addressable SDK,  long SDKLen) {
        var mh$ = LLVMDIBuilderCreateCompileUnit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Lang, FileRef, Producer, ProducerLen, isOptimized, Flags, FlagsLen, RuntimeVer, SplitName, SplitNameLen, Kind, DWOId, SplitDebugInlining, DebugInfoForProfiling, SysRoot, SysRootLen, SDK, SDKLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateFile$MH() {
        return RuntimeHelper.requireNonNull(constants$315.LLVMDIBuilderCreateFile$MH,"LLVMDIBuilderCreateFile");
    }
    public static MemoryAddress LLVMDIBuilderCreateFile ( Addressable Builder,  Addressable Filename,  long FilenameLen,  Addressable Directory,  long DirectoryLen) {
        var mh$ = LLVMDIBuilderCreateFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Filename, FilenameLen, Directory, DirectoryLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateModule$MH() {
        return RuntimeHelper.requireNonNull(constants$315.LLVMDIBuilderCreateModule$MH,"LLVMDIBuilderCreateModule");
    }
    public static MemoryAddress LLVMDIBuilderCreateModule ( Addressable Builder,  Addressable ParentScope,  Addressable Name,  long NameLen,  Addressable ConfigMacros,  long ConfigMacrosLen,  Addressable IncludePath,  long IncludePathLen,  Addressable APINotesFile,  long APINotesFileLen) {
        var mh$ = LLVMDIBuilderCreateModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, ParentScope, Name, NameLen, ConfigMacros, ConfigMacrosLen, IncludePath, IncludePathLen, APINotesFile, APINotesFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateNameSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$316.LLVMDIBuilderCreateNameSpace$MH,"LLVMDIBuilderCreateNameSpace");
    }
    public static MemoryAddress LLVMDIBuilderCreateNameSpace ( Addressable Builder,  Addressable ParentScope,  Addressable Name,  long NameLen,  int ExportSymbols) {
        var mh$ = LLVMDIBuilderCreateNameSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, ParentScope, Name, NameLen, ExportSymbols);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$316.LLVMDIBuilderCreateFunction$MH,"LLVMDIBuilderCreateFunction");
    }
    public static MemoryAddress LLVMDIBuilderCreateFunction ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable LinkageName,  long LinkageNameLen,  Addressable File,  int LineNo,  Addressable Ty,  int IsLocalToUnit,  int IsDefinition,  int ScopeLine,  int Flags,  int IsOptimized) {
        var mh$ = LLVMDIBuilderCreateFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, LinkageName, LinkageNameLen, File, LineNo, Ty, IsLocalToUnit, IsDefinition, ScopeLine, Flags, IsOptimized);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateLexicalBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$316.LLVMDIBuilderCreateLexicalBlock$MH,"LLVMDIBuilderCreateLexicalBlock");
    }
    public static MemoryAddress LLVMDIBuilderCreateLexicalBlock ( Addressable Builder,  Addressable Scope,  Addressable File,  int Line,  int Column) {
        var mh$ = LLVMDIBuilderCreateLexicalBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, File, Line, Column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateLexicalBlockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$316.LLVMDIBuilderCreateLexicalBlockFile$MH,"LLVMDIBuilderCreateLexicalBlockFile");
    }
    public static MemoryAddress LLVMDIBuilderCreateLexicalBlockFile ( Addressable Builder,  Addressable Scope,  Addressable File,  int Discriminator) {
        var mh$ = LLVMDIBuilderCreateLexicalBlockFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, File, Discriminator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateImportedModuleFromNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$316.LLVMDIBuilderCreateImportedModuleFromNamespace$MH,"LLVMDIBuilderCreateImportedModuleFromNamespace");
    }
    public static MemoryAddress LLVMDIBuilderCreateImportedModuleFromNamespace ( Addressable Builder,  Addressable Scope,  Addressable NS,  Addressable File,  int Line) {
        var mh$ = LLVMDIBuilderCreateImportedModuleFromNamespace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, NS, File, Line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateImportedModuleFromAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$316.LLVMDIBuilderCreateImportedModuleFromAlias$MH,"LLVMDIBuilderCreateImportedModuleFromAlias");
    }
    public static MemoryAddress LLVMDIBuilderCreateImportedModuleFromAlias ( Addressable Builder,  Addressable Scope,  Addressable ImportedEntity,  Addressable File,  int Line,  Addressable Elements,  int NumElements) {
        var mh$ = LLVMDIBuilderCreateImportedModuleFromAlias$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, ImportedEntity, File, Line, Elements, NumElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateImportedModuleFromModule$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LLVMDIBuilderCreateImportedModuleFromModule$MH,"LLVMDIBuilderCreateImportedModuleFromModule");
    }
    public static MemoryAddress LLVMDIBuilderCreateImportedModuleFromModule ( Addressable Builder,  Addressable Scope,  Addressable M,  Addressable File,  int Line,  Addressable Elements,  int NumElements) {
        var mh$ = LLVMDIBuilderCreateImportedModuleFromModule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, M, File, Line, Elements, NumElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateImportedDeclaration$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LLVMDIBuilderCreateImportedDeclaration$MH,"LLVMDIBuilderCreateImportedDeclaration");
    }
    public static MemoryAddress LLVMDIBuilderCreateImportedDeclaration ( Addressable Builder,  Addressable Scope,  Addressable Decl,  Addressable File,  int Line,  Addressable Name,  long NameLen,  Addressable Elements,  int NumElements) {
        var mh$ = LLVMDIBuilderCreateImportedDeclaration$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Decl, File, Line, Name, NameLen, Elements, NumElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateDebugLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LLVMDIBuilderCreateDebugLocation$MH,"LLVMDIBuilderCreateDebugLocation");
    }
    public static MemoryAddress LLVMDIBuilderCreateDebugLocation ( Addressable Ctx,  int Line,  int Column,  Addressable Scope,  Addressable InlinedAt) {
        var mh$ = LLVMDIBuilderCreateDebugLocation$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ctx, Line, Column, Scope, InlinedAt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDILocationGetLine$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LLVMDILocationGetLine$MH,"LLVMDILocationGetLine");
    }
    public static int LLVMDILocationGetLine ( Addressable Location) {
        var mh$ = LLVMDILocationGetLine$MH();
        try {
            return (int)mh$.invokeExact(Location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDILocationGetColumn$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LLVMDILocationGetColumn$MH,"LLVMDILocationGetColumn");
    }
    public static int LLVMDILocationGetColumn ( Addressable Location) {
        var mh$ = LLVMDILocationGetColumn$MH();
        try {
            return (int)mh$.invokeExact(Location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDILocationGetScope$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LLVMDILocationGetScope$MH,"LLVMDILocationGetScope");
    }
    public static MemoryAddress LLVMDILocationGetScope ( Addressable Location) {
        var mh$ = LLVMDILocationGetScope$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDILocationGetInlinedAt$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LLVMDILocationGetInlinedAt$MH,"LLVMDILocationGetInlinedAt");
    }
    public static MemoryAddress LLVMDILocationGetInlinedAt ( Addressable Location) {
        var mh$ = LLVMDILocationGetInlinedAt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIScopeGetFile$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LLVMDIScopeGetFile$MH,"LLVMDIScopeGetFile");
    }
    public static MemoryAddress LLVMDIScopeGetFile ( Addressable Scope) {
        var mh$ = LLVMDIScopeGetFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIFileGetDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LLVMDIFileGetDirectory$MH,"LLVMDIFileGetDirectory");
    }
    public static MemoryAddress LLVMDIFileGetDirectory ( Addressable File,  Addressable Len) {
        var mh$ = LLVMDIFileGetDirectory$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(File, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIFileGetFilename$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LLVMDIFileGetFilename$MH,"LLVMDIFileGetFilename");
    }
    public static MemoryAddress LLVMDIFileGetFilename ( Addressable File,  Addressable Len) {
        var mh$ = LLVMDIFileGetFilename$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(File, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIFileGetSource$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LLVMDIFileGetSource$MH,"LLVMDIFileGetSource");
    }
    public static MemoryAddress LLVMDIFileGetSource ( Addressable File,  Addressable Len) {
        var mh$ = LLVMDIFileGetSource$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(File, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderGetOrCreateTypeArray$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LLVMDIBuilderGetOrCreateTypeArray$MH,"LLVMDIBuilderGetOrCreateTypeArray");
    }
    public static MemoryAddress LLVMDIBuilderGetOrCreateTypeArray ( Addressable Builder,  Addressable Data,  long NumElements) {
        var mh$ = LLVMDIBuilderGetOrCreateTypeArray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Data, NumElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateSubroutineType$MH() {
        return RuntimeHelper.requireNonNull(constants$319.LLVMDIBuilderCreateSubroutineType$MH,"LLVMDIBuilderCreateSubroutineType");
    }
    public static MemoryAddress LLVMDIBuilderCreateSubroutineType ( Addressable Builder,  Addressable File,  Addressable ParameterTypes,  int NumParameterTypes,  int Flags) {
        var mh$ = LLVMDIBuilderCreateSubroutineType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, File, ParameterTypes, NumParameterTypes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateMacro$MH() {
        return RuntimeHelper.requireNonNull(constants$319.LLVMDIBuilderCreateMacro$MH,"LLVMDIBuilderCreateMacro");
    }
    public static MemoryAddress LLVMDIBuilderCreateMacro ( Addressable Builder,  Addressable ParentMacroFile,  int Line,  int RecordType,  Addressable Name,  long NameLen,  Addressable Value,  long ValueLen) {
        var mh$ = LLVMDIBuilderCreateMacro$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, ParentMacroFile, Line, RecordType, Name, NameLen, Value, ValueLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateTempMacroFile$MH() {
        return RuntimeHelper.requireNonNull(constants$319.LLVMDIBuilderCreateTempMacroFile$MH,"LLVMDIBuilderCreateTempMacroFile");
    }
    public static MemoryAddress LLVMDIBuilderCreateTempMacroFile ( Addressable Builder,  Addressable ParentMacroFile,  int Line,  Addressable File) {
        var mh$ = LLVMDIBuilderCreateTempMacroFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, ParentMacroFile, Line, File);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateEnumerator$MH() {
        return RuntimeHelper.requireNonNull(constants$319.LLVMDIBuilderCreateEnumerator$MH,"LLVMDIBuilderCreateEnumerator");
    }
    public static MemoryAddress LLVMDIBuilderCreateEnumerator ( Addressable Builder,  Addressable Name,  long NameLen,  long Value,  int IsUnsigned) {
        var mh$ = LLVMDIBuilderCreateEnumerator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Name, NameLen, Value, IsUnsigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateEnumerationType$MH() {
        return RuntimeHelper.requireNonNull(constants$319.LLVMDIBuilderCreateEnumerationType$MH,"LLVMDIBuilderCreateEnumerationType");
    }
    public static MemoryAddress LLVMDIBuilderCreateEnumerationType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNumber,  long SizeInBits,  int AlignInBits,  Addressable Elements,  int NumElements,  Addressable ClassTy) {
        var mh$ = LLVMDIBuilderCreateEnumerationType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNumber, SizeInBits, AlignInBits, Elements, NumElements, ClassTy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateUnionType$MH() {
        return RuntimeHelper.requireNonNull(constants$319.LLVMDIBuilderCreateUnionType$MH,"LLVMDIBuilderCreateUnionType");
    }
    public static MemoryAddress LLVMDIBuilderCreateUnionType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNumber,  long SizeInBits,  int AlignInBits,  int Flags,  Addressable Elements,  int NumElements,  int RunTimeLang,  Addressable UniqueId,  long UniqueIdLen) {
        var mh$ = LLVMDIBuilderCreateUnionType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNumber, SizeInBits, AlignInBits, Flags, Elements, NumElements, RunTimeLang, UniqueId, UniqueIdLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateArrayType$MH() {
        return RuntimeHelper.requireNonNull(constants$320.LLVMDIBuilderCreateArrayType$MH,"LLVMDIBuilderCreateArrayType");
    }
    public static MemoryAddress LLVMDIBuilderCreateArrayType ( Addressable Builder,  long Size,  int AlignInBits,  Addressable Ty,  Addressable Subscripts,  int NumSubscripts) {
        var mh$ = LLVMDIBuilderCreateArrayType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Size, AlignInBits, Ty, Subscripts, NumSubscripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateVectorType$MH() {
        return RuntimeHelper.requireNonNull(constants$320.LLVMDIBuilderCreateVectorType$MH,"LLVMDIBuilderCreateVectorType");
    }
    public static MemoryAddress LLVMDIBuilderCreateVectorType ( Addressable Builder,  long Size,  int AlignInBits,  Addressable Ty,  Addressable Subscripts,  int NumSubscripts) {
        var mh$ = LLVMDIBuilderCreateVectorType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Size, AlignInBits, Ty, Subscripts, NumSubscripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateUnspecifiedType$MH() {
        return RuntimeHelper.requireNonNull(constants$320.LLVMDIBuilderCreateUnspecifiedType$MH,"LLVMDIBuilderCreateUnspecifiedType");
    }
    public static MemoryAddress LLVMDIBuilderCreateUnspecifiedType ( Addressable Builder,  Addressable Name,  long NameLen) {
        var mh$ = LLVMDIBuilderCreateUnspecifiedType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateBasicType$MH() {
        return RuntimeHelper.requireNonNull(constants$320.LLVMDIBuilderCreateBasicType$MH,"LLVMDIBuilderCreateBasicType");
    }
    public static MemoryAddress LLVMDIBuilderCreateBasicType ( Addressable Builder,  Addressable Name,  long NameLen,  long SizeInBits,  int Encoding,  int Flags) {
        var mh$ = LLVMDIBuilderCreateBasicType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Name, NameLen, SizeInBits, Encoding, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreatePointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$320.LLVMDIBuilderCreatePointerType$MH,"LLVMDIBuilderCreatePointerType");
    }
    public static MemoryAddress LLVMDIBuilderCreatePointerType ( Addressable Builder,  Addressable PointeeTy,  long SizeInBits,  int AlignInBits,  int AddressSpace,  Addressable Name,  long NameLen) {
        var mh$ = LLVMDIBuilderCreatePointerType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, PointeeTy, SizeInBits, AlignInBits, AddressSpace, Name, NameLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateStructType$MH() {
        return RuntimeHelper.requireNonNull(constants$320.LLVMDIBuilderCreateStructType$MH,"LLVMDIBuilderCreateStructType");
    }
    public static MemoryAddress LLVMDIBuilderCreateStructType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNumber,  long SizeInBits,  int AlignInBits,  int Flags,  Addressable DerivedFrom,  Addressable Elements,  int NumElements,  int RunTimeLang,  Addressable VTableHolder,  Addressable UniqueId,  long UniqueIdLen) {
        var mh$ = LLVMDIBuilderCreateStructType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNumber, SizeInBits, AlignInBits, Flags, DerivedFrom, Elements, NumElements, RunTimeLang, VTableHolder, UniqueId, UniqueIdLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateMemberType$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LLVMDIBuilderCreateMemberType$MH,"LLVMDIBuilderCreateMemberType");
    }
    public static MemoryAddress LLVMDIBuilderCreateMemberType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNo,  long SizeInBits,  int AlignInBits,  long OffsetInBits,  int Flags,  Addressable Ty) {
        var mh$ = LLVMDIBuilderCreateMemberType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNo, SizeInBits, AlignInBits, OffsetInBits, Flags, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateStaticMemberType$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LLVMDIBuilderCreateStaticMemberType$MH,"LLVMDIBuilderCreateStaticMemberType");
    }
    public static MemoryAddress LLVMDIBuilderCreateStaticMemberType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNumber,  Addressable Type,  int Flags,  Addressable ConstantVal,  int AlignInBits) {
        var mh$ = LLVMDIBuilderCreateStaticMemberType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNumber, Type, Flags, ConstantVal, AlignInBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateMemberPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LLVMDIBuilderCreateMemberPointerType$MH,"LLVMDIBuilderCreateMemberPointerType");
    }
    public static MemoryAddress LLVMDIBuilderCreateMemberPointerType ( Addressable Builder,  Addressable PointeeType,  Addressable ClassType,  long SizeInBits,  int AlignInBits,  int Flags) {
        var mh$ = LLVMDIBuilderCreateMemberPointerType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, PointeeType, ClassType, SizeInBits, AlignInBits, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateObjCIVar$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LLVMDIBuilderCreateObjCIVar$MH,"LLVMDIBuilderCreateObjCIVar");
    }
    public static MemoryAddress LLVMDIBuilderCreateObjCIVar ( Addressable Builder,  Addressable Name,  long NameLen,  Addressable File,  int LineNo,  long SizeInBits,  int AlignInBits,  long OffsetInBits,  int Flags,  Addressable Ty,  Addressable PropertyNode) {
        var mh$ = LLVMDIBuilderCreateObjCIVar$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Name, NameLen, File, LineNo, SizeInBits, AlignInBits, OffsetInBits, Flags, Ty, PropertyNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateObjCProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LLVMDIBuilderCreateObjCProperty$MH,"LLVMDIBuilderCreateObjCProperty");
    }
    public static MemoryAddress LLVMDIBuilderCreateObjCProperty ( Addressable Builder,  Addressable Name,  long NameLen,  Addressable File,  int LineNo,  Addressable GetterName,  long GetterNameLen,  Addressable SetterName,  long SetterNameLen,  int PropertyAttributes,  Addressable Ty) {
        var mh$ = LLVMDIBuilderCreateObjCProperty$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Name, NameLen, File, LineNo, GetterName, GetterNameLen, SetterName, SetterNameLen, PropertyAttributes, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateObjectPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LLVMDIBuilderCreateObjectPointerType$MH,"LLVMDIBuilderCreateObjectPointerType");
    }
    public static MemoryAddress LLVMDIBuilderCreateObjectPointerType ( Addressable Builder,  Addressable Type) {
        var mh$ = LLVMDIBuilderCreateObjectPointerType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateQualifiedType$MH() {
        return RuntimeHelper.requireNonNull(constants$322.LLVMDIBuilderCreateQualifiedType$MH,"LLVMDIBuilderCreateQualifiedType");
    }
    public static MemoryAddress LLVMDIBuilderCreateQualifiedType ( Addressable Builder,  int Tag,  Addressable Type) {
        var mh$ = LLVMDIBuilderCreateQualifiedType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Tag, Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateReferenceType$MH() {
        return RuntimeHelper.requireNonNull(constants$322.LLVMDIBuilderCreateReferenceType$MH,"LLVMDIBuilderCreateReferenceType");
    }
    public static MemoryAddress LLVMDIBuilderCreateReferenceType ( Addressable Builder,  int Tag,  Addressable Type) {
        var mh$ = LLVMDIBuilderCreateReferenceType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Tag, Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateNullPtrType$MH() {
        return RuntimeHelper.requireNonNull(constants$322.LLVMDIBuilderCreateNullPtrType$MH,"LLVMDIBuilderCreateNullPtrType");
    }
    public static MemoryAddress LLVMDIBuilderCreateNullPtrType ( Addressable Builder) {
        var mh$ = LLVMDIBuilderCreateNullPtrType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateTypedef$MH() {
        return RuntimeHelper.requireNonNull(constants$322.LLVMDIBuilderCreateTypedef$MH,"LLVMDIBuilderCreateTypedef");
    }
    public static MemoryAddress LLVMDIBuilderCreateTypedef ( Addressable Builder,  Addressable Type,  Addressable Name,  long NameLen,  Addressable File,  int LineNo,  Addressable Scope,  int AlignInBits) {
        var mh$ = LLVMDIBuilderCreateTypedef$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Type, Name, NameLen, File, LineNo, Scope, AlignInBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateInheritance$MH() {
        return RuntimeHelper.requireNonNull(constants$322.LLVMDIBuilderCreateInheritance$MH,"LLVMDIBuilderCreateInheritance");
    }
    public static MemoryAddress LLVMDIBuilderCreateInheritance ( Addressable Builder,  Addressable Ty,  Addressable BaseTy,  long BaseOffset,  int VBPtrOffset,  int Flags) {
        var mh$ = LLVMDIBuilderCreateInheritance$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Ty, BaseTy, BaseOffset, VBPtrOffset, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateForwardDecl$MH() {
        return RuntimeHelper.requireNonNull(constants$322.LLVMDIBuilderCreateForwardDecl$MH,"LLVMDIBuilderCreateForwardDecl");
    }
    public static MemoryAddress LLVMDIBuilderCreateForwardDecl ( Addressable Builder,  int Tag,  Addressable Name,  long NameLen,  Addressable Scope,  Addressable File,  int Line,  int RuntimeLang,  long SizeInBits,  int AlignInBits,  Addressable UniqueIdentifier,  long UniqueIdentifierLen) {
        var mh$ = LLVMDIBuilderCreateForwardDecl$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Tag, Name, NameLen, Scope, File, Line, RuntimeLang, SizeInBits, AlignInBits, UniqueIdentifier, UniqueIdentifierLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateReplaceableCompositeType$MH() {
        return RuntimeHelper.requireNonNull(constants$323.LLVMDIBuilderCreateReplaceableCompositeType$MH,"LLVMDIBuilderCreateReplaceableCompositeType");
    }
    public static MemoryAddress LLVMDIBuilderCreateReplaceableCompositeType ( Addressable Builder,  int Tag,  Addressable Name,  long NameLen,  Addressable Scope,  Addressable File,  int Line,  int RuntimeLang,  long SizeInBits,  int AlignInBits,  int Flags,  Addressable UniqueIdentifier,  long UniqueIdentifierLen) {
        var mh$ = LLVMDIBuilderCreateReplaceableCompositeType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Tag, Name, NameLen, Scope, File, Line, RuntimeLang, SizeInBits, AlignInBits, Flags, UniqueIdentifier, UniqueIdentifierLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateBitFieldMemberType$MH() {
        return RuntimeHelper.requireNonNull(constants$323.LLVMDIBuilderCreateBitFieldMemberType$MH,"LLVMDIBuilderCreateBitFieldMemberType");
    }
    public static MemoryAddress LLVMDIBuilderCreateBitFieldMemberType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNumber,  long SizeInBits,  long OffsetInBits,  long StorageOffsetInBits,  int Flags,  Addressable Type) {
        var mh$ = LLVMDIBuilderCreateBitFieldMemberType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNumber, SizeInBits, OffsetInBits, StorageOffsetInBits, Flags, Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateClassType$MH() {
        return RuntimeHelper.requireNonNull(constants$323.LLVMDIBuilderCreateClassType$MH,"LLVMDIBuilderCreateClassType");
    }
    public static MemoryAddress LLVMDIBuilderCreateClassType ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNumber,  long SizeInBits,  int AlignInBits,  long OffsetInBits,  int Flags,  Addressable DerivedFrom,  Addressable Elements,  int NumElements,  Addressable VTableHolder,  Addressable TemplateParamsNode,  Addressable UniqueIdentifier,  long UniqueIdentifierLen) {
        var mh$ = LLVMDIBuilderCreateClassType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNumber, SizeInBits, AlignInBits, OffsetInBits, Flags, DerivedFrom, Elements, NumElements, VTableHolder, TemplateParamsNode, UniqueIdentifier, UniqueIdentifierLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateArtificialType$MH() {
        return RuntimeHelper.requireNonNull(constants$323.LLVMDIBuilderCreateArtificialType$MH,"LLVMDIBuilderCreateArtificialType");
    }
    public static MemoryAddress LLVMDIBuilderCreateArtificialType ( Addressable Builder,  Addressable Type) {
        var mh$ = LLVMDIBuilderCreateArtificialType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDITypeGetName$MH() {
        return RuntimeHelper.requireNonNull(constants$323.LLVMDITypeGetName$MH,"LLVMDITypeGetName");
    }
    public static MemoryAddress LLVMDITypeGetName ( Addressable DType,  Addressable Length) {
        var mh$ = LLVMDITypeGetName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(DType, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDITypeGetSizeInBits$MH() {
        return RuntimeHelper.requireNonNull(constants$323.LLVMDITypeGetSizeInBits$MH,"LLVMDITypeGetSizeInBits");
    }
    public static long LLVMDITypeGetSizeInBits ( Addressable DType) {
        var mh$ = LLVMDITypeGetSizeInBits$MH();
        try {
            return (long)mh$.invokeExact(DType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDITypeGetOffsetInBits$MH() {
        return RuntimeHelper.requireNonNull(constants$324.LLVMDITypeGetOffsetInBits$MH,"LLVMDITypeGetOffsetInBits");
    }
    public static long LLVMDITypeGetOffsetInBits ( Addressable DType) {
        var mh$ = LLVMDITypeGetOffsetInBits$MH();
        try {
            return (long)mh$.invokeExact(DType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDITypeGetAlignInBits$MH() {
        return RuntimeHelper.requireNonNull(constants$324.LLVMDITypeGetAlignInBits$MH,"LLVMDITypeGetAlignInBits");
    }
    public static int LLVMDITypeGetAlignInBits ( Addressable DType) {
        var mh$ = LLVMDITypeGetAlignInBits$MH();
        try {
            return (int)mh$.invokeExact(DType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDITypeGetLine$MH() {
        return RuntimeHelper.requireNonNull(constants$324.LLVMDITypeGetLine$MH,"LLVMDITypeGetLine");
    }
    public static int LLVMDITypeGetLine ( Addressable DType) {
        var mh$ = LLVMDITypeGetLine$MH();
        try {
            return (int)mh$.invokeExact(DType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDITypeGetFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$324.LLVMDITypeGetFlags$MH,"LLVMDITypeGetFlags");
    }
    public static int LLVMDITypeGetFlags ( Addressable DType) {
        var mh$ = LLVMDITypeGetFlags$MH();
        try {
            return (int)mh$.invokeExact(DType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderGetOrCreateSubrange$MH() {
        return RuntimeHelper.requireNonNull(constants$324.LLVMDIBuilderGetOrCreateSubrange$MH,"LLVMDIBuilderGetOrCreateSubrange");
    }
    public static MemoryAddress LLVMDIBuilderGetOrCreateSubrange ( Addressable Builder,  long LowerBound,  long Count) {
        var mh$ = LLVMDIBuilderGetOrCreateSubrange$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, LowerBound, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderGetOrCreateArray$MH() {
        return RuntimeHelper.requireNonNull(constants$324.LLVMDIBuilderGetOrCreateArray$MH,"LLVMDIBuilderGetOrCreateArray");
    }
    public static MemoryAddress LLVMDIBuilderGetOrCreateArray ( Addressable Builder,  Addressable Data,  long NumElements) {
        var mh$ = LLVMDIBuilderGetOrCreateArray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Data, NumElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateExpression$MH() {
        return RuntimeHelper.requireNonNull(constants$325.LLVMDIBuilderCreateExpression$MH,"LLVMDIBuilderCreateExpression");
    }
    public static MemoryAddress LLVMDIBuilderCreateExpression ( Addressable Builder,  Addressable Addr,  long Length) {
        var mh$ = LLVMDIBuilderCreateExpression$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Addr, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateConstantValueExpression$MH() {
        return RuntimeHelper.requireNonNull(constants$325.LLVMDIBuilderCreateConstantValueExpression$MH,"LLVMDIBuilderCreateConstantValueExpression");
    }
    public static MemoryAddress LLVMDIBuilderCreateConstantValueExpression ( Addressable Builder,  long Value) {
        var mh$ = LLVMDIBuilderCreateConstantValueExpression$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateGlobalVariableExpression$MH() {
        return RuntimeHelper.requireNonNull(constants$325.LLVMDIBuilderCreateGlobalVariableExpression$MH,"LLVMDIBuilderCreateGlobalVariableExpression");
    }
    public static MemoryAddress LLVMDIBuilderCreateGlobalVariableExpression ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable Linkage,  long LinkLen,  Addressable File,  int LineNo,  Addressable Ty,  int LocalToUnit,  Addressable Expr,  Addressable Decl,  int AlignInBits) {
        var mh$ = LLVMDIBuilderCreateGlobalVariableExpression$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, Linkage, LinkLen, File, LineNo, Ty, LocalToUnit, Expr, Decl, AlignInBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetDINodeTag$MH() {
        return RuntimeHelper.requireNonNull(constants$325.LLVMGetDINodeTag$MH,"LLVMGetDINodeTag");
    }
    public static short LLVMGetDINodeTag ( Addressable MD) {
        var mh$ = LLVMGetDINodeTag$MH();
        try {
            return (short)mh$.invokeExact(MD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIGlobalVariableExpressionGetVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$325.LLVMDIGlobalVariableExpressionGetVariable$MH,"LLVMDIGlobalVariableExpressionGetVariable");
    }
    public static MemoryAddress LLVMDIGlobalVariableExpressionGetVariable ( Addressable GVE) {
        var mh$ = LLVMDIGlobalVariableExpressionGetVariable$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GVE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIGlobalVariableExpressionGetExpression$MH() {
        return RuntimeHelper.requireNonNull(constants$325.LLVMDIGlobalVariableExpressionGetExpression$MH,"LLVMDIGlobalVariableExpressionGetExpression");
    }
    public static MemoryAddress LLVMDIGlobalVariableExpressionGetExpression ( Addressable GVE) {
        var mh$ = LLVMDIGlobalVariableExpressionGetExpression$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(GVE);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIVariableGetFile$MH() {
        return RuntimeHelper.requireNonNull(constants$326.LLVMDIVariableGetFile$MH,"LLVMDIVariableGetFile");
    }
    public static MemoryAddress LLVMDIVariableGetFile ( Addressable Var) {
        var mh$ = LLVMDIVariableGetFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Var);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIVariableGetScope$MH() {
        return RuntimeHelper.requireNonNull(constants$326.LLVMDIVariableGetScope$MH,"LLVMDIVariableGetScope");
    }
    public static MemoryAddress LLVMDIVariableGetScope ( Addressable Var) {
        var mh$ = LLVMDIVariableGetScope$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Var);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIVariableGetLine$MH() {
        return RuntimeHelper.requireNonNull(constants$326.LLVMDIVariableGetLine$MH,"LLVMDIVariableGetLine");
    }
    public static int LLVMDIVariableGetLine ( Addressable Var) {
        var mh$ = LLVMDIVariableGetLine$MH();
        try {
            return (int)mh$.invokeExact(Var);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMTemporaryMDNode$MH() {
        return RuntimeHelper.requireNonNull(constants$326.LLVMTemporaryMDNode$MH,"LLVMTemporaryMDNode");
    }
    public static MemoryAddress LLVMTemporaryMDNode ( Addressable Ctx,  Addressable Data,  long NumElements) {
        var mh$ = LLVMTemporaryMDNode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ctx, Data, NumElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeTemporaryMDNode$MH() {
        return RuntimeHelper.requireNonNull(constants$326.LLVMDisposeTemporaryMDNode$MH,"LLVMDisposeTemporaryMDNode");
    }
    public static void LLVMDisposeTemporaryMDNode ( Addressable TempNode) {
        var mh$ = LLVMDisposeTemporaryMDNode$MH();
        try {
            mh$.invokeExact(TempNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMetadataReplaceAllUsesWith$MH() {
        return RuntimeHelper.requireNonNull(constants$326.LLVMMetadataReplaceAllUsesWith$MH,"LLVMMetadataReplaceAllUsesWith");
    }
    public static void LLVMMetadataReplaceAllUsesWith ( Addressable TempTargetMetadata,  Addressable Replacement) {
        var mh$ = LLVMMetadataReplaceAllUsesWith$MH();
        try {
            mh$.invokeExact(TempTargetMetadata, Replacement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateTempGlobalVariableFwdDecl$MH() {
        return RuntimeHelper.requireNonNull(constants$327.LLVMDIBuilderCreateTempGlobalVariableFwdDecl$MH,"LLVMDIBuilderCreateTempGlobalVariableFwdDecl");
    }
    public static MemoryAddress LLVMDIBuilderCreateTempGlobalVariableFwdDecl ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable Linkage,  long LnkLen,  Addressable File,  int LineNo,  Addressable Ty,  int LocalToUnit,  Addressable Decl,  int AlignInBits) {
        var mh$ = LLVMDIBuilderCreateTempGlobalVariableFwdDecl$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, Linkage, LnkLen, File, LineNo, Ty, LocalToUnit, Decl, AlignInBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderInsertDeclareBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$327.LLVMDIBuilderInsertDeclareBefore$MH,"LLVMDIBuilderInsertDeclareBefore");
    }
    public static MemoryAddress LLVMDIBuilderInsertDeclareBefore ( Addressable Builder,  Addressable Storage,  Addressable VarInfo,  Addressable Expr,  Addressable DebugLoc,  Addressable Instr) {
        var mh$ = LLVMDIBuilderInsertDeclareBefore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Storage, VarInfo, Expr, DebugLoc, Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderInsertDeclareAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$327.LLVMDIBuilderInsertDeclareAtEnd$MH,"LLVMDIBuilderInsertDeclareAtEnd");
    }
    public static MemoryAddress LLVMDIBuilderInsertDeclareAtEnd ( Addressable Builder,  Addressable Storage,  Addressable VarInfo,  Addressable Expr,  Addressable DebugLoc,  Addressable Block) {
        var mh$ = LLVMDIBuilderInsertDeclareAtEnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Storage, VarInfo, Expr, DebugLoc, Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderInsertDbgValueBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$327.LLVMDIBuilderInsertDbgValueBefore$MH,"LLVMDIBuilderInsertDbgValueBefore");
    }
    public static MemoryAddress LLVMDIBuilderInsertDbgValueBefore ( Addressable Builder,  Addressable Val,  Addressable VarInfo,  Addressable Expr,  Addressable DebugLoc,  Addressable Instr) {
        var mh$ = LLVMDIBuilderInsertDbgValueBefore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Val, VarInfo, Expr, DebugLoc, Instr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderInsertDbgValueAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$327.LLVMDIBuilderInsertDbgValueAtEnd$MH,"LLVMDIBuilderInsertDbgValueAtEnd");
    }
    public static MemoryAddress LLVMDIBuilderInsertDbgValueAtEnd ( Addressable Builder,  Addressable Val,  Addressable VarInfo,  Addressable Expr,  Addressable DebugLoc,  Addressable Block) {
        var mh$ = LLVMDIBuilderInsertDbgValueAtEnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Val, VarInfo, Expr, DebugLoc, Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateAutoVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$327.LLVMDIBuilderCreateAutoVariable$MH,"LLVMDIBuilderCreateAutoVariable");
    }
    public static MemoryAddress LLVMDIBuilderCreateAutoVariable ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  Addressable File,  int LineNo,  Addressable Ty,  int AlwaysPreserve,  int Flags,  int AlignInBits) {
        var mh$ = LLVMDIBuilderCreateAutoVariable$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, File, LineNo, Ty, AlwaysPreserve, Flags, AlignInBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDIBuilderCreateParameterVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$328.LLVMDIBuilderCreateParameterVariable$MH,"LLVMDIBuilderCreateParameterVariable");
    }
    public static MemoryAddress LLVMDIBuilderCreateParameterVariable ( Addressable Builder,  Addressable Scope,  Addressable Name,  long NameLen,  int ArgNo,  Addressable File,  int LineNo,  Addressable Ty,  int AlwaysPreserve,  int Flags) {
        var mh$ = LLVMDIBuilderCreateParameterVariable$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Builder, Scope, Name, NameLen, ArgNo, File, LineNo, Ty, AlwaysPreserve, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSubprogram$MH() {
        return RuntimeHelper.requireNonNull(constants$328.LLVMGetSubprogram$MH,"LLVMGetSubprogram");
    }
    public static MemoryAddress LLVMGetSubprogram ( Addressable Func) {
        var mh$ = LLVMGetSubprogram$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetSubprogram$MH() {
        return RuntimeHelper.requireNonNull(constants$328.LLVMSetSubprogram$MH,"LLVMSetSubprogram");
    }
    public static void LLVMSetSubprogram ( Addressable Func,  Addressable SP) {
        var mh$ = LLVMSetSubprogram$MH();
        try {
            mh$.invokeExact(Func, SP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDISubprogramGetLine$MH() {
        return RuntimeHelper.requireNonNull(constants$328.LLVMDISubprogramGetLine$MH,"LLVMDISubprogramGetLine");
    }
    public static int LLVMDISubprogramGetLine ( Addressable Subprogram) {
        var mh$ = LLVMDISubprogramGetLine$MH();
        try {
            return (int)mh$.invokeExact(Subprogram);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstructionGetDebugLoc$MH() {
        return RuntimeHelper.requireNonNull(constants$328.LLVMInstructionGetDebugLoc$MH,"LLVMInstructionGetDebugLoc");
    }
    public static MemoryAddress LLVMInstructionGetDebugLoc ( Addressable Inst) {
        var mh$ = LLVMInstructionGetDebugLoc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Inst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstructionSetDebugLoc$MH() {
        return RuntimeHelper.requireNonNull(constants$328.LLVMInstructionSetDebugLoc$MH,"LLVMInstructionSetDebugLoc");
    }
    public static void LLVMInstructionSetDebugLoc ( Addressable Inst,  Addressable Loc) {
        var mh$ = LLVMInstructionSetDebugLoc$MH();
        try {
            mh$.invokeExact(Inst, Loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetMetadataKind$MH() {
        return RuntimeHelper.requireNonNull(constants$329.LLVMGetMetadataKind$MH,"LLVMGetMetadataKind");
    }
    public static int LLVMGetMetadataKind ( Addressable Metadata) {
        var mh$ = LLVMGetMetadataKind$MH();
        try {
            return (int)mh$.invokeExact(Metadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__scf__$MH() {
        return RuntimeHelper.requireNonNull(constants$329.mlirGetDialectHandle__scf__$MH,"mlirGetDialectHandle__scf__");
    }
    public static MemorySegment mlirGetDialectHandle__scf__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__scf__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__tensor__$MH() {
        return RuntimeHelper.requireNonNull(constants$329.mlirGetDialectHandle__tensor__$MH,"mlirGetDialectHandle__tensor__");
    }
    public static MemorySegment mlirGetDialectHandle__tensor__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__tensor__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__llvm__$MH() {
        return RuntimeHelper.requireNonNull(constants$329.mlirGetDialectHandle__llvm__$MH,"mlirGetDialectHandle__llvm__");
    }
    public static MemorySegment mlirGetDialectHandle__llvm__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__llvm__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLLVMPointerTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$329.mlirLLVMPointerTypeGet$MH,"mlirLLVMPointerTypeGet");
    }
    public static MemorySegment mlirLLVMPointerTypeGet ( SegmentAllocator allocator,  MemorySegment pointee,  int addressSpace) {
        var mh$ = mlirLLVMPointerTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pointee, addressSpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLLVMVoidTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$329.mlirLLVMVoidTypeGet$MH,"mlirLLVMVoidTypeGet");
    }
    public static MemorySegment mlirLLVMVoidTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirLLVMVoidTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLLVMArrayTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$330.mlirLLVMArrayTypeGet$MH,"mlirLLVMArrayTypeGet");
    }
    public static MemorySegment mlirLLVMArrayTypeGet ( SegmentAllocator allocator,  MemorySegment elementType,  int numElements) {
        var mh$ = mlirLLVMArrayTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType, numElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLLVMFunctionTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$330.mlirLLVMFunctionTypeGet$MH,"mlirLLVMFunctionTypeGet");
    }
    public static MemorySegment mlirLLVMFunctionTypeGet ( SegmentAllocator allocator,  MemorySegment resultType,  long nArgumentTypes,  Addressable argumentTypes,  boolean isVarArg) {
        var mh$ = mlirLLVMFunctionTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, resultType, nArgumentTypes, argumentTypes, isVarArg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLLVMStructTypeLiteralGet$MH() {
        return RuntimeHelper.requireNonNull(constants$330.mlirLLVMStructTypeLiteralGet$MH,"mlirLLVMStructTypeLiteralGet");
    }
    public static MemorySegment mlirLLVMStructTypeLiteralGet ( SegmentAllocator allocator,  MemorySegment ctx,  long nFieldTypes,  Addressable fieldTypes,  boolean isPacked) {
        var mh$ = mlirLLVMStructTypeLiteralGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, nFieldTypes, fieldTypes, isPacked);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMAnyComdatSelectionKind() {
        return (int)0L;
    }
    public static int LLVMExactMatchComdatSelectionKind() {
        return (int)1L;
    }
    public static int LLVMLargestComdatSelectionKind() {
        return (int)2L;
    }
    public static int LLVMNoDeduplicateComdatSelectionKind() {
        return (int)3L;
    }
    public static int LLVMSameSizeComdatSelectionKind() {
        return (int)4L;
    }
    public static MethodHandle LLVMGetOrInsertComdat$MH() {
        return RuntimeHelper.requireNonNull(constants$330.LLVMGetOrInsertComdat$MH,"LLVMGetOrInsertComdat");
    }
    public static MemoryAddress LLVMGetOrInsertComdat ( Addressable M,  Addressable Name) {
        var mh$ = LLVMGetOrInsertComdat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetComdat$MH() {
        return RuntimeHelper.requireNonNull(constants$330.LLVMGetComdat$MH,"LLVMGetComdat");
    }
    public static MemoryAddress LLVMGetComdat ( Addressable V) {
        var mh$ = LLVMGetComdat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(V);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetComdat$MH() {
        return RuntimeHelper.requireNonNull(constants$330.LLVMSetComdat$MH,"LLVMSetComdat");
    }
    public static void LLVMSetComdat ( Addressable V,  Addressable C) {
        var mh$ = LLVMSetComdat$MH();
        try {
            mh$.invokeExact(V, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetComdatSelectionKind$MH() {
        return RuntimeHelper.requireNonNull(constants$331.LLVMGetComdatSelectionKind$MH,"LLVMGetComdatSelectionKind");
    }
    public static int LLVMGetComdatSelectionKind ( Addressable C) {
        var mh$ = LLVMGetComdatSelectionKind$MH();
        try {
            return (int)mh$.invokeExact(C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetComdatSelectionKind$MH() {
        return RuntimeHelper.requireNonNull(constants$331.LLVMSetComdatSelectionKind$MH,"LLVMSetComdatSelectionKind");
    }
    public static void LLVMSetComdatSelectionKind ( Addressable C,  int Kind) {
        var mh$ = LLVMSetComdatSelectionKind$MH();
        try {
            mh$.invokeExact(C, Kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMParseIRInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$331.LLVMParseIRInContext$MH,"LLVMParseIRInContext");
    }
    public static int LLVMParseIRInContext ( Addressable ContextRef,  Addressable MemBuf,  Addressable OutM,  Addressable OutMessage) {
        var mh$ = LLVMParseIRInContext$MH();
        try {
            return (int)mh$.invokeExact(ContextRef, MemBuf, OutM, OutMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateDisasm$MH() {
        return RuntimeHelper.requireNonNull(constants$331.LLVMCreateDisasm$MH,"LLVMCreateDisasm");
    }
    public static MemoryAddress LLVMCreateDisasm ( Addressable TripleName,  Addressable DisInfo,  int TagType,  Addressable GetOpInfo,  Addressable SymbolLookUp) {
        var mh$ = LLVMCreateDisasm$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TripleName, DisInfo, TagType, GetOpInfo, SymbolLookUp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateDisasmCPU$MH() {
        return RuntimeHelper.requireNonNull(constants$331.LLVMCreateDisasmCPU$MH,"LLVMCreateDisasmCPU");
    }
    public static MemoryAddress LLVMCreateDisasmCPU ( Addressable Triple,  Addressable CPU,  Addressable DisInfo,  int TagType,  Addressable GetOpInfo,  Addressable SymbolLookUp) {
        var mh$ = LLVMCreateDisasmCPU$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Triple, CPU, DisInfo, TagType, GetOpInfo, SymbolLookUp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateDisasmCPUFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$331.LLVMCreateDisasmCPUFeatures$MH,"LLVMCreateDisasmCPUFeatures");
    }
    public static MemoryAddress LLVMCreateDisasmCPUFeatures ( Addressable Triple,  Addressable CPU,  Addressable Features,  Addressable DisInfo,  int TagType,  Addressable GetOpInfo,  Addressable SymbolLookUp) {
        var mh$ = LLVMCreateDisasmCPUFeatures$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Triple, CPU, Features, DisInfo, TagType, GetOpInfo, SymbolLookUp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetDisasmOptions$MH() {
        return RuntimeHelper.requireNonNull(constants$332.LLVMSetDisasmOptions$MH,"LLVMSetDisasmOptions");
    }
    public static int LLVMSetDisasmOptions ( Addressable DC,  long Options) {
        var mh$ = LLVMSetDisasmOptions$MH();
        try {
            return (int)mh$.invokeExact(DC, Options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisasmDispose$MH() {
        return RuntimeHelper.requireNonNull(constants$332.LLVMDisasmDispose$MH,"LLVMDisasmDispose");
    }
    public static void LLVMDisasmDispose ( Addressable DC) {
        var mh$ = LLVMDisasmDispose$MH();
        try {
            mh$.invokeExact(DC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisasmInstruction$MH() {
        return RuntimeHelper.requireNonNull(constants$332.LLVMDisasmInstruction$MH,"LLVMDisasmInstruction");
    }
    public static long LLVMDisasmInstruction ( Addressable DC,  Addressable Bytes,  long BytesSize,  long PC,  Addressable OutString,  long OutStringSize) {
        var mh$ = LLVMDisasmInstruction$MH();
        try {
            return (long)mh$.invokeExact(DC, Bytes, BytesSize, PC, OutString, OutStringSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeGetNull$MH() {
        return RuntimeHelper.requireNonNull(constants$332.mlirAttributeGetNull$MH,"mlirAttributeGetNull");
    }
    public static MemorySegment mlirAttributeGetNull ( SegmentAllocator allocator) {
        var mh$ = mlirAttributeGetNull$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsALocation$MH() {
        return RuntimeHelper.requireNonNull(constants$332.mlirAttributeIsALocation$MH,"mlirAttributeIsALocation");
    }
    public static boolean mlirAttributeIsALocation ( MemorySegment attr) {
        var mh$ = mlirAttributeIsALocation$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAAffineMap$MH() {
        return RuntimeHelper.requireNonNull(constants$332.mlirAttributeIsAAffineMap$MH,"mlirAttributeIsAAffineMap");
    }
    public static boolean mlirAttributeIsAAffineMap ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAAffineMap$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$333.mlirAffineMapAttrGet$MH,"mlirAffineMapAttrGet");
    }
    public static MemorySegment mlirAffineMapAttrGet ( SegmentAllocator allocator,  MemorySegment map) {
        var mh$ = mlirAffineMapAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, map);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$333.mlirAffineMapAttrGetValue$MH,"mlirAffineMapAttrGetValue");
    }
    public static MemorySegment mlirAffineMapAttrGetValue ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirAffineMapAttrGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAArray$MH() {
        return RuntimeHelper.requireNonNull(constants$333.mlirAttributeIsAArray$MH,"mlirAttributeIsAArray");
    }
    public static boolean mlirAttributeIsAArray ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAArray$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirArrayAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$333.mlirArrayAttrGet$MH,"mlirArrayAttrGet");
    }
    public static MemorySegment mlirArrayAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  long numElements,  Addressable elements) {
        var mh$ = mlirArrayAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirArrayAttrGetNumElements$MH() {
        return RuntimeHelper.requireNonNull(constants$333.mlirArrayAttrGetNumElements$MH,"mlirArrayAttrGetNumElements");
    }
    public static long mlirArrayAttrGetNumElements ( MemorySegment attr) {
        var mh$ = mlirArrayAttrGetNumElements$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirArrayAttrGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$333.mlirArrayAttrGetElement$MH,"mlirArrayAttrGetElement");
    }
    public static MemorySegment mlirArrayAttrGetElement ( SegmentAllocator allocator,  MemorySegment attr,  long pos) {
        var mh$ = mlirArrayAttrGetElement$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADictionary$MH() {
        return RuntimeHelper.requireNonNull(constants$334.mlirAttributeIsADictionary$MH,"mlirAttributeIsADictionary");
    }
    public static boolean mlirAttributeIsADictionary ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADictionary$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDictionaryAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$334.mlirDictionaryAttrGet$MH,"mlirDictionaryAttrGet");
    }
    public static MemorySegment mlirDictionaryAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  long numElements,  Addressable elements) {
        var mh$ = mlirDictionaryAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDictionaryAttrGetNumElements$MH() {
        return RuntimeHelper.requireNonNull(constants$334.mlirDictionaryAttrGetNumElements$MH,"mlirDictionaryAttrGetNumElements");
    }
    public static long mlirDictionaryAttrGetNumElements ( MemorySegment attr) {
        var mh$ = mlirDictionaryAttrGetNumElements$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDictionaryAttrGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$334.mlirDictionaryAttrGetElement$MH,"mlirDictionaryAttrGetElement");
    }
    public static MemorySegment mlirDictionaryAttrGetElement ( SegmentAllocator allocator,  MemorySegment attr,  long pos) {
        var mh$ = mlirDictionaryAttrGetElement$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDictionaryAttrGetElementByName$MH() {
        return RuntimeHelper.requireNonNull(constants$334.mlirDictionaryAttrGetElementByName$MH,"mlirDictionaryAttrGetElementByName");
    }
    public static MemorySegment mlirDictionaryAttrGetElementByName ( SegmentAllocator allocator,  MemorySegment attr,  MemorySegment name) {
        var mh$ = mlirDictionaryAttrGetElementByName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAFloat$MH() {
        return RuntimeHelper.requireNonNull(constants$334.mlirAttributeIsAFloat$MH,"mlirAttributeIsAFloat");
    }
    public static boolean mlirAttributeIsAFloat ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAFloat$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloatAttrDoubleGet$MH() {
        return RuntimeHelper.requireNonNull(constants$335.mlirFloatAttrDoubleGet$MH,"mlirFloatAttrDoubleGet");
    }
    public static MemorySegment mlirFloatAttrDoubleGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment type,  double value) {
        var mh$ = mlirFloatAttrDoubleGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloatAttrDoubleGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$335.mlirFloatAttrDoubleGetChecked$MH,"mlirFloatAttrDoubleGetChecked");
    }
    public static MemorySegment mlirFloatAttrDoubleGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  MemorySegment type,  double value) {
        var mh$ = mlirFloatAttrDoubleGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloatAttrGetValueDouble$MH() {
        return RuntimeHelper.requireNonNull(constants$335.mlirFloatAttrGetValueDouble$MH,"mlirFloatAttrGetValueDouble");
    }
    public static double mlirFloatAttrGetValueDouble ( MemorySegment attr) {
        var mh$ = mlirFloatAttrGetValueDouble$MH();
        try {
            return (double)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAInteger$MH() {
        return RuntimeHelper.requireNonNull(constants$335.mlirAttributeIsAInteger$MH,"mlirAttributeIsAInteger");
    }
    public static boolean mlirAttributeIsAInteger ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAInteger$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$335.mlirIntegerAttrGet$MH,"mlirIntegerAttrGet");
    }
    public static MemorySegment mlirIntegerAttrGet ( SegmentAllocator allocator,  MemorySegment type,  long value) {
        var mh$ = mlirIntegerAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerAttrGetValueInt$MH() {
        return RuntimeHelper.requireNonNull(constants$335.mlirIntegerAttrGetValueInt$MH,"mlirIntegerAttrGetValueInt");
    }
    public static long mlirIntegerAttrGetValueInt ( MemorySegment attr) {
        var mh$ = mlirIntegerAttrGetValueInt$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerAttrGetValueSInt$MH() {
        return RuntimeHelper.requireNonNull(constants$336.mlirIntegerAttrGetValueSInt$MH,"mlirIntegerAttrGetValueSInt");
    }
    public static long mlirIntegerAttrGetValueSInt ( MemorySegment attr) {
        var mh$ = mlirIntegerAttrGetValueSInt$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerAttrGetValueUInt$MH() {
        return RuntimeHelper.requireNonNull(constants$336.mlirIntegerAttrGetValueUInt$MH,"mlirIntegerAttrGetValueUInt");
    }
    public static long mlirIntegerAttrGetValueUInt ( MemorySegment attr) {
        var mh$ = mlirIntegerAttrGetValueUInt$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsABool$MH() {
        return RuntimeHelper.requireNonNull(constants$336.mlirAttributeIsABool$MH,"mlirAttributeIsABool");
    }
    public static boolean mlirAttributeIsABool ( MemorySegment attr) {
        var mh$ = mlirAttributeIsABool$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBoolAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$336.mlirBoolAttrGet$MH,"mlirBoolAttrGet");
    }
    public static MemorySegment mlirBoolAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  int value) {
        var mh$ = mlirBoolAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBoolAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$336.mlirBoolAttrGetValue$MH,"mlirBoolAttrGetValue");
    }
    public static boolean mlirBoolAttrGetValue ( MemorySegment attr) {
        var mh$ = mlirBoolAttrGetValue$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAIntegerSet$MH() {
        return RuntimeHelper.requireNonNull(constants$336.mlirAttributeIsAIntegerSet$MH,"mlirAttributeIsAIntegerSet");
    }
    public static boolean mlirAttributeIsAIntegerSet ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAIntegerSet$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAOpaque$MH() {
        return RuntimeHelper.requireNonNull(constants$337.mlirAttributeIsAOpaque$MH,"mlirAttributeIsAOpaque");
    }
    public static boolean mlirAttributeIsAOpaque ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAOpaque$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpaqueAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$337.mlirOpaqueAttrGet$MH,"mlirOpaqueAttrGet");
    }
    public static MemorySegment mlirOpaqueAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment dialectNamespace,  long dataLength,  Addressable data,  MemorySegment type) {
        var mh$ = mlirOpaqueAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, dialectNamespace, dataLength, data, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpaqueAttrGetDialectNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$337.mlirOpaqueAttrGetDialectNamespace$MH,"mlirOpaqueAttrGetDialectNamespace");
    }
    public static MemorySegment mlirOpaqueAttrGetDialectNamespace ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirOpaqueAttrGetDialectNamespace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpaqueAttrGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$337.mlirOpaqueAttrGetData$MH,"mlirOpaqueAttrGetData");
    }
    public static MemorySegment mlirOpaqueAttrGetData ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirOpaqueAttrGetData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAString$MH() {
        return RuntimeHelper.requireNonNull(constants$337.mlirAttributeIsAString$MH,"mlirAttributeIsAString");
    }
    public static boolean mlirAttributeIsAString ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAString$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStringAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$337.mlirStringAttrGet$MH,"mlirStringAttrGet");
    }
    public static MemorySegment mlirStringAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment str) {
        var mh$ = mlirStringAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStringAttrTypedGet$MH() {
        return RuntimeHelper.requireNonNull(constants$338.mlirStringAttrTypedGet$MH,"mlirStringAttrTypedGet");
    }
    public static MemorySegment mlirStringAttrTypedGet ( SegmentAllocator allocator,  MemorySegment type,  MemorySegment str) {
        var mh$ = mlirStringAttrTypedGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStringAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$338.mlirStringAttrGetValue$MH,"mlirStringAttrGetValue");
    }
    public static MemorySegment mlirStringAttrGetValue ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirStringAttrGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsASymbolRef$MH() {
        return RuntimeHelper.requireNonNull(constants$338.mlirAttributeIsASymbolRef$MH,"mlirAttributeIsASymbolRef");
    }
    public static boolean mlirAttributeIsASymbolRef ( MemorySegment attr) {
        var mh$ = mlirAttributeIsASymbolRef$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolRefAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$338.mlirSymbolRefAttrGet$MH,"mlirSymbolRefAttrGet");
    }
    public static MemorySegment mlirSymbolRefAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment symbol,  long numReferences,  Addressable references) {
        var mh$ = mlirSymbolRefAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, symbol, numReferences, references);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolRefAttrGetRootReference$MH() {
        return RuntimeHelper.requireNonNull(constants$338.mlirSymbolRefAttrGetRootReference$MH,"mlirSymbolRefAttrGetRootReference");
    }
    public static MemorySegment mlirSymbolRefAttrGetRootReference ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirSymbolRefAttrGetRootReference$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolRefAttrGetLeafReference$MH() {
        return RuntimeHelper.requireNonNull(constants$338.mlirSymbolRefAttrGetLeafReference$MH,"mlirSymbolRefAttrGetLeafReference");
    }
    public static MemorySegment mlirSymbolRefAttrGetLeafReference ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirSymbolRefAttrGetLeafReference$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolRefAttrGetNumNestedReferences$MH() {
        return RuntimeHelper.requireNonNull(constants$339.mlirSymbolRefAttrGetNumNestedReferences$MH,"mlirSymbolRefAttrGetNumNestedReferences");
    }
    public static long mlirSymbolRefAttrGetNumNestedReferences ( MemorySegment attr) {
        var mh$ = mlirSymbolRefAttrGetNumNestedReferences$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolRefAttrGetNestedReference$MH() {
        return RuntimeHelper.requireNonNull(constants$339.mlirSymbolRefAttrGetNestedReference$MH,"mlirSymbolRefAttrGetNestedReference");
    }
    public static MemorySegment mlirSymbolRefAttrGetNestedReference ( SegmentAllocator allocator,  MemorySegment attr,  long pos) {
        var mh$ = mlirSymbolRefAttrGetNestedReference$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAFlatSymbolRef$MH() {
        return RuntimeHelper.requireNonNull(constants$339.mlirAttributeIsAFlatSymbolRef$MH,"mlirAttributeIsAFlatSymbolRef");
    }
    public static boolean mlirAttributeIsAFlatSymbolRef ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAFlatSymbolRef$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFlatSymbolRefAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$339.mlirFlatSymbolRefAttrGet$MH,"mlirFlatSymbolRefAttrGet");
    }
    public static MemorySegment mlirFlatSymbolRefAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment symbol) {
        var mh$ = mlirFlatSymbolRefAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFlatSymbolRefAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$339.mlirFlatSymbolRefAttrGetValue$MH,"mlirFlatSymbolRefAttrGetValue");
    }
    public static MemorySegment mlirFlatSymbolRefAttrGetValue ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirFlatSymbolRefAttrGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAType$MH() {
        return RuntimeHelper.requireNonNull(constants$339.mlirAttributeIsAType$MH,"mlirAttributeIsAType");
    }
    public static boolean mlirAttributeIsAType ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAType$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$340.mlirTypeAttrGet$MH,"mlirTypeAttrGet");
    }
    public static MemorySegment mlirTypeAttrGet ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirTypeAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$340.mlirTypeAttrGetValue$MH,"mlirTypeAttrGetValue");
    }
    public static MemorySegment mlirTypeAttrGetValue ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirTypeAttrGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$340.mlirAttributeIsAUnit$MH,"mlirAttributeIsAUnit");
    }
    public static boolean mlirAttributeIsAUnit ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAUnit$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnitAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$340.mlirUnitAttrGet$MH,"mlirUnitAttrGet");
    }
    public static MemorySegment mlirUnitAttrGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirUnitAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAElements$MH() {
        return RuntimeHelper.requireNonNull(constants$340.mlirAttributeIsAElements$MH,"mlirAttributeIsAElements");
    }
    public static boolean mlirAttributeIsAElements ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAElements$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$340.mlirElementsAttrGetValue$MH,"mlirElementsAttrGetValue");
    }
    public static MemorySegment mlirElementsAttrGetValue ( SegmentAllocator allocator,  MemorySegment attr,  long rank,  Addressable idxs) {
        var mh$ = mlirElementsAttrGetValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, rank, idxs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirElementsAttrIsValidIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$341.mlirElementsAttrIsValidIndex$MH,"mlirElementsAttrIsValidIndex");
    }
    public static boolean mlirElementsAttrIsValidIndex ( MemorySegment attr,  long rank,  Addressable idxs) {
        var mh$ = mlirElementsAttrIsValidIndex$MH();
        try {
            return (boolean)mh$.invokeExact(attr, rank, idxs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirElementsAttrGetNumElements$MH() {
        return RuntimeHelper.requireNonNull(constants$341.mlirElementsAttrGetNumElements$MH,"mlirElementsAttrGetNumElements");
    }
    public static long mlirElementsAttrGetNumElements ( MemorySegment attr) {
        var mh$ = mlirElementsAttrGetNumElements$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseBoolArray$MH() {
        return RuntimeHelper.requireNonNull(constants$341.mlirAttributeIsADenseBoolArray$MH,"mlirAttributeIsADenseBoolArray");
    }
    public static boolean mlirAttributeIsADenseBoolArray ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseBoolArray$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseI8Array$MH() {
        return RuntimeHelper.requireNonNull(constants$341.mlirAttributeIsADenseI8Array$MH,"mlirAttributeIsADenseI8Array");
    }
    public static boolean mlirAttributeIsADenseI8Array ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseI8Array$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseI16Array$MH() {
        return RuntimeHelper.requireNonNull(constants$341.mlirAttributeIsADenseI16Array$MH,"mlirAttributeIsADenseI16Array");
    }
    public static boolean mlirAttributeIsADenseI16Array ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseI16Array$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseI32Array$MH() {
        return RuntimeHelper.requireNonNull(constants$341.mlirAttributeIsADenseI32Array$MH,"mlirAttributeIsADenseI32Array");
    }
    public static boolean mlirAttributeIsADenseI32Array ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseI32Array$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseI64Array$MH() {
        return RuntimeHelper.requireNonNull(constants$342.mlirAttributeIsADenseI64Array$MH,"mlirAttributeIsADenseI64Array");
    }
    public static boolean mlirAttributeIsADenseI64Array ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseI64Array$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseF32Array$MH() {
        return RuntimeHelper.requireNonNull(constants$342.mlirAttributeIsADenseF32Array$MH,"mlirAttributeIsADenseF32Array");
    }
    public static boolean mlirAttributeIsADenseF32Array ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseF32Array$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseF64Array$MH() {
        return RuntimeHelper.requireNonNull(constants$342.mlirAttributeIsADenseF64Array$MH,"mlirAttributeIsADenseF64Array");
    }
    public static boolean mlirAttributeIsADenseF64Array ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseF64Array$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseBoolArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$342.mlirDenseBoolArrayGet$MH,"mlirDenseBoolArrayGet");
    }
    public static MemorySegment mlirDenseBoolArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseBoolArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI8ArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$342.mlirDenseI8ArrayGet$MH,"mlirDenseI8ArrayGet");
    }
    public static MemorySegment mlirDenseI8ArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseI8ArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI16ArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$342.mlirDenseI16ArrayGet$MH,"mlirDenseI16ArrayGet");
    }
    public static MemorySegment mlirDenseI16ArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseI16ArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI32ArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$343.mlirDenseI32ArrayGet$MH,"mlirDenseI32ArrayGet");
    }
    public static MemorySegment mlirDenseI32ArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseI32ArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI64ArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$343.mlirDenseI64ArrayGet$MH,"mlirDenseI64ArrayGet");
    }
    public static MemorySegment mlirDenseI64ArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseI64ArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseF32ArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$343.mlirDenseF32ArrayGet$MH,"mlirDenseF32ArrayGet");
    }
    public static MemorySegment mlirDenseF32ArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseF32ArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseF64ArrayGet$MH() {
        return RuntimeHelper.requireNonNull(constants$343.mlirDenseF64ArrayGet$MH,"mlirDenseF64ArrayGet");
    }
    public static MemorySegment mlirDenseF64ArrayGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable values) {
        var mh$ = mlirDenseF64ArrayGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseArrayGetNumElements$MH() {
        return RuntimeHelper.requireNonNull(constants$343.mlirDenseArrayGetNumElements$MH,"mlirDenseArrayGetNumElements");
    }
    public static long mlirDenseArrayGetNumElements ( MemorySegment attr) {
        var mh$ = mlirDenseArrayGetNumElements$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseBoolArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$343.mlirDenseBoolArrayGetElement$MH,"mlirDenseBoolArrayGetElement");
    }
    public static boolean mlirDenseBoolArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseBoolArrayGetElement$MH();
        try {
            return (boolean)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI8ArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$344.mlirDenseI8ArrayGetElement$MH,"mlirDenseI8ArrayGetElement");
    }
    public static byte mlirDenseI8ArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseI8ArrayGetElement$MH();
        try {
            return (byte)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI16ArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$344.mlirDenseI16ArrayGetElement$MH,"mlirDenseI16ArrayGetElement");
    }
    public static short mlirDenseI16ArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseI16ArrayGetElement$MH();
        try {
            return (short)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI32ArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$344.mlirDenseI32ArrayGetElement$MH,"mlirDenseI32ArrayGetElement");
    }
    public static int mlirDenseI32ArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseI32ArrayGetElement$MH();
        try {
            return (int)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseI64ArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$344.mlirDenseI64ArrayGetElement$MH,"mlirDenseI64ArrayGetElement");
    }
    public static long mlirDenseI64ArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseI64ArrayGetElement$MH();
        try {
            return (long)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseF32ArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$344.mlirDenseF32ArrayGetElement$MH,"mlirDenseF32ArrayGetElement");
    }
    public static float mlirDenseF32ArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseF32ArrayGetElement$MH();
        try {
            return (float)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseF64ArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$344.mlirDenseF64ArrayGetElement$MH,"mlirDenseF64ArrayGetElement");
    }
    public static double mlirDenseF64ArrayGetElement ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseF64ArrayGetElement$MH();
        try {
            return (double)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseElements$MH() {
        return RuntimeHelper.requireNonNull(constants$345.mlirAttributeIsADenseElements$MH,"mlirAttributeIsADenseElements");
    }
    public static boolean mlirAttributeIsADenseElements ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseElements$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseIntElements$MH() {
        return RuntimeHelper.requireNonNull(constants$345.mlirAttributeIsADenseIntElements$MH,"mlirAttributeIsADenseIntElements");
    }
    public static boolean mlirAttributeIsADenseIntElements ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseIntElements$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsADenseFPElements$MH() {
        return RuntimeHelper.requireNonNull(constants$345.mlirAttributeIsADenseFPElements$MH,"mlirAttributeIsADenseFPElements");
    }
    public static boolean mlirAttributeIsADenseFPElements ( MemorySegment attr) {
        var mh$ = mlirAttributeIsADenseFPElements$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$345.mlirDenseElementsAttrGet$MH,"mlirDenseElementsAttrGet");
    }
    public static MemorySegment mlirDenseElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrRawBufferGet$MH() {
        return RuntimeHelper.requireNonNull(constants$345.mlirDenseElementsAttrRawBufferGet$MH,"mlirDenseElementsAttrRawBufferGet");
    }
    public static MemorySegment mlirDenseElementsAttrRawBufferGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long rawBufferSize,  Addressable rawBuffer) {
        var mh$ = mlirDenseElementsAttrRawBufferGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, rawBufferSize, rawBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrSplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$345.mlirDenseElementsAttrSplatGet$MH,"mlirDenseElementsAttrSplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrSplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment element) {
        var mh$ = mlirDenseElementsAttrSplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrBoolSplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$346.mlirDenseElementsAttrBoolSplatGet$MH,"mlirDenseElementsAttrBoolSplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrBoolSplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  boolean element) {
        var mh$ = mlirDenseElementsAttrBoolSplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt8SplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$346.mlirDenseElementsAttrUInt8SplatGet$MH,"mlirDenseElementsAttrUInt8SplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrUInt8SplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  byte element) {
        var mh$ = mlirDenseElementsAttrUInt8SplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt8SplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$346.mlirDenseElementsAttrInt8SplatGet$MH,"mlirDenseElementsAttrInt8SplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrInt8SplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  byte element) {
        var mh$ = mlirDenseElementsAttrInt8SplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt32SplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$346.mlirDenseElementsAttrUInt32SplatGet$MH,"mlirDenseElementsAttrUInt32SplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrUInt32SplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  int element) {
        var mh$ = mlirDenseElementsAttrUInt32SplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt32SplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$346.mlirDenseElementsAttrInt32SplatGet$MH,"mlirDenseElementsAttrInt32SplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrInt32SplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  int element) {
        var mh$ = mlirDenseElementsAttrInt32SplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt64SplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$346.mlirDenseElementsAttrUInt64SplatGet$MH,"mlirDenseElementsAttrUInt64SplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrUInt64SplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long element) {
        var mh$ = mlirDenseElementsAttrUInt64SplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt64SplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$347.mlirDenseElementsAttrInt64SplatGet$MH,"mlirDenseElementsAttrInt64SplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrInt64SplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long element) {
        var mh$ = mlirDenseElementsAttrInt64SplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrFloatSplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$347.mlirDenseElementsAttrFloatSplatGet$MH,"mlirDenseElementsAttrFloatSplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrFloatSplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  float element) {
        var mh$ = mlirDenseElementsAttrFloatSplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrDoubleSplatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$347.mlirDenseElementsAttrDoubleSplatGet$MH,"mlirDenseElementsAttrDoubleSplatGet");
    }
    public static MemorySegment mlirDenseElementsAttrDoubleSplatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  double element) {
        var mh$ = mlirDenseElementsAttrDoubleSplatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrBoolGet$MH() {
        return RuntimeHelper.requireNonNull(constants$347.mlirDenseElementsAttrBoolGet$MH,"mlirDenseElementsAttrBoolGet");
    }
    public static MemorySegment mlirDenseElementsAttrBoolGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrBoolGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt8Get$MH() {
        return RuntimeHelper.requireNonNull(constants$347.mlirDenseElementsAttrUInt8Get$MH,"mlirDenseElementsAttrUInt8Get");
    }
    public static MemorySegment mlirDenseElementsAttrUInt8Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrUInt8Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt8Get$MH() {
        return RuntimeHelper.requireNonNull(constants$347.mlirDenseElementsAttrInt8Get$MH,"mlirDenseElementsAttrInt8Get");
    }
    public static MemorySegment mlirDenseElementsAttrInt8Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrInt8Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt16Get$MH() {
        return RuntimeHelper.requireNonNull(constants$348.mlirDenseElementsAttrUInt16Get$MH,"mlirDenseElementsAttrUInt16Get");
    }
    public static MemorySegment mlirDenseElementsAttrUInt16Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrUInt16Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt16Get$MH() {
        return RuntimeHelper.requireNonNull(constants$348.mlirDenseElementsAttrInt16Get$MH,"mlirDenseElementsAttrInt16Get");
    }
    public static MemorySegment mlirDenseElementsAttrInt16Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrInt16Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt32Get$MH() {
        return RuntimeHelper.requireNonNull(constants$348.mlirDenseElementsAttrUInt32Get$MH,"mlirDenseElementsAttrUInt32Get");
    }
    public static MemorySegment mlirDenseElementsAttrUInt32Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrUInt32Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt32Get$MH() {
        return RuntimeHelper.requireNonNull(constants$348.mlirDenseElementsAttrInt32Get$MH,"mlirDenseElementsAttrInt32Get");
    }
    public static MemorySegment mlirDenseElementsAttrInt32Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrInt32Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrUInt64Get$MH() {
        return RuntimeHelper.requireNonNull(constants$348.mlirDenseElementsAttrUInt64Get$MH,"mlirDenseElementsAttrUInt64Get");
    }
    public static MemorySegment mlirDenseElementsAttrUInt64Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrUInt64Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrInt64Get$MH() {
        return RuntimeHelper.requireNonNull(constants$348.mlirDenseElementsAttrInt64Get$MH,"mlirDenseElementsAttrInt64Get");
    }
    public static MemorySegment mlirDenseElementsAttrInt64Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrInt64Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrFloatGet$MH() {
        return RuntimeHelper.requireNonNull(constants$349.mlirDenseElementsAttrFloatGet$MH,"mlirDenseElementsAttrFloatGet");
    }
    public static MemorySegment mlirDenseElementsAttrFloatGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrFloatGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrDoubleGet$MH() {
        return RuntimeHelper.requireNonNull(constants$349.mlirDenseElementsAttrDoubleGet$MH,"mlirDenseElementsAttrDoubleGet");
    }
    public static MemorySegment mlirDenseElementsAttrDoubleGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrDoubleGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrBFloat16Get$MH() {
        return RuntimeHelper.requireNonNull(constants$349.mlirDenseElementsAttrBFloat16Get$MH,"mlirDenseElementsAttrBFloat16Get");
    }
    public static MemorySegment mlirDenseElementsAttrBFloat16Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrBFloat16Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrFloat16Get$MH() {
        return RuntimeHelper.requireNonNull(constants$349.mlirDenseElementsAttrFloat16Get$MH,"mlirDenseElementsAttrFloat16Get");
    }
    public static MemorySegment mlirDenseElementsAttrFloat16Get ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable elements) {
        var mh$ = mlirDenseElementsAttrFloat16Get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrStringGet$MH() {
        return RuntimeHelper.requireNonNull(constants$349.mlirDenseElementsAttrStringGet$MH,"mlirDenseElementsAttrStringGet");
    }
    public static MemorySegment mlirDenseElementsAttrStringGet ( SegmentAllocator allocator,  MemorySegment shapedType,  long numElements,  Addressable strs) {
        var mh$ = mlirDenseElementsAttrStringGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, numElements, strs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrReshapeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$349.mlirDenseElementsAttrReshapeGet$MH,"mlirDenseElementsAttrReshapeGet");
    }
    public static MemorySegment mlirDenseElementsAttrReshapeGet ( SegmentAllocator allocator,  MemorySegment attr,  MemorySegment shapedType) {
        var mh$ = mlirDenseElementsAttrReshapeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, shapedType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrIsSplat$MH() {
        return RuntimeHelper.requireNonNull(constants$350.mlirDenseElementsAttrIsSplat$MH,"mlirDenseElementsAttrIsSplat");
    }
    public static boolean mlirDenseElementsAttrIsSplat ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrIsSplat$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetSplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$350.mlirDenseElementsAttrGetSplatValue$MH,"mlirDenseElementsAttrGetSplatValue");
    }
    public static MemorySegment mlirDenseElementsAttrGetSplatValue ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetSplatValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetBoolSplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$350.mlirDenseElementsAttrGetBoolSplatValue$MH,"mlirDenseElementsAttrGetBoolSplatValue");
    }
    public static int mlirDenseElementsAttrGetBoolSplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetBoolSplatValue$MH();
        try {
            return (int)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt8SplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$350.mlirDenseElementsAttrGetInt8SplatValue$MH,"mlirDenseElementsAttrGetInt8SplatValue");
    }
    public static byte mlirDenseElementsAttrGetInt8SplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetInt8SplatValue$MH();
        try {
            return (byte)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt8SplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$350.mlirDenseElementsAttrGetUInt8SplatValue$MH,"mlirDenseElementsAttrGetUInt8SplatValue");
    }
    public static byte mlirDenseElementsAttrGetUInt8SplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetUInt8SplatValue$MH();
        try {
            return (byte)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt32SplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$350.mlirDenseElementsAttrGetInt32SplatValue$MH,"mlirDenseElementsAttrGetInt32SplatValue");
    }
    public static int mlirDenseElementsAttrGetInt32SplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetInt32SplatValue$MH();
        try {
            return (int)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt32SplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$351.mlirDenseElementsAttrGetUInt32SplatValue$MH,"mlirDenseElementsAttrGetUInt32SplatValue");
    }
    public static int mlirDenseElementsAttrGetUInt32SplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetUInt32SplatValue$MH();
        try {
            return (int)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt64SplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$351.mlirDenseElementsAttrGetInt64SplatValue$MH,"mlirDenseElementsAttrGetInt64SplatValue");
    }
    public static long mlirDenseElementsAttrGetInt64SplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetInt64SplatValue$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt64SplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$351.mlirDenseElementsAttrGetUInt64SplatValue$MH,"mlirDenseElementsAttrGetUInt64SplatValue");
    }
    public static long mlirDenseElementsAttrGetUInt64SplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetUInt64SplatValue$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetFloatSplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$351.mlirDenseElementsAttrGetFloatSplatValue$MH,"mlirDenseElementsAttrGetFloatSplatValue");
    }
    public static float mlirDenseElementsAttrGetFloatSplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetFloatSplatValue$MH();
        try {
            return (float)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetDoubleSplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$351.mlirDenseElementsAttrGetDoubleSplatValue$MH,"mlirDenseElementsAttrGetDoubleSplatValue");
    }
    public static double mlirDenseElementsAttrGetDoubleSplatValue ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetDoubleSplatValue$MH();
        try {
            return (double)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetStringSplatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$351.mlirDenseElementsAttrGetStringSplatValue$MH,"mlirDenseElementsAttrGetStringSplatValue");
    }
    public static MemorySegment mlirDenseElementsAttrGetStringSplatValue ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetStringSplatValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetBoolValue$MH() {
        return RuntimeHelper.requireNonNull(constants$352.mlirDenseElementsAttrGetBoolValue$MH,"mlirDenseElementsAttrGetBoolValue");
    }
    public static boolean mlirDenseElementsAttrGetBoolValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetBoolValue$MH();
        try {
            return (boolean)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt8Value$MH() {
        return RuntimeHelper.requireNonNull(constants$352.mlirDenseElementsAttrGetInt8Value$MH,"mlirDenseElementsAttrGetInt8Value");
    }
    public static byte mlirDenseElementsAttrGetInt8Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetInt8Value$MH();
        try {
            return (byte)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt8Value$MH() {
        return RuntimeHelper.requireNonNull(constants$352.mlirDenseElementsAttrGetUInt8Value$MH,"mlirDenseElementsAttrGetUInt8Value");
    }
    public static byte mlirDenseElementsAttrGetUInt8Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetUInt8Value$MH();
        try {
            return (byte)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt16Value$MH() {
        return RuntimeHelper.requireNonNull(constants$352.mlirDenseElementsAttrGetInt16Value$MH,"mlirDenseElementsAttrGetInt16Value");
    }
    public static short mlirDenseElementsAttrGetInt16Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetInt16Value$MH();
        try {
            return (short)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt16Value$MH() {
        return RuntimeHelper.requireNonNull(constants$352.mlirDenseElementsAttrGetUInt16Value$MH,"mlirDenseElementsAttrGetUInt16Value");
    }
    public static short mlirDenseElementsAttrGetUInt16Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetUInt16Value$MH();
        try {
            return (short)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt32Value$MH() {
        return RuntimeHelper.requireNonNull(constants$352.mlirDenseElementsAttrGetInt32Value$MH,"mlirDenseElementsAttrGetInt32Value");
    }
    public static int mlirDenseElementsAttrGetInt32Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetInt32Value$MH();
        try {
            return (int)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt32Value$MH() {
        return RuntimeHelper.requireNonNull(constants$353.mlirDenseElementsAttrGetUInt32Value$MH,"mlirDenseElementsAttrGetUInt32Value");
    }
    public static int mlirDenseElementsAttrGetUInt32Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetUInt32Value$MH();
        try {
            return (int)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetInt64Value$MH() {
        return RuntimeHelper.requireNonNull(constants$353.mlirDenseElementsAttrGetInt64Value$MH,"mlirDenseElementsAttrGetInt64Value");
    }
    public static long mlirDenseElementsAttrGetInt64Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetInt64Value$MH();
        try {
            return (long)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetUInt64Value$MH() {
        return RuntimeHelper.requireNonNull(constants$353.mlirDenseElementsAttrGetUInt64Value$MH,"mlirDenseElementsAttrGetUInt64Value");
    }
    public static long mlirDenseElementsAttrGetUInt64Value ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetUInt64Value$MH();
        try {
            return (long)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetFloatValue$MH() {
        return RuntimeHelper.requireNonNull(constants$353.mlirDenseElementsAttrGetFloatValue$MH,"mlirDenseElementsAttrGetFloatValue");
    }
    public static float mlirDenseElementsAttrGetFloatValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetFloatValue$MH();
        try {
            return (float)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetDoubleValue$MH() {
        return RuntimeHelper.requireNonNull(constants$353.mlirDenseElementsAttrGetDoubleValue$MH,"mlirDenseElementsAttrGetDoubleValue");
    }
    public static double mlirDenseElementsAttrGetDoubleValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetDoubleValue$MH();
        try {
            return (double)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetStringValue$MH() {
        return RuntimeHelper.requireNonNull(constants$353.mlirDenseElementsAttrGetStringValue$MH,"mlirDenseElementsAttrGetStringValue");
    }
    public static MemorySegment mlirDenseElementsAttrGetStringValue ( SegmentAllocator allocator,  MemorySegment attr,  long pos) {
        var mh$ = mlirDenseElementsAttrGetStringValue$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseElementsAttrGetRawData$MH() {
        return RuntimeHelper.requireNonNull(constants$354.mlirDenseElementsAttrGetRawData$MH,"mlirDenseElementsAttrGetRawData");
    }
    public static MemoryAddress mlirDenseElementsAttrGetRawData ( MemorySegment attr) {
        var mh$ = mlirDenseElementsAttrGetRawData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseBoolResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$354.mlirUnmanagedDenseBoolResourceElementsAttrGet$MH,"mlirUnmanagedDenseBoolResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseBoolResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseBoolResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseUInt8ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$354.mlirUnmanagedDenseUInt8ResourceElementsAttrGet$MH,"mlirUnmanagedDenseUInt8ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseUInt8ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseUInt8ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseInt8ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$354.mlirUnmanagedDenseInt8ResourceElementsAttrGet$MH,"mlirUnmanagedDenseInt8ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseInt8ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseInt8ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseUInt16ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$354.mlirUnmanagedDenseUInt16ResourceElementsAttrGet$MH,"mlirUnmanagedDenseUInt16ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseUInt16ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseUInt16ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseInt16ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$354.mlirUnmanagedDenseInt16ResourceElementsAttrGet$MH,"mlirUnmanagedDenseInt16ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseInt16ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseInt16ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseUInt32ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$355.mlirUnmanagedDenseUInt32ResourceElementsAttrGet$MH,"mlirUnmanagedDenseUInt32ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseUInt32ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseUInt32ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseInt32ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$355.mlirUnmanagedDenseInt32ResourceElementsAttrGet$MH,"mlirUnmanagedDenseInt32ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseInt32ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseInt32ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseUInt64ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$355.mlirUnmanagedDenseUInt64ResourceElementsAttrGet$MH,"mlirUnmanagedDenseUInt64ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseUInt64ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseUInt64ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseInt64ResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$355.mlirUnmanagedDenseInt64ResourceElementsAttrGet$MH,"mlirUnmanagedDenseInt64ResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseInt64ResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseInt64ResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseFloatResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$355.mlirUnmanagedDenseFloatResourceElementsAttrGet$MH,"mlirUnmanagedDenseFloatResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseFloatResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseFloatResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnmanagedDenseDoubleResourceElementsAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$355.mlirUnmanagedDenseDoubleResourceElementsAttrGet$MH,"mlirUnmanagedDenseDoubleResourceElementsAttrGet");
    }
    public static MemorySegment mlirUnmanagedDenseDoubleResourceElementsAttrGet ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment name,  long numElements,  Addressable elements) {
        var mh$ = mlirUnmanagedDenseDoubleResourceElementsAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, name, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseBoolResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$356.mlirDenseBoolResourceElementsAttrGetValue$MH,"mlirDenseBoolResourceElementsAttrGetValue");
    }
    public static boolean mlirDenseBoolResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseBoolResourceElementsAttrGetValue$MH();
        try {
            return (boolean)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseInt8ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$356.mlirDenseInt8ResourceElementsAttrGetValue$MH,"mlirDenseInt8ResourceElementsAttrGetValue");
    }
    public static byte mlirDenseInt8ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseInt8ResourceElementsAttrGetValue$MH();
        try {
            return (byte)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseUInt8ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$356.mlirDenseUInt8ResourceElementsAttrGetValue$MH,"mlirDenseUInt8ResourceElementsAttrGetValue");
    }
    public static byte mlirDenseUInt8ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseUInt8ResourceElementsAttrGetValue$MH();
        try {
            return (byte)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseInt16ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$356.mlirDenseInt16ResourceElementsAttrGetValue$MH,"mlirDenseInt16ResourceElementsAttrGetValue");
    }
    public static short mlirDenseInt16ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseInt16ResourceElementsAttrGetValue$MH();
        try {
            return (short)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseUInt16ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$356.mlirDenseUInt16ResourceElementsAttrGetValue$MH,"mlirDenseUInt16ResourceElementsAttrGetValue");
    }
    public static short mlirDenseUInt16ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseUInt16ResourceElementsAttrGetValue$MH();
        try {
            return (short)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseInt32ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$356.mlirDenseInt32ResourceElementsAttrGetValue$MH,"mlirDenseInt32ResourceElementsAttrGetValue");
    }
    public static int mlirDenseInt32ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseInt32ResourceElementsAttrGetValue$MH();
        try {
            return (int)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseUInt32ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$357.mlirDenseUInt32ResourceElementsAttrGetValue$MH,"mlirDenseUInt32ResourceElementsAttrGetValue");
    }
    public static int mlirDenseUInt32ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseUInt32ResourceElementsAttrGetValue$MH();
        try {
            return (int)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseInt64ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$357.mlirDenseInt64ResourceElementsAttrGetValue$MH,"mlirDenseInt64ResourceElementsAttrGetValue");
    }
    public static long mlirDenseInt64ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseInt64ResourceElementsAttrGetValue$MH();
        try {
            return (long)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseUInt64ResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$357.mlirDenseUInt64ResourceElementsAttrGetValue$MH,"mlirDenseUInt64ResourceElementsAttrGetValue");
    }
    public static long mlirDenseUInt64ResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseUInt64ResourceElementsAttrGetValue$MH();
        try {
            return (long)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseFloatResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$357.mlirDenseFloatResourceElementsAttrGetValue$MH,"mlirDenseFloatResourceElementsAttrGetValue");
    }
    public static float mlirDenseFloatResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseFloatResourceElementsAttrGetValue$MH();
        try {
            return (float)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDenseDoubleResourceElementsAttrGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$357.mlirDenseDoubleResourceElementsAttrGetValue$MH,"mlirDenseDoubleResourceElementsAttrGetValue");
    }
    public static double mlirDenseDoubleResourceElementsAttrGetValue ( MemorySegment attr,  long pos) {
        var mh$ = mlirDenseDoubleResourceElementsAttrGetValue$MH();
        try {
            return (double)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsASparseElements$MH() {
        return RuntimeHelper.requireNonNull(constants$357.mlirAttributeIsASparseElements$MH,"mlirAttributeIsASparseElements");
    }
    public static boolean mlirAttributeIsASparseElements ( MemorySegment attr) {
        var mh$ = mlirAttributeIsASparseElements$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseElementsAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$358.mlirSparseElementsAttribute$MH,"mlirSparseElementsAttribute");
    }
    public static MemorySegment mlirSparseElementsAttribute ( SegmentAllocator allocator,  MemorySegment shapedType,  MemorySegment denseIndices,  MemorySegment denseValues) {
        var mh$ = mlirSparseElementsAttribute$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, shapedType, denseIndices, denseValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseElementsAttrGetIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$358.mlirSparseElementsAttrGetIndices$MH,"mlirSparseElementsAttrGetIndices");
    }
    public static MemorySegment mlirSparseElementsAttrGetIndices ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirSparseElementsAttrGetIndices$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSparseElementsAttrGetValues$MH() {
        return RuntimeHelper.requireNonNull(constants$358.mlirSparseElementsAttrGetValues$MH,"mlirSparseElementsAttrGetValues");
    }
    public static MemorySegment mlirSparseElementsAttrGetValues ( SegmentAllocator allocator,  MemorySegment attr) {
        var mh$ = mlirSparseElementsAttrGetValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsAStridedLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$358.mlirAttributeIsAStridedLayout$MH,"mlirAttributeIsAStridedLayout");
    }
    public static boolean mlirAttributeIsAStridedLayout ( MemorySegment attr) {
        var mh$ = mlirAttributeIsAStridedLayout$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStridedLayoutAttrGet$MH() {
        return RuntimeHelper.requireNonNull(constants$358.mlirStridedLayoutAttrGet$MH,"mlirStridedLayoutAttrGet");
    }
    public static MemorySegment mlirStridedLayoutAttrGet ( SegmentAllocator allocator,  MemorySegment ctx,  long offset,  long numStrides,  Addressable strides) {
        var mh$ = mlirStridedLayoutAttrGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, offset, numStrides, strides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStridedLayoutAttrGetOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$358.mlirStridedLayoutAttrGetOffset$MH,"mlirStridedLayoutAttrGetOffset");
    }
    public static long mlirStridedLayoutAttrGetOffset ( MemorySegment attr) {
        var mh$ = mlirStridedLayoutAttrGetOffset$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStridedLayoutAttrGetNumStrides$MH() {
        return RuntimeHelper.requireNonNull(constants$359.mlirStridedLayoutAttrGetNumStrides$MH,"mlirStridedLayoutAttrGetNumStrides");
    }
    public static long mlirStridedLayoutAttrGetNumStrides ( MemorySegment attr) {
        var mh$ = mlirStridedLayoutAttrGetNumStrides$MH();
        try {
            return (long)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStridedLayoutAttrGetStride$MH() {
        return RuntimeHelper.requireNonNull(constants$359.mlirStridedLayoutAttrGetStride$MH,"mlirStridedLayoutAttrGetStride");
    }
    public static long mlirStridedLayoutAttrGetStride ( MemorySegment attr,  long pos) {
        var mh$ = mlirStridedLayoutAttrGetStride$MH();
        try {
            return (long)mh$.invokeExact(attr, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$359.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$359.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$359.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$359.__DARWIN_NULL$ADDR;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
}


