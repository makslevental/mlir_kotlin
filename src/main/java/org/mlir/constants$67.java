// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$67 {

    static final FunctionDescriptor mlirOpaqueTypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef")
    );
    static final MethodHandle mlirOpaqueTypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirOpaqueTypeGet",
        constants$67.mlirOpaqueTypeGet$FUNC
    );
    static final FunctionDescriptor mlirOpaqueTypeGetDialectNamespace$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("length")
    ).withName("MlirStringRef"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirOpaqueTypeGetDialectNamespace$MH = RuntimeHelper.downcallHandle(
        "mlirOpaqueTypeGetDialectNamespace",
        constants$67.mlirOpaqueTypeGetDialectNamespace$FUNC
    );
    static final FunctionDescriptor mlirOpaqueTypeGetData$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("length")
    ).withName("MlirStringRef"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirOpaqueTypeGetData$MH = RuntimeHelper.downcallHandle(
        "mlirOpaqueTypeGetData",
        constants$67.mlirOpaqueTypeGetData$FUNC
    );
    static final FunctionDescriptor mlirGetDialectHandle__transform__$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirDialectHandle"));
    static final MethodHandle mlirGetDialectHandle__transform__$MH = RuntimeHelper.downcallHandle(
        "mlirGetDialectHandle__transform__",
        constants$67.mlirGetDialectHandle__transform__$FUNC
    );
    static final FunctionDescriptor mlirTypeIsATransformAnyOpType$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeIsATransformAnyOpType$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIsATransformAnyOpType",
        constants$67.mlirTypeIsATransformAnyOpType$FUNC
    );
    static final FunctionDescriptor mlirTransformAnyOpTypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext")
    );
    static final MethodHandle mlirTransformAnyOpTypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirTransformAnyOpTypeGet",
        constants$67.mlirTransformAnyOpTypeGet$FUNC
    );
}


