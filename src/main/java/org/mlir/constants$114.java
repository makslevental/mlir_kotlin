// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$114 {

    static final FunctionDescriptor LLVMIsADbgLabelInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsADbgLabelInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsADbgLabelInst",
        constants$114.LLVMIsADbgLabelInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAMemIntrinsic$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAMemIntrinsic$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAMemIntrinsic",
        constants$114.LLVMIsAMemIntrinsic$FUNC
    );
    static final FunctionDescriptor LLVMIsAMemCpyInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAMemCpyInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAMemCpyInst",
        constants$114.LLVMIsAMemCpyInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAMemMoveInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAMemMoveInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAMemMoveInst",
        constants$114.LLVMIsAMemMoveInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAMemSetInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAMemSetInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAMemSetInst",
        constants$114.LLVMIsAMemSetInst$FUNC
    );
    static final FunctionDescriptor LLVMIsACmpInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsACmpInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsACmpInst",
        constants$114.LLVMIsACmpInst$FUNC
    );
}


