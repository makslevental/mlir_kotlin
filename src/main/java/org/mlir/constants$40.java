// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$40 {

    static final FunctionDescriptor LLVMDisposeObjectFile$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMDisposeObjectFile$MH = RuntimeHelper.downcallHandle(
        "LLVMDisposeObjectFile",
        constants$40.LLVMDisposeObjectFile$FUNC
    );
    static final FunctionDescriptor LLVMGetSections$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetSections$MH = RuntimeHelper.downcallHandle(
        "LLVMGetSections",
        constants$40.LLVMGetSections$FUNC
    );
    static final FunctionDescriptor LLVMIsSectionIteratorAtEnd$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsSectionIteratorAtEnd$MH = RuntimeHelper.downcallHandle(
        "LLVMIsSectionIteratorAtEnd",
        constants$40.LLVMIsSectionIteratorAtEnd$FUNC
    );
    static final FunctionDescriptor LLVMGetSymbols$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetSymbols$MH = RuntimeHelper.downcallHandle(
        "LLVMGetSymbols",
        constants$40.LLVMGetSymbols$FUNC
    );
    static final FunctionDescriptor LLVMIsSymbolIteratorAtEnd$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsSymbolIteratorAtEnd$MH = RuntimeHelper.downcallHandle(
        "LLVMIsSymbolIteratorAtEnd",
        constants$40.LLVMIsSymbolIteratorAtEnd$FUNC
    );
    static final FunctionDescriptor mlirAffineExprGetContext$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprGetContext$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprGetContext",
        constants$40.mlirAffineExprGetContext$FUNC
    );
}


