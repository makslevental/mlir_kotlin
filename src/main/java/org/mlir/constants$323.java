// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$323 {

    static final FunctionDescriptor LLVMDIBuilderCreateReplaceableCompositeType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateReplaceableCompositeType$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateReplaceableCompositeType",
        constants$323.LLVMDIBuilderCreateReplaceableCompositeType$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateBitFieldMemberType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateBitFieldMemberType$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateBitFieldMemberType",
        constants$323.LLVMDIBuilderCreateBitFieldMemberType$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateClassType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateClassType$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateClassType",
        constants$323.LLVMDIBuilderCreateClassType$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateArtificialType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateArtificialType$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateArtificialType",
        constants$323.LLVMDIBuilderCreateArtificialType$FUNC
    );
    static final FunctionDescriptor LLVMDITypeGetName$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMDITypeGetName$MH = RuntimeHelper.downcallHandle(
        "LLVMDITypeGetName",
        constants$323.LLVMDITypeGetName$FUNC
    );
    static final FunctionDescriptor LLVMDITypeGetSizeInBits$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMDITypeGetSizeInBits$MH = RuntimeHelper.downcallHandle(
        "LLVMDITypeGetSizeInBits",
        constants$323.LLVMDITypeGetSizeInBits$FUNC
    );
}


