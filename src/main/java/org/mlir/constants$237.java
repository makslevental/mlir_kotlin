// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$237 {

    static final FunctionDescriptor mlirRegisterConversionConvertArithToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertArithToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertArithToSPIRV",
        constants$237.mlirRegisterConversionConvertArithToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertArmNeon2dToIntr$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertArmNeon2dToIntr$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertArmNeon2dToIntr",
        constants$237.mlirCreateConversionConvertArmNeon2dToIntr$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertArmNeon2dToIntr$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertArmNeon2dToIntr$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertArmNeon2dToIntr",
        constants$237.mlirRegisterConversionConvertArmNeon2dToIntr$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertAsyncToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertAsyncToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertAsyncToLLVMPass",
        constants$237.mlirCreateConversionConvertAsyncToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertAsyncToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertAsyncToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertAsyncToLLVMPass",
        constants$237.mlirRegisterConversionConvertAsyncToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertBufferizationToMemRef$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertBufferizationToMemRef$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertBufferizationToMemRef",
        constants$237.mlirCreateConversionConvertBufferizationToMemRef$FUNC
    );
}


