// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$242 {

    static final FunctionDescriptor mlirRegisterConversionConvertIndexToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertIndexToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertIndexToLLVMPass",
        constants$242.mlirRegisterConversionConvertIndexToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertLinalgToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertLinalgToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertLinalgToLLVMPass",
        constants$242.mlirCreateConversionConvertLinalgToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertLinalgToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertLinalgToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertLinalgToLLVMPass",
        constants$242.mlirRegisterConversionConvertLinalgToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertLinalgToStandard$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertLinalgToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertLinalgToStandard",
        constants$242.mlirCreateConversionConvertLinalgToStandard$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertLinalgToStandard$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertLinalgToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertLinalgToStandard",
        constants$242.mlirRegisterConversionConvertLinalgToStandard$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertMathToFuncs$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertMathToFuncs$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertMathToFuncs",
        constants$242.mlirCreateConversionConvertMathToFuncs$FUNC
    );
}


