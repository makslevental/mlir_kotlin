// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$310 {

    static final FunctionDescriptor mlirRegisterTransformsCanonicalizer$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsCanonicalizer$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsCanonicalizer",
        constants$310.mlirRegisterTransformsCanonicalizer$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsControlFlowSink$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsControlFlowSink$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsControlFlowSink",
        constants$310.mlirCreateTransformsControlFlowSink$FUNC
    );
    static final FunctionDescriptor mlirRegisterTransformsControlFlowSink$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsControlFlowSink$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsControlFlowSink",
        constants$310.mlirRegisterTransformsControlFlowSink$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsGenerateRuntimeVerification$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsGenerateRuntimeVerification$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsGenerateRuntimeVerification",
        constants$310.mlirCreateTransformsGenerateRuntimeVerification$FUNC
    );
    static final FunctionDescriptor mlirRegisterTransformsGenerateRuntimeVerification$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterTransformsGenerateRuntimeVerification$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterTransformsGenerateRuntimeVerification",
        constants$310.mlirRegisterTransformsGenerateRuntimeVerification$FUNC
    );
    static final FunctionDescriptor mlirCreateTransformsInliner$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateTransformsInliner$MH = RuntimeHelper.downcallHandle(
        "mlirCreateTransformsInliner",
        constants$310.mlirCreateTransformsInliner$FUNC
    );
}


