// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$316 {

    static final FunctionDescriptor LLVMDIBuilderCreateNameSpace$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateNameSpace$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateNameSpace",
        constants$316.LLVMDIBuilderCreateNameSpace$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateFunction$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateFunction$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateFunction",
        constants$316.LLVMDIBuilderCreateFunction$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateLexicalBlock$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateLexicalBlock$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateLexicalBlock",
        constants$316.LLVMDIBuilderCreateLexicalBlock$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateLexicalBlockFile$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateLexicalBlockFile$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateLexicalBlockFile",
        constants$316.LLVMDIBuilderCreateLexicalBlockFile$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateImportedModuleFromNamespace$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateImportedModuleFromNamespace$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateImportedModuleFromNamespace",
        constants$316.LLVMDIBuilderCreateImportedModuleFromNamespace$FUNC
    );
    static final FunctionDescriptor LLVMDIBuilderCreateImportedModuleFromAlias$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateImportedModuleFromAlias$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateImportedModuleFromAlias",
        constants$316.LLVMDIBuilderCreateImportedModuleFromAlias$FUNC
    );
}


