// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$66 {

    static final FunctionDescriptor mlirFunctionTypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirFunctionTypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirFunctionTypeGet",
        constants$66.mlirFunctionTypeGet$FUNC
    );
    static final FunctionDescriptor mlirFunctionTypeGetNumInputs$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirFunctionTypeGetNumInputs$MH = RuntimeHelper.downcallHandle(
        "mlirFunctionTypeGetNumInputs",
        constants$66.mlirFunctionTypeGetNumInputs$FUNC
    );
    static final FunctionDescriptor mlirFunctionTypeGetNumResults$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirFunctionTypeGetNumResults$MH = RuntimeHelper.downcallHandle(
        "mlirFunctionTypeGetNumResults",
        constants$66.mlirFunctionTypeGetNumResults$FUNC
    );
    static final FunctionDescriptor mlirFunctionTypeGetInput$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirFunctionTypeGetInput$MH = RuntimeHelper.downcallHandle(
        "mlirFunctionTypeGetInput",
        constants$66.mlirFunctionTypeGetInput$FUNC
    );
    static final FunctionDescriptor mlirFunctionTypeGetResult$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirFunctionTypeGetResult$MH = RuntimeHelper.downcallHandle(
        "mlirFunctionTypeGetResult",
        constants$66.mlirFunctionTypeGetResult$FUNC
    );
    static final FunctionDescriptor mlirTypeIsAOpaque$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeIsAOpaque$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIsAOpaque",
        constants$66.mlirTypeIsAOpaque$FUNC
    );
}


