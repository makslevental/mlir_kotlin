// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$79 {

    static final FunctionDescriptor LLVMRemarkParserGetNext$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMRemarkParserGetNext$MH = RuntimeHelper.downcallHandle(
        "LLVMRemarkParserGetNext",
        constants$79.LLVMRemarkParserGetNext$FUNC
    );
    static final FunctionDescriptor LLVMRemarkParserHasError$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMRemarkParserHasError$MH = RuntimeHelper.downcallHandle(
        "LLVMRemarkParserHasError",
        constants$79.LLVMRemarkParserHasError$FUNC
    );
    static final FunctionDescriptor LLVMRemarkParserGetErrorMessage$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMRemarkParserGetErrorMessage$MH = RuntimeHelper.downcallHandle(
        "LLVMRemarkParserGetErrorMessage",
        constants$79.LLVMRemarkParserGetErrorMessage$FUNC
    );
    static final FunctionDescriptor LLVMRemarkParserDispose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMRemarkParserDispose$MH = RuntimeHelper.downcallHandle(
        "LLVMRemarkParserDispose",
        constants$79.LLVMRemarkParserDispose$FUNC
    );
    static final FunctionDescriptor LLVMRemarkVersion$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle LLVMRemarkVersion$MH = RuntimeHelper.downcallHandle(
        "LLVMRemarkVersion",
        constants$79.LLVMRemarkVersion$FUNC
    );
    static final FunctionDescriptor LLVMInitializeCore$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMInitializeCore$MH = RuntimeHelper.downcallHandle(
        "LLVMInitializeCore",
        constants$79.LLVMInitializeCore$FUNC
    );
}


