// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$229 {

    static final FunctionDescriptor mlirCreateAsyncAsyncRuntimeRefCounting$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateAsyncAsyncRuntimeRefCounting$MH = RuntimeHelper.downcallHandle(
        "mlirCreateAsyncAsyncRuntimeRefCounting",
        constants$229.mlirCreateAsyncAsyncRuntimeRefCounting$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncAsyncRuntimeRefCounting$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncAsyncRuntimeRefCounting$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncAsyncRuntimeRefCounting",
        constants$229.mlirRegisterAsyncAsyncRuntimeRefCounting$FUNC
    );
    static final FunctionDescriptor mlirCreateAsyncAsyncRuntimeRefCountingOpt$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateAsyncAsyncRuntimeRefCountingOpt$MH = RuntimeHelper.downcallHandle(
        "mlirCreateAsyncAsyncRuntimeRefCountingOpt",
        constants$229.mlirCreateAsyncAsyncRuntimeRefCountingOpt$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncAsyncRuntimeRefCountingOpt$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncAsyncRuntimeRefCountingOpt$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncAsyncRuntimeRefCountingOpt",
        constants$229.mlirRegisterAsyncAsyncRuntimeRefCountingOpt$FUNC
    );
    static final FunctionDescriptor mlirCreateAsyncAsyncToAsyncRuntime$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateAsyncAsyncToAsyncRuntime$MH = RuntimeHelper.downcallHandle(
        "mlirCreateAsyncAsyncToAsyncRuntime",
        constants$229.mlirCreateAsyncAsyncToAsyncRuntime$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncAsyncToAsyncRuntime$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncAsyncToAsyncRuntime$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncAsyncToAsyncRuntime",
        constants$229.mlirRegisterAsyncAsyncToAsyncRuntime$FUNC
    );
}


