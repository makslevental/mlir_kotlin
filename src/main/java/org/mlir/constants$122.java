// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$122 {

    static final FunctionDescriptor LLVMIsALoadInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsALoadInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsALoadInst",
        constants$122.LLVMIsALoadInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAVAArgInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAVAArgInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAVAArgInst",
        constants$122.LLVMIsAVAArgInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAFreezeInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAFreezeInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAFreezeInst",
        constants$122.LLVMIsAFreezeInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAAtomicCmpXchgInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAAtomicCmpXchgInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAAtomicCmpXchgInst",
        constants$122.LLVMIsAAtomicCmpXchgInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAAtomicRMWInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAAtomicRMWInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAAtomicRMWInst",
        constants$122.LLVMIsAAtomicRMWInst$FUNC
    );
    static final FunctionDescriptor LLVMIsAFenceInst$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAFenceInst$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAFenceInst",
        constants$122.LLVMIsAFenceInst$FUNC
    );
}


