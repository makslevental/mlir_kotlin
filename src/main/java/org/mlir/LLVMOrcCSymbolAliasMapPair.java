// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class LLVMOrcCSymbolAliasMapPair {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("Name"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("Name"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("GenericFlags"),
                Constants$root.C_CHAR$LAYOUT.withName("TargetFlags")
            ).withName("Flags"),
            MemoryLayout.paddingLayout(48)
        ).withName("Entry")
    );
    public static MemoryLayout $LAYOUT() {
        return LLVMOrcCSymbolAliasMapPair.$struct$LAYOUT;
    }
    static final VarHandle Name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Name"));
    public static VarHandle Name$VH() {
        return LLVMOrcCSymbolAliasMapPair.Name$VH;
    }
    public static MemoryAddress Name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)LLVMOrcCSymbolAliasMapPair.Name$VH.get(seg);
    }
    public static void Name$set( MemorySegment seg, MemoryAddress x) {
        LLVMOrcCSymbolAliasMapPair.Name$VH.set(seg, x);
    }
    public static MemoryAddress Name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)LLVMOrcCSymbolAliasMapPair.Name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Name$set(MemorySegment seg, long index, MemoryAddress x) {
        LLVMOrcCSymbolAliasMapPair.Name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Entry$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


