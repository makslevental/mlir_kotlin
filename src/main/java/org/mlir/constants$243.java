// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$243 {

    static final FunctionDescriptor mlirRegisterConversionConvertMathToFuncs$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertMathToFuncs$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertMathToFuncs",
        constants$243.mlirRegisterConversionConvertMathToFuncs$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertMathToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertMathToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertMathToLLVMPass",
        constants$243.mlirCreateConversionConvertMathToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertMathToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertMathToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertMathToLLVMPass",
        constants$243.mlirRegisterConversionConvertMathToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertMathToLibm$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertMathToLibm$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertMathToLibm",
        constants$243.mlirCreateConversionConvertMathToLibm$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertMathToLibm$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertMathToLibm$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertMathToLibm",
        constants$243.mlirRegisterConversionConvertMathToLibm$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertMathToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertMathToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertMathToSPIRV",
        constants$243.mlirCreateConversionConvertMathToSPIRV$FUNC
    );
}


