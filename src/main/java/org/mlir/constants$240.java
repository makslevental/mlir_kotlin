// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$240 {

    static final FunctionDescriptor mlirRegisterConversionConvertFuncToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertFuncToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertFuncToLLVMPass",
        constants$240.mlirRegisterConversionConvertFuncToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertFuncToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertFuncToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertFuncToSPIRV",
        constants$240.mlirCreateConversionConvertFuncToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertFuncToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertFuncToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertFuncToSPIRV",
        constants$240.mlirRegisterConversionConvertFuncToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertGPUToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertGPUToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertGPUToSPIRV",
        constants$240.mlirCreateConversionConvertGPUToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertGPUToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertGPUToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertGPUToSPIRV",
        constants$240.mlirRegisterConversionConvertGPUToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc",
        constants$240.mlirCreateConversionConvertGpuLaunchFuncToVulkanLaunchFunc$FUNC
    );
}


