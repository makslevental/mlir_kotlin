// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$297 {

    static final FunctionDescriptor mlirQuantizedTypeGetDefaultMinimumForInteger$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_BOOL$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle mlirQuantizedTypeGetDefaultMinimumForInteger$MH = RuntimeHelper.downcallHandle(
        "mlirQuantizedTypeGetDefaultMinimumForInteger",
        constants$297.mlirQuantizedTypeGetDefaultMinimumForInteger$FUNC
    );
    static final FunctionDescriptor mlirQuantizedTypeGetDefaultMaximumForInteger$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_BOOL$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle mlirQuantizedTypeGetDefaultMaximumForInteger$MH = RuntimeHelper.downcallHandle(
        "mlirQuantizedTypeGetDefaultMaximumForInteger",
        constants$297.mlirQuantizedTypeGetDefaultMaximumForInteger$FUNC
    );
    static final FunctionDescriptor mlirQuantizedTypeGetExpressedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirQuantizedTypeGetExpressedType$MH = RuntimeHelper.downcallHandle(
        "mlirQuantizedTypeGetExpressedType",
        constants$297.mlirQuantizedTypeGetExpressedType$FUNC
    );
    static final FunctionDescriptor mlirQuantizedTypeGetFlags$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirQuantizedTypeGetFlags$MH = RuntimeHelper.downcallHandle(
        "mlirQuantizedTypeGetFlags",
        constants$297.mlirQuantizedTypeGetFlags$FUNC
    );
    static final FunctionDescriptor mlirQuantizedTypeIsSigned$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirQuantizedTypeIsSigned$MH = RuntimeHelper.downcallHandle(
        "mlirQuantizedTypeIsSigned",
        constants$297.mlirQuantizedTypeIsSigned$FUNC
    );
    static final FunctionDescriptor mlirQuantizedTypeGetStorageType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirQuantizedTypeGetStorageType$MH = RuntimeHelper.downcallHandle(
        "mlirQuantizedTypeGetStorageType",
        constants$297.mlirQuantizedTypeGetStorageType$FUNC
    );
}


