// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$253 {

    static final FunctionDescriptor mlirRegisterConversionTosaToLinalg$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionTosaToLinalg$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionTosaToLinalg",
        constants$253.mlirRegisterConversionTosaToLinalg$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionTosaToLinalgNamed$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionTosaToLinalgNamed$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionTosaToLinalgNamed",
        constants$253.mlirCreateConversionTosaToLinalgNamed$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionTosaToLinalgNamed$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionTosaToLinalgNamed$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionTosaToLinalgNamed",
        constants$253.mlirRegisterConversionTosaToLinalgNamed$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionTosaToSCF$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionTosaToSCF$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionTosaToSCF",
        constants$253.mlirCreateConversionTosaToSCF$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionTosaToSCF$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionTosaToSCF$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionTosaToSCF",
        constants$253.mlirRegisterConversionTosaToSCF$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionTosaToTensor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionTosaToTensor$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionTosaToTensor",
        constants$253.mlirCreateConversionTosaToTensor$FUNC
    );
}


