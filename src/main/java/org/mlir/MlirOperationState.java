// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class MlirOperationState {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("name"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("location"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nResults"),
        Constants$root.C_POINTER$LAYOUT.withName("results"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nOperands"),
        Constants$root.C_POINTER$LAYOUT.withName("operands"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nRegions"),
        Constants$root.C_POINTER$LAYOUT.withName("regions"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nSuccessors"),
        Constants$root.C_POINTER$LAYOUT.withName("successors"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nAttributes"),
        Constants$root.C_POINTER$LAYOUT.withName("attributes"),
        Constants$root.C_BOOL$LAYOUT.withName("enableResultTypeInference"),
        MemoryLayout.paddingLayout(56)
    ).withName("MlirOperationState");
    public static MemoryLayout $LAYOUT() {
        return MlirOperationState.$struct$LAYOUT;
    }
    public static MemorySegment name$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment location$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    static final VarHandle nResults$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nResults"));
    public static VarHandle nResults$VH() {
        return MlirOperationState.nResults$VH;
    }
    public static long nResults$get(MemorySegment seg) {
        return (long)MlirOperationState.nResults$VH.get(seg);
    }
    public static void nResults$set( MemorySegment seg, long x) {
        MlirOperationState.nResults$VH.set(seg, x);
    }
    public static long nResults$get(MemorySegment seg, long index) {
        return (long)MlirOperationState.nResults$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nResults$set(MemorySegment seg, long index, long x) {
        MlirOperationState.nResults$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle results$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("results"));
    public static VarHandle results$VH() {
        return MlirOperationState.results$VH;
    }
    public static MemoryAddress results$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.results$VH.get(seg);
    }
    public static void results$set( MemorySegment seg, MemoryAddress x) {
        MlirOperationState.results$VH.set(seg, x);
    }
    public static MemoryAddress results$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.results$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void results$set(MemorySegment seg, long index, MemoryAddress x) {
        MlirOperationState.results$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nOperands$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nOperands"));
    public static VarHandle nOperands$VH() {
        return MlirOperationState.nOperands$VH;
    }
    public static long nOperands$get(MemorySegment seg) {
        return (long)MlirOperationState.nOperands$VH.get(seg);
    }
    public static void nOperands$set( MemorySegment seg, long x) {
        MlirOperationState.nOperands$VH.set(seg, x);
    }
    public static long nOperands$get(MemorySegment seg, long index) {
        return (long)MlirOperationState.nOperands$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nOperands$set(MemorySegment seg, long index, long x) {
        MlirOperationState.nOperands$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle operands$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("operands"));
    public static VarHandle operands$VH() {
        return MlirOperationState.operands$VH;
    }
    public static MemoryAddress operands$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.operands$VH.get(seg);
    }
    public static void operands$set( MemorySegment seg, MemoryAddress x) {
        MlirOperationState.operands$VH.set(seg, x);
    }
    public static MemoryAddress operands$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.operands$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void operands$set(MemorySegment seg, long index, MemoryAddress x) {
        MlirOperationState.operands$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nRegions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nRegions"));
    public static VarHandle nRegions$VH() {
        return MlirOperationState.nRegions$VH;
    }
    public static long nRegions$get(MemorySegment seg) {
        return (long)MlirOperationState.nRegions$VH.get(seg);
    }
    public static void nRegions$set( MemorySegment seg, long x) {
        MlirOperationState.nRegions$VH.set(seg, x);
    }
    public static long nRegions$get(MemorySegment seg, long index) {
        return (long)MlirOperationState.nRegions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nRegions$set(MemorySegment seg, long index, long x) {
        MlirOperationState.nRegions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle regions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("regions"));
    public static VarHandle regions$VH() {
        return MlirOperationState.regions$VH;
    }
    public static MemoryAddress regions$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.regions$VH.get(seg);
    }
    public static void regions$set( MemorySegment seg, MemoryAddress x) {
        MlirOperationState.regions$VH.set(seg, x);
    }
    public static MemoryAddress regions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.regions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void regions$set(MemorySegment seg, long index, MemoryAddress x) {
        MlirOperationState.regions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nSuccessors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nSuccessors"));
    public static VarHandle nSuccessors$VH() {
        return MlirOperationState.nSuccessors$VH;
    }
    public static long nSuccessors$get(MemorySegment seg) {
        return (long)MlirOperationState.nSuccessors$VH.get(seg);
    }
    public static void nSuccessors$set( MemorySegment seg, long x) {
        MlirOperationState.nSuccessors$VH.set(seg, x);
    }
    public static long nSuccessors$get(MemorySegment seg, long index) {
        return (long)MlirOperationState.nSuccessors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nSuccessors$set(MemorySegment seg, long index, long x) {
        MlirOperationState.nSuccessors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle successors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("successors"));
    public static VarHandle successors$VH() {
        return MlirOperationState.successors$VH;
    }
    public static MemoryAddress successors$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.successors$VH.get(seg);
    }
    public static void successors$set( MemorySegment seg, MemoryAddress x) {
        MlirOperationState.successors$VH.set(seg, x);
    }
    public static MemoryAddress successors$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.successors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void successors$set(MemorySegment seg, long index, MemoryAddress x) {
        MlirOperationState.successors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nAttributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nAttributes"));
    public static VarHandle nAttributes$VH() {
        return MlirOperationState.nAttributes$VH;
    }
    public static long nAttributes$get(MemorySegment seg) {
        return (long)MlirOperationState.nAttributes$VH.get(seg);
    }
    public static void nAttributes$set( MemorySegment seg, long x) {
        MlirOperationState.nAttributes$VH.set(seg, x);
    }
    public static long nAttributes$get(MemorySegment seg, long index) {
        return (long)MlirOperationState.nAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nAttributes$set(MemorySegment seg, long index, long x) {
        MlirOperationState.nAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("attributes"));
    public static VarHandle attributes$VH() {
        return MlirOperationState.attributes$VH;
    }
    public static MemoryAddress attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.attributes$VH.get(seg);
    }
    public static void attributes$set( MemorySegment seg, MemoryAddress x) {
        MlirOperationState.attributes$VH.set(seg, x);
    }
    public static MemoryAddress attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)MlirOperationState.attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        MlirOperationState.attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enableResultTypeInference$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enableResultTypeInference"));
    public static VarHandle enableResultTypeInference$VH() {
        return MlirOperationState.enableResultTypeInference$VH;
    }
    public static boolean enableResultTypeInference$get(MemorySegment seg) {
        return (boolean)MlirOperationState.enableResultTypeInference$VH.get(seg);
    }
    public static void enableResultTypeInference$set( MemorySegment seg, boolean x) {
        MlirOperationState.enableResultTypeInference$VH.set(seg, x);
    }
    public static boolean enableResultTypeInference$get(MemorySegment seg, long index) {
        return (boolean)MlirOperationState.enableResultTypeInference$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enableResultTypeInference$set(MemorySegment seg, long index, boolean x) {
        MlirOperationState.enableResultTypeInference$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


