// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$42 {

    static final FunctionDescriptor mlirAffineExprGetLargestKnownDivisor$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprGetLargestKnownDivisor$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprGetLargestKnownDivisor",
        constants$42.mlirAffineExprGetLargestKnownDivisor$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsMultipleOf$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirAffineExprIsMultipleOf$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsMultipleOf",
        constants$42.mlirAffineExprIsMultipleOf$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsFunctionOfDim$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirAffineExprIsFunctionOfDim$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsFunctionOfDim",
        constants$42.mlirAffineExprIsFunctionOfDim$FUNC
    );
    static final FunctionDescriptor mlirAffineExprCompose$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineExprCompose$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprCompose",
        constants$42.mlirAffineExprCompose$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsADim$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsADim$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsADim",
        constants$42.mlirAffineExprIsADim$FUNC
    );
    static final FunctionDescriptor mlirAffineDimExprGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirAffineDimExprGet$MH = RuntimeHelper.downcallHandle(
        "mlirAffineDimExprGet",
        constants$42.mlirAffineDimExprGet$FUNC
    );
}


