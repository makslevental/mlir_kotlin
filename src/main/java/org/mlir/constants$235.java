// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$235 {

    static final FunctionDescriptor LLVMViewFunctionCFG$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMViewFunctionCFG$MH = RuntimeHelper.downcallHandle(
        "LLVMViewFunctionCFG",
        constants$235.LLVMViewFunctionCFG$FUNC
    );
    static final FunctionDescriptor LLVMViewFunctionCFGOnly$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMViewFunctionCFGOnly$MH = RuntimeHelper.downcallHandle(
        "LLVMViewFunctionCFGOnly",
        constants$235.LLVMViewFunctionCFGOnly$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionPasses$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionPasses$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionPasses",
        constants$235.mlirRegisterConversionPasses$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionArithToLLVMConversionPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionArithToLLVMConversionPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionArithToLLVMConversionPass",
        constants$235.mlirCreateConversionArithToLLVMConversionPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionArithToLLVMConversionPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionArithToLLVMConversionPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionArithToLLVMConversionPass",
        constants$235.mlirRegisterConversionArithToLLVMConversionPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertAMDGPUToROCDL$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertAMDGPUToROCDL$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertAMDGPUToROCDL",
        constants$235.mlirCreateConversionConvertAMDGPUToROCDL$FUNC
    );
}


