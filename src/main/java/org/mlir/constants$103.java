// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$103 {

    static final FunctionDescriptor LLVMArrayType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMArrayType$MH = RuntimeHelper.downcallHandle(
        "LLVMArrayType",
        constants$103.LLVMArrayType$FUNC
    );
    static final FunctionDescriptor LLVMArrayType2$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle LLVMArrayType2$MH = RuntimeHelper.downcallHandle(
        "LLVMArrayType2",
        constants$103.LLVMArrayType2$FUNC
    );
    static final FunctionDescriptor LLVMGetArrayLength$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetArrayLength$MH = RuntimeHelper.downcallHandle(
        "LLVMGetArrayLength",
        constants$103.LLVMGetArrayLength$FUNC
    );
    static final FunctionDescriptor LLVMGetArrayLength2$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetArrayLength2$MH = RuntimeHelper.downcallHandle(
        "LLVMGetArrayLength2",
        constants$103.LLVMGetArrayLength2$FUNC
    );
    static final FunctionDescriptor LLVMPointerType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMPointerType$MH = RuntimeHelper.downcallHandle(
        "LLVMPointerType",
        constants$103.LLVMPointerType$FUNC
    );
    static final FunctionDescriptor LLVMPointerTypeIsOpaque$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMPointerTypeIsOpaque$MH = RuntimeHelper.downcallHandle(
        "LLVMPointerTypeIsOpaque",
        constants$103.LLVMPointerTypeIsOpaque$FUNC
    );
}


