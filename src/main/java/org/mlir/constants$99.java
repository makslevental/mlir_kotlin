// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$99 {

    static final FunctionDescriptor LLVMFloatType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMFloatType$MH = RuntimeHelper.downcallHandle(
        "LLVMFloatType",
        constants$99.LLVMFloatType$FUNC
    );
    static final FunctionDescriptor LLVMDoubleType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMDoubleType$MH = RuntimeHelper.downcallHandle(
        "LLVMDoubleType",
        constants$99.LLVMDoubleType$FUNC
    );
    static final FunctionDescriptor LLVMX86FP80Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMX86FP80Type$MH = RuntimeHelper.downcallHandle(
        "LLVMX86FP80Type",
        constants$99.LLVMX86FP80Type$FUNC
    );
    static final FunctionDescriptor LLVMFP128Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMFP128Type$MH = RuntimeHelper.downcallHandle(
        "LLVMFP128Type",
        constants$99.LLVMFP128Type$FUNC
    );
    static final FunctionDescriptor LLVMPPCFP128Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMPPCFP128Type$MH = RuntimeHelper.downcallHandle(
        "LLVMPPCFP128Type",
        constants$99.LLVMPPCFP128Type$FUNC
    );
    static final FunctionDescriptor LLVMFunctionType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMFunctionType$MH = RuntimeHelper.downcallHandle(
        "LLVMFunctionType",
        constants$99.LLVMFunctionType$FUNC
    );
}


