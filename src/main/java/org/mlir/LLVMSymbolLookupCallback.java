// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface LLVMSymbolLookupCallback {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress DisInfo, long ReferenceValue, java.lang.foreign.MemoryAddress ReferenceType, long ReferencePC, java.lang.foreign.MemoryAddress ReferenceName);
    static MemorySegment allocate(LLVMSymbolLookupCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(LLVMSymbolLookupCallback.class, fi, constants$309.LLVMSymbolLookupCallback$FUNC, session);
    }
    static LLVMSymbolLookupCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _DisInfo, long _ReferenceValue, java.lang.foreign.MemoryAddress _ReferenceType, long _ReferencePC, java.lang.foreign.MemoryAddress _ReferenceName) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$309.LLVMSymbolLookupCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_DisInfo, _ReferenceValue, (java.lang.foreign.Addressable)_ReferenceType, _ReferencePC, (java.lang.foreign.Addressable)_ReferenceName);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


