// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$290 {

    static final FunctionDescriptor LLVMAddAlwaysInlinerPass$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddAlwaysInlinerPass$MH = RuntimeHelper.downcallHandle(
        "LLVMAddAlwaysInlinerPass",
        constants$290.LLVMAddAlwaysInlinerPass$FUNC
    );
    static final FunctionDescriptor LLVMAddGlobalDCEPass$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddGlobalDCEPass$MH = RuntimeHelper.downcallHandle(
        "LLVMAddGlobalDCEPass",
        constants$290.LLVMAddGlobalDCEPass$FUNC
    );
    static final FunctionDescriptor LLVMLoadLibraryPermanently$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMLoadLibraryPermanently$MH = RuntimeHelper.downcallHandle(
        "LLVMLoadLibraryPermanently",
        constants$290.LLVMLoadLibraryPermanently$FUNC
    );
    static final FunctionDescriptor LLVMParseCommandLineOptions$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMParseCommandLineOptions$MH = RuntimeHelper.downcallHandle(
        "LLVMParseCommandLineOptions",
        constants$290.LLVMParseCommandLineOptions$FUNC
    );
    static final FunctionDescriptor LLVMSearchForAddressOfSymbol$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMSearchForAddressOfSymbol$MH = RuntimeHelper.downcallHandle(
        "LLVMSearchForAddressOfSymbol",
        constants$290.LLVMSearchForAddressOfSymbol$FUNC
    );
    static final FunctionDescriptor LLVMAddSymbol$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMAddSymbol$MH = RuntimeHelper.downcallHandle(
        "LLVMAddSymbol",
        constants$290.LLVMAddSymbol$FUNC
    );
}


