// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$72 {

    static final FunctionDescriptor LLVMCopyStringRepOfTargetData$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMCopyStringRepOfTargetData$MH = RuntimeHelper.downcallHandle(
        "LLVMCopyStringRepOfTargetData",
        constants$72.LLVMCopyStringRepOfTargetData$FUNC
    );
    static final FunctionDescriptor LLVMByteOrder$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMByteOrder$MH = RuntimeHelper.downcallHandle(
        "LLVMByteOrder",
        constants$72.LLVMByteOrder$FUNC
    );
    static final FunctionDescriptor LLVMPointerSize$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMPointerSize$MH = RuntimeHelper.downcallHandle(
        "LLVMPointerSize",
        constants$72.LLVMPointerSize$FUNC
    );
    static final FunctionDescriptor LLVMPointerSizeForAS$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMPointerSizeForAS$MH = RuntimeHelper.downcallHandle(
        "LLVMPointerSizeForAS",
        constants$72.LLVMPointerSizeForAS$FUNC
    );
    static final FunctionDescriptor LLVMIntPtrType$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIntPtrType$MH = RuntimeHelper.downcallHandle(
        "LLVMIntPtrType",
        constants$72.LLVMIntPtrType$FUNC
    );
    static final FunctionDescriptor LLVMIntPtrTypeForAS$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMIntPtrTypeForAS$MH = RuntimeHelper.downcallHandle(
        "LLVMIntPtrTypeForAS",
        constants$72.LLVMIntPtrTypeForAS$FUNC
    );
}


