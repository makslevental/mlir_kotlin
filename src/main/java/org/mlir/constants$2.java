// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$2 {

    static final FunctionDescriptor mlirTypeIDHashValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirTypeID")
    );
    static final MethodHandle mlirTypeIDHashValue$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIDHashValue",
        constants$2.mlirTypeIDHashValue$FUNC
    );
    static final FunctionDescriptor mlirTypeIDAllocatorCreate$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirTypeIDAllocator"));
    static final MethodHandle mlirTypeIDAllocatorCreate$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIDAllocatorCreate",
        constants$2.mlirTypeIDAllocatorCreate$FUNC
    );
    static final FunctionDescriptor mlirTypeIDAllocatorDestroy$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirTypeIDAllocator")
    );
    static final MethodHandle mlirTypeIDAllocatorDestroy$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIDAllocatorDestroy",
        constants$2.mlirTypeIDAllocatorDestroy$FUNC
    );
    static final FunctionDescriptor mlirTypeIDAllocatorAllocateTypeID$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirTypeID"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirTypeIDAllocator")
    );
    static final MethodHandle mlirTypeIDAllocatorAllocateTypeID$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIDAllocatorAllocateTypeID",
        constants$2.mlirTypeIDAllocatorAllocateTypeID$FUNC
    );
    static final FunctionDescriptor mlirContextCreate$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirContext"));
    static final MethodHandle mlirContextCreate$MH = RuntimeHelper.downcallHandle(
        "mlirContextCreate",
        constants$2.mlirContextCreate$FUNC
    );
    static final FunctionDescriptor mlirContextEqual$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext")
    );
    static final MethodHandle mlirContextEqual$MH = RuntimeHelper.downcallHandle(
        "mlirContextEqual",
        constants$2.mlirContextEqual$FUNC
    );
}


