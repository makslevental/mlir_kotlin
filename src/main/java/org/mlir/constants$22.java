// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$22 {

    static final FunctionDescriptor mlirBlockGetNumArguments$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirBlock")
    );
    static final MethodHandle mlirBlockGetNumArguments$MH = RuntimeHelper.downcallHandle(
        "mlirBlockGetNumArguments",
        constants$22.mlirBlockGetNumArguments$FUNC
    );
    static final FunctionDescriptor mlirBlockAddArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirValue"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirBlock"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirLocation")
    );
    static final MethodHandle mlirBlockAddArgument$MH = RuntimeHelper.downcallHandle(
        "mlirBlockAddArgument",
        constants$22.mlirBlockAddArgument$FUNC
    );
    static final FunctionDescriptor mlirBlockGetArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirValue"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirBlock"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirBlockGetArgument$MH = RuntimeHelper.downcallHandle(
        "mlirBlockGetArgument",
        constants$22.mlirBlockGetArgument$FUNC
    );
    static final FunctionDescriptor mlirBlockPrint$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirBlock"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirBlockPrint$MH = RuntimeHelper.downcallHandle(
        "mlirBlockPrint",
        constants$22.mlirBlockPrint$FUNC
    );
    static final FunctionDescriptor mlirValueIsNull$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirValue")
    );
    static final MethodHandle mlirValueIsNull$MH = RuntimeHelper.downcallHandle(
        "mlirValueIsNull",
        constants$22.mlirValueIsNull$FUNC
    );
    static final FunctionDescriptor mlirValueEqual$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirValue"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirValue")
    );
    static final MethodHandle mlirValueEqual$MH = RuntimeHelper.downcallHandle(
        "mlirValueEqual",
        constants$22.mlirValueEqual$FUNC
    );
}


