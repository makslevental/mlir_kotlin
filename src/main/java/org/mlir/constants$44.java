// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$44 {

    static final FunctionDescriptor mlirAffineConstantExprGetValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineConstantExprGetValue$MH = RuntimeHelper.downcallHandle(
        "mlirAffineConstantExprGetValue",
        constants$44.mlirAffineConstantExprGetValue$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsAAdd$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsAAdd$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsAAdd",
        constants$44.mlirAffineExprIsAAdd$FUNC
    );
    static final FunctionDescriptor mlirAffineAddExprGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineAddExprGet$MH = RuntimeHelper.downcallHandle(
        "mlirAffineAddExprGet",
        constants$44.mlirAffineAddExprGet$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsAMul$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsAMul$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsAMul",
        constants$44.mlirAffineExprIsAMul$FUNC
    );
    static final FunctionDescriptor mlirAffineMulExprGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineMulExprGet$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMulExprGet",
        constants$44.mlirAffineMulExprGet$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsAMod$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsAMod$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsAMod",
        constants$44.mlirAffineExprIsAMod$FUNC
    );
}


