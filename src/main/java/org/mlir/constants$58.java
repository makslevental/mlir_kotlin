// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$58 {

    static final FunctionDescriptor mlirTypeIsAF32$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeIsAF32$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIsAF32",
        constants$58.mlirTypeIsAF32$FUNC
    );
    static final FunctionDescriptor mlirF32TypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext")
    );
    static final MethodHandle mlirF32TypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirF32TypeGet",
        constants$58.mlirF32TypeGet$FUNC
    );
    static final FunctionDescriptor mlirTypeIsAF64$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeIsAF64$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIsAF64",
        constants$58.mlirTypeIsAF64$FUNC
    );
    static final FunctionDescriptor mlirF64TypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext")
    );
    static final MethodHandle mlirF64TypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirF64TypeGet",
        constants$58.mlirF64TypeGet$FUNC
    );
    static final FunctionDescriptor mlirTypeIsANone$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeIsANone$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIsANone",
        constants$58.mlirTypeIsANone$FUNC
    );
    static final FunctionDescriptor mlirNoneTypeGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext")
    );
    static final MethodHandle mlirNoneTypeGet$MH = RuntimeHelper.downcallHandle(
        "mlirNoneTypeGet",
        constants$58.mlirNoneTypeGet$FUNC
    );
}


