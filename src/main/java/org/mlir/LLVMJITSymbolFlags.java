// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class LLVMJITSymbolFlags {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("GenericFlags"),
        Constants$root.C_CHAR$LAYOUT.withName("TargetFlags")
    );
    public static MemoryLayout $LAYOUT() {
        return LLVMJITSymbolFlags.$struct$LAYOUT;
    }
    static final VarHandle GenericFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GenericFlags"));
    public static VarHandle GenericFlags$VH() {
        return LLVMJITSymbolFlags.GenericFlags$VH;
    }
    public static byte GenericFlags$get(MemorySegment seg) {
        return (byte)LLVMJITSymbolFlags.GenericFlags$VH.get(seg);
    }
    public static void GenericFlags$set( MemorySegment seg, byte x) {
        LLVMJITSymbolFlags.GenericFlags$VH.set(seg, x);
    }
    public static byte GenericFlags$get(MemorySegment seg, long index) {
        return (byte)LLVMJITSymbolFlags.GenericFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GenericFlags$set(MemorySegment seg, long index, byte x) {
        LLVMJITSymbolFlags.GenericFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TargetFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TargetFlags"));
    public static VarHandle TargetFlags$VH() {
        return LLVMJITSymbolFlags.TargetFlags$VH;
    }
    public static byte TargetFlags$get(MemorySegment seg) {
        return (byte)LLVMJITSymbolFlags.TargetFlags$VH.get(seg);
    }
    public static void TargetFlags$set( MemorySegment seg, byte x) {
        LLVMJITSymbolFlags.TargetFlags$VH.set(seg, x);
    }
    public static byte TargetFlags$get(MemorySegment seg, long index) {
        return (byte)LLVMJITSymbolFlags.TargetFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetFlags$set(MemorySegment seg, long index, byte x) {
        LLVMJITSymbolFlags.TargetFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


