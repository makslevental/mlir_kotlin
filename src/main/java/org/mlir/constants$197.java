// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$197 {

    static final FunctionDescriptor LLVMStartMultithreaded$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle LLVMStartMultithreaded$MH = RuntimeHelper.downcallHandle(
        "LLVMStartMultithreaded",
        constants$197.LLVMStartMultithreaded$FUNC
    );
    static final FunctionDescriptor LLVMStopMultithreaded$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle LLVMStopMultithreaded$MH = RuntimeHelper.downcallHandle(
        "LLVMStopMultithreaded",
        constants$197.LLVMStopMultithreaded$FUNC
    );
    static final FunctionDescriptor LLVMIsMultithreaded$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle LLVMIsMultithreaded$MH = RuntimeHelper.downcallHandle(
        "LLVMIsMultithreaded",
        constants$197.LLVMIsMultithreaded$FUNC
    );
    static final FunctionDescriptor LLVMPassManagerBuilderCreate$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMPassManagerBuilderCreate$MH = RuntimeHelper.downcallHandle(
        "LLVMPassManagerBuilderCreate",
        constants$197.LLVMPassManagerBuilderCreate$FUNC
    );
    static final FunctionDescriptor LLVMPassManagerBuilderDispose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMPassManagerBuilderDispose$MH = RuntimeHelper.downcallHandle(
        "LLVMPassManagerBuilderDispose",
        constants$197.LLVMPassManagerBuilderDispose$FUNC
    );
    static final FunctionDescriptor LLVMPassManagerBuilderSetOptLevel$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMPassManagerBuilderSetOptLevel$MH = RuntimeHelper.downcallHandle(
        "LLVMPassManagerBuilderSetOptLevel",
        constants$197.LLVMPassManagerBuilderSetOptLevel$FUNC
    );
}


