// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface lto_diagnostic_handler_t {

    void apply(int severity, java.lang.foreign.MemoryAddress diag, java.lang.foreign.MemoryAddress ctxt);
    static MemorySegment allocate(lto_diagnostic_handler_t fi, MemorySession session) {
        return RuntimeHelper.upcallStub(lto_diagnostic_handler_t.class, fi, constants$276.lto_diagnostic_handler_t$FUNC, session);
    }
    static lto_diagnostic_handler_t ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _severity, java.lang.foreign.MemoryAddress _diag, java.lang.foreign.MemoryAddress _ctxt) -> {
            try {
                constants$276.lto_diagnostic_handler_t$MH.invokeExact((Addressable)symbol, _severity, (java.lang.foreign.Addressable)_diag, (java.lang.foreign.Addressable)_ctxt);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


