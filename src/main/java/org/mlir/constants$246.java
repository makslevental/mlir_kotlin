// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$246 {

    static final FunctionDescriptor mlirRegisterConversionConvertPDLToPDLInterp$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertPDLToPDLInterp$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertPDLToPDLInterp",
        constants$246.mlirRegisterConversionConvertPDLToPDLInterp$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertParallelLoopToGpu$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertParallelLoopToGpu$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertParallelLoopToGpu",
        constants$246.mlirCreateConversionConvertParallelLoopToGpu$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertParallelLoopToGpu$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertParallelLoopToGpu$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertParallelLoopToGpu",
        constants$246.mlirRegisterConversionConvertParallelLoopToGpu$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertSCFToOpenMPPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertSCFToOpenMPPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertSCFToOpenMPPass",
        constants$246.mlirCreateConversionConvertSCFToOpenMPPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertSCFToOpenMPPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertSCFToOpenMPPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertSCFToOpenMPPass",
        constants$246.mlirRegisterConversionConvertSCFToOpenMPPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertSPIRVToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertSPIRVToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertSPIRVToLLVMPass",
        constants$246.mlirCreateConversionConvertSPIRVToLLVMPass$FUNC
    );
}


