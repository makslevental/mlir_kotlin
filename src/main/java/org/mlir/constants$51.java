// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$51 {

    static final FunctionDescriptor mlirAffineMapPermutationGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineMap"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirAffineMapPermutationGet$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapPermutationGet",
        constants$51.mlirAffineMapPermutationGet$FUNC
    );
    static final FunctionDescriptor mlirAffineMapIsIdentity$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineMapIsIdentity$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapIsIdentity",
        constants$51.mlirAffineMapIsIdentity$FUNC
    );
    static final FunctionDescriptor mlirAffineMapIsMinorIdentity$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineMapIsMinorIdentity$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapIsMinorIdentity",
        constants$51.mlirAffineMapIsMinorIdentity$FUNC
    );
    static final FunctionDescriptor mlirAffineMapIsEmpty$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineMapIsEmpty$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapIsEmpty",
        constants$51.mlirAffineMapIsEmpty$FUNC
    );
    static final FunctionDescriptor mlirAffineMapIsSingleConstant$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineMapIsSingleConstant$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapIsSingleConstant",
        constants$51.mlirAffineMapIsSingleConstant$FUNC
    );
    static final FunctionDescriptor mlirAffineMapGetSingleConstantResult$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineMapGetSingleConstantResult$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapGetSingleConstantResult",
        constants$51.mlirAffineMapGetSingleConstantResult$FUNC
    );
}


