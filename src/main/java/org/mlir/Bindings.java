// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Bindings extends Bindings_3 {

    /* package-private */ Bindings() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int true_() {
        return (int)1L;
    }
    public static int false_() {
        return (int)0L;
    }
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    public static int _QUAD_HIGHWORD() {
        return (int)1L;
    }
    public static int _QUAD_LOWWORD() {
        return (int)0L;
    }
    public static int __DARWIN_LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __DARWIN_BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __DARWIN_PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int __DARWIN_FD_SETSIZE() {
        return (int)1024L;
    }
    public static int __DARWIN_NBBY() {
        return (int)8L;
    }
    public static int LLVM_ENABLE_THREADS() {
        return (int)1L;
    }
    public static int LLVM_HAS_ATOMICS() {
        return (int)1L;
    }
    public static int LLVM_ON_UNIX() {
        return (int)1L;
    }
    public static int LLVM_USE_INTEL_JITEVENTS() {
        return (int)0L;
    }
    public static int LLVM_USE_OPROFILE() {
        return (int)0L;
    }
    public static int LLVM_USE_PERF() {
        return (int)0L;
    }
    public static int LLVM_VERSION_MAJOR() {
        return (int)17L;
    }
    public static int LLVM_VERSION_MINOR() {
        return (int)0L;
    }
    public static int LLVM_VERSION_PATCH() {
        return (int)0L;
    }
    public static int LLVM_FORCE_ENABLE_STATS() {
        return (int)0L;
    }
    public static int LLVM_ENABLE_ZLIB() {
        return (int)1L;
    }
    public static int LLVM_ENABLE_ZSTD() {
        return (int)0L;
    }
    public static int HAVE_SYSEXITS_H() {
        return (int)1L;
    }
    public static int LLVM_UNREACHABLE_OPTIMIZE() {
        return (int)1L;
    }
    public static int LLVM_ENABLE_DIA_SDK() {
        return (int)0L;
    }
    public static int REMARKS_API_VERSION() {
        return (int)1L;
    }
    public static int LLVMErrorSuccess() {
        return (int)0L;
    }
    public static int LLVM_BLAKE3_KEY_LEN() {
        return (int)32L;
    }
    public static int LLVM_BLAKE3_OUT_LEN() {
        return (int)32L;
    }
    public static int LLVM_BLAKE3_BLOCK_LEN() {
        return (int)64L;
    }
    public static int LLVM_BLAKE3_CHUNK_LEN() {
        return (int)1024L;
    }
    public static int LLVM_BLAKE3_MAX_DEPTH() {
        return (int)54L;
    }
    public static int LTO_API_VERSION() {
        return (int)29L;
    }
    public static int LLVMDisassembler_VariantKind_None() {
        return (int)0L;
    }
    public static int LLVMDisassembler_VariantKind_ARM_HI16() {
        return (int)1L;
    }
    public static int LLVMDisassembler_VariantKind_ARM_LO16() {
        return (int)2L;
    }
    public static int LLVMDisassembler_VariantKind_ARM64_PAGE() {
        return (int)1L;
    }
    public static int LLVMDisassembler_VariantKind_ARM64_PAGEOFF() {
        return (int)2L;
    }
    public static int LLVMDisassembler_VariantKind_ARM64_GOTPAGE() {
        return (int)3L;
    }
    public static int LLVMDisassembler_VariantKind_ARM64_GOTPAGEOFF() {
        return (int)4L;
    }
    public static int LLVMDisassembler_VariantKind_ARM64_TLVP() {
        return (int)5L;
    }
    public static int LLVMDisassembler_VariantKind_ARM64_TLVOFF() {
        return (int)6L;
    }
    public static int LLVMDisassembler_ReferenceType_InOut_None() {
        return (int)0L;
    }
    public static int LLVMDisassembler_ReferenceType_In_Branch() {
        return (int)1L;
    }
    public static int LLVMDisassembler_ReferenceType_In_PCrel_Load() {
        return (int)2L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_SymbolStub() {
        return (int)1L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_LitPool_SymAddr() {
        return (int)2L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_LitPool_CstrAddr() {
        return (int)3L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_Objc_CFString_Ref() {
        return (int)4L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_Objc_Message() {
        return (int)5L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_Objc_Message_Ref() {
        return (int)6L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_Objc_Selector_Ref() {
        return (int)7L;
    }
    public static int LLVMDisassembler_ReferenceType_Out_Objc_Class_Ref() {
        return (int)8L;
    }
    public static int LLVMDisassembler_ReferenceType_DeMangled_Name() {
        return (int)9L;
    }
    public static int LLVMDisassembler_Option_UseMarkup() {
        return (int)1L;
    }
    public static int LLVMDisassembler_Option_PrintImmHex() {
        return (int)2L;
    }
    public static int LLVMDisassembler_Option_AsmPrinterVariant() {
        return (int)4L;
    }
    public static int LLVMDisassembler_Option_SetInstrComments() {
        return (int)8L;
    }
    public static int LLVMDisassembler_Option_PrintLatency() {
        return (int)16L;
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_fast16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_nl_item = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wctrans_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt wint_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle mlirStringRefCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mlirStringRefCreate$MH,"mlirStringRefCreate");
    }
    public static MemorySegment mlirStringRefCreate ( SegmentAllocator allocator,  Addressable str,  long length) {
        var mh$ = mlirStringRefCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, str, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStringRefCreateFromCString$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mlirStringRefCreateFromCString$MH,"mlirStringRefCreateFromCString");
    }
    public static MemorySegment mlirStringRefCreateFromCString ( SegmentAllocator allocator,  Addressable str) {
        var mh$ = mlirStringRefCreateFromCString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirStringRefEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mlirStringRefEqual$MH,"mlirStringRefEqual");
    }
    public static boolean mlirStringRefEqual ( MemorySegment string,  MemorySegment other) {
        var mh$ = mlirStringRefEqual$MH();
        try {
            return (boolean)mh$.invokeExact(string, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLogicalResultIsSuccess$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mlirLogicalResultIsSuccess$MH,"mlirLogicalResultIsSuccess");
    }
    public static boolean mlirLogicalResultIsSuccess ( MemorySegment res) {
        var mh$ = mlirLogicalResultIsSuccess$MH();
        try {
            return (boolean)mh$.invokeExact(res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLogicalResultIsFailure$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mlirLogicalResultIsFailure$MH,"mlirLogicalResultIsFailure");
    }
    public static boolean mlirLogicalResultIsFailure ( MemorySegment res) {
        var mh$ = mlirLogicalResultIsFailure$MH();
        try {
            return (boolean)mh$.invokeExact(res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLogicalResultSuccess$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mlirLogicalResultSuccess$MH,"mlirLogicalResultSuccess");
    }
    public static MemorySegment mlirLogicalResultSuccess ( SegmentAllocator allocator) {
        var mh$ = mlirLogicalResultSuccess$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLogicalResultFailure$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mlirLogicalResultFailure$MH,"mlirLogicalResultFailure");
    }
    public static MemorySegment mlirLogicalResultFailure ( SegmentAllocator allocator) {
        var mh$ = mlirLogicalResultFailure$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mlirTypeIDCreate$MH,"mlirTypeIDCreate");
    }
    public static MemorySegment mlirTypeIDCreate ( SegmentAllocator allocator,  Addressable ptr) {
        var mh$ = mlirTypeIDCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mlirTypeIDIsNull$MH,"mlirTypeIDIsNull");
    }
    public static boolean mlirTypeIDIsNull ( MemorySegment typeID) {
        var mh$ = mlirTypeIDIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(typeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mlirTypeIDEqual$MH,"mlirTypeIDEqual");
    }
    public static boolean mlirTypeIDEqual ( MemorySegment typeID1,  MemorySegment typeID2) {
        var mh$ = mlirTypeIDEqual$MH();
        try {
            return (boolean)mh$.invokeExact(typeID1, typeID2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDHashValue$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mlirTypeIDHashValue$MH,"mlirTypeIDHashValue");
    }
    public static long mlirTypeIDHashValue ( MemorySegment typeID) {
        var mh$ = mlirTypeIDHashValue$MH();
        try {
            return (long)mh$.invokeExact(typeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDAllocatorCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mlirTypeIDAllocatorCreate$MH,"mlirTypeIDAllocatorCreate");
    }
    public static MemorySegment mlirTypeIDAllocatorCreate ( SegmentAllocator allocator) {
        var mh$ = mlirTypeIDAllocatorCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDAllocatorDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mlirTypeIDAllocatorDestroy$MH,"mlirTypeIDAllocatorDestroy");
    }
    public static void mlirTypeIDAllocatorDestroy ( MemorySegment allocator) {
        var mh$ = mlirTypeIDAllocatorDestroy$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIDAllocatorAllocateTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mlirTypeIDAllocatorAllocateTypeID$MH,"mlirTypeIDAllocatorAllocateTypeID");
    }
    public static MemorySegment mlirTypeIDAllocatorAllocateTypeID ( SegmentAllocator allocator,  MemorySegment allocator_) {
        var mh$ = mlirTypeIDAllocatorAllocateTypeID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, allocator_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mlirContextCreate$MH,"mlirContextCreate");
    }
    public static MemorySegment mlirContextCreate ( SegmentAllocator allocator) {
        var mh$ = mlirContextCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mlirContextEqual$MH,"mlirContextEqual");
    }
    public static boolean mlirContextEqual ( MemorySegment ctx1,  MemorySegment ctx2) {
        var mh$ = mlirContextEqual$MH();
        try {
            return (boolean)mh$.invokeExact(ctx1, ctx2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mlirContextIsNull$MH,"mlirContextIsNull");
    }
    public static boolean mlirContextIsNull ( MemorySegment context) {
        var mh$ = mlirContextIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mlirContextDestroy$MH,"mlirContextDestroy");
    }
    public static void mlirContextDestroy ( MemorySegment context) {
        var mh$ = mlirContextDestroy$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextSetAllowUnregisteredDialects$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mlirContextSetAllowUnregisteredDialects$MH,"mlirContextSetAllowUnregisteredDialects");
    }
    public static void mlirContextSetAllowUnregisteredDialects ( MemorySegment context,  boolean allow) {
        var mh$ = mlirContextSetAllowUnregisteredDialects$MH();
        try {
            mh$.invokeExact(context, allow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextGetAllowUnregisteredDialects$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mlirContextGetAllowUnregisteredDialects$MH,"mlirContextGetAllowUnregisteredDialects");
    }
    public static boolean mlirContextGetAllowUnregisteredDialects ( MemorySegment context) {
        var mh$ = mlirContextGetAllowUnregisteredDialects$MH();
        try {
            return (boolean)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextGetNumRegisteredDialects$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mlirContextGetNumRegisteredDialects$MH,"mlirContextGetNumRegisteredDialects");
    }
    public static long mlirContextGetNumRegisteredDialects ( MemorySegment context) {
        var mh$ = mlirContextGetNumRegisteredDialects$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextAppendDialectRegistry$MH() {
        return RuntimeHelper.requireNonNull(constants$3.mlirContextAppendDialectRegistry$MH,"mlirContextAppendDialectRegistry");
    }
    public static void mlirContextAppendDialectRegistry ( MemorySegment ctx,  MemorySegment registry) {
        var mh$ = mlirContextAppendDialectRegistry$MH();
        try {
            mh$.invokeExact(ctx, registry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextGetNumLoadedDialects$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mlirContextGetNumLoadedDialects$MH,"mlirContextGetNumLoadedDialects");
    }
    public static long mlirContextGetNumLoadedDialects ( MemorySegment context) {
        var mh$ = mlirContextGetNumLoadedDialects$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextGetOrLoadDialect$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mlirContextGetOrLoadDialect$MH,"mlirContextGetOrLoadDialect");
    }
    public static MemorySegment mlirContextGetOrLoadDialect ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment name) {
        var mh$ = mlirContextGetOrLoadDialect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextEnableMultithreading$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mlirContextEnableMultithreading$MH,"mlirContextEnableMultithreading");
    }
    public static void mlirContextEnableMultithreading ( MemorySegment context,  boolean enable) {
        var mh$ = mlirContextEnableMultithreading$MH();
        try {
            mh$.invokeExact(context, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextLoadAllAvailableDialects$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mlirContextLoadAllAvailableDialects$MH,"mlirContextLoadAllAvailableDialects");
    }
    public static void mlirContextLoadAllAvailableDialects ( MemorySegment context) {
        var mh$ = mlirContextLoadAllAvailableDialects$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirContextIsRegisteredOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mlirContextIsRegisteredOperation$MH,"mlirContextIsRegisteredOperation");
    }
    public static boolean mlirContextIsRegisteredOperation ( MemorySegment context,  MemorySegment name) {
        var mh$ = mlirContextIsRegisteredOperation$MH();
        try {
            return (boolean)mh$.invokeExact(context, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$4.mlirDialectGetContext$MH,"mlirDialectGetContext");
    }
    public static MemorySegment mlirDialectGetContext ( SegmentAllocator allocator,  MemorySegment dialect) {
        var mh$ = mlirDialectGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, dialect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mlirDialectIsNull$MH,"mlirDialectIsNull");
    }
    public static boolean mlirDialectIsNull ( MemorySegment dialect) {
        var mh$ = mlirDialectIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(dialect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mlirDialectEqual$MH,"mlirDialectEqual");
    }
    public static boolean mlirDialectEqual ( MemorySegment dialect1,  MemorySegment dialect2) {
        var mh$ = mlirDialectEqual$MH();
        try {
            return (boolean)mh$.invokeExact(dialect1, dialect2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectGetNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mlirDialectGetNamespace$MH,"mlirDialectGetNamespace");
    }
    public static MemorySegment mlirDialectGetNamespace ( SegmentAllocator allocator,  MemorySegment dialect) {
        var mh$ = mlirDialectGetNamespace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, dialect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectHandleGetNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mlirDialectHandleGetNamespace$MH,"mlirDialectHandleGetNamespace");
    }
    public static MemorySegment mlirDialectHandleGetNamespace ( SegmentAllocator allocator,  MemorySegment x1) {
        var mh$ = mlirDialectHandleGetNamespace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectHandleInsertDialect$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mlirDialectHandleInsertDialect$MH,"mlirDialectHandleInsertDialect");
    }
    public static void mlirDialectHandleInsertDialect ( MemorySegment x0,  MemorySegment x1) {
        var mh$ = mlirDialectHandleInsertDialect$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectHandleRegisterDialect$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mlirDialectHandleRegisterDialect$MH,"mlirDialectHandleRegisterDialect");
    }
    public static void mlirDialectHandleRegisterDialect ( MemorySegment x0,  MemorySegment x1) {
        var mh$ = mlirDialectHandleRegisterDialect$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectHandleLoadDialect$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mlirDialectHandleLoadDialect$MH,"mlirDialectHandleLoadDialect");
    }
    public static MemorySegment mlirDialectHandleLoadDialect ( SegmentAllocator allocator,  MemorySegment x1,  MemorySegment x2) {
        var mh$ = mlirDialectHandleLoadDialect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectRegistryCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mlirDialectRegistryCreate$MH,"mlirDialectRegistryCreate");
    }
    public static MemorySegment mlirDialectRegistryCreate ( SegmentAllocator allocator) {
        var mh$ = mlirDialectRegistryCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectRegistryIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mlirDialectRegistryIsNull$MH,"mlirDialectRegistryIsNull");
    }
    public static boolean mlirDialectRegistryIsNull ( MemorySegment registry) {
        var mh$ = mlirDialectRegistryIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(registry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirDialectRegistryDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mlirDialectRegistryDestroy$MH,"mlirDialectRegistryDestroy");
    }
    public static void mlirDialectRegistryDestroy ( MemorySegment registry) {
        var mh$ = mlirDialectRegistryDestroy$MH();
        try {
            mh$.invokeExact(registry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationGetAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mlirLocationGetAttribute$MH,"mlirLocationGetAttribute");
    }
    public static MemorySegment mlirLocationGetAttribute ( SegmentAllocator allocator,  MemorySegment location) {
        var mh$ = mlirLocationGetAttribute$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationFromAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mlirLocationFromAttribute$MH,"mlirLocationFromAttribute");
    }
    public static MemorySegment mlirLocationFromAttribute ( SegmentAllocator allocator,  MemorySegment attribute) {
        var mh$ = mlirLocationFromAttribute$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationFileLineColGet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mlirLocationFileLineColGet$MH,"mlirLocationFileLineColGet");
    }
    public static MemorySegment mlirLocationFileLineColGet ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment filename,  int line,  int col) {
        var mh$ = mlirLocationFileLineColGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, filename, line, col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationCallSiteGet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mlirLocationCallSiteGet$MH,"mlirLocationCallSiteGet");
    }
    public static MemorySegment mlirLocationCallSiteGet ( SegmentAllocator allocator,  MemorySegment callee,  MemorySegment caller) {
        var mh$ = mlirLocationCallSiteGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, callee, caller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationFusedGet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mlirLocationFusedGet$MH,"mlirLocationFusedGet");
    }
    public static MemorySegment mlirLocationFusedGet ( SegmentAllocator allocator,  MemorySegment ctx,  long nLocations,  Addressable locations,  MemorySegment metadata) {
        var mh$ = mlirLocationFusedGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, nLocations, locations, metadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationNameGet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mlirLocationNameGet$MH,"mlirLocationNameGet");
    }
    public static MemorySegment mlirLocationNameGet ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment name,  MemorySegment childLoc) {
        var mh$ = mlirLocationNameGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, name, childLoc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationUnknownGet$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mlirLocationUnknownGet$MH,"mlirLocationUnknownGet");
    }
    public static MemorySegment mlirLocationUnknownGet ( SegmentAllocator allocator,  MemorySegment context) {
        var mh$ = mlirLocationUnknownGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mlirLocationGetContext$MH,"mlirLocationGetContext");
    }
    public static MemorySegment mlirLocationGetContext ( SegmentAllocator allocator,  MemorySegment location) {
        var mh$ = mlirLocationGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mlirLocationIsNull$MH,"mlirLocationIsNull");
    }
    public static boolean mlirLocationIsNull ( MemorySegment location) {
        var mh$ = mlirLocationIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mlirLocationEqual$MH,"mlirLocationEqual");
    }
    public static boolean mlirLocationEqual ( MemorySegment l1,  MemorySegment l2) {
        var mh$ = mlirLocationEqual$MH();
        try {
            return (boolean)mh$.invokeExact(l1, l2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirLocationPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mlirLocationPrint$MH,"mlirLocationPrint");
    }
    public static void mlirLocationPrint ( MemorySegment location,  Addressable callback,  Addressable userData) {
        var mh$ = mlirLocationPrint$MH();
        try {
            mh$.invokeExact(location, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleCreateEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mlirModuleCreateEmpty$MH,"mlirModuleCreateEmpty");
    }
    public static MemorySegment mlirModuleCreateEmpty ( SegmentAllocator allocator,  MemorySegment location) {
        var mh$ = mlirModuleCreateEmpty$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleCreateParse$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mlirModuleCreateParse$MH,"mlirModuleCreateParse");
    }
    public static MemorySegment mlirModuleCreateParse ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment module) {
        var mh$ = mlirModuleCreateParse$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mlirModuleGetContext$MH,"mlirModuleGetContext");
    }
    public static MemorySegment mlirModuleGetContext ( SegmentAllocator allocator,  MemorySegment module) {
        var mh$ = mlirModuleGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleGetBody$MH() {
        return RuntimeHelper.requireNonNull(constants$9.mlirModuleGetBody$MH,"mlirModuleGetBody");
    }
    public static MemorySegment mlirModuleGetBody ( SegmentAllocator allocator,  MemorySegment module) {
        var mh$ = mlirModuleGetBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$9.mlirModuleIsNull$MH,"mlirModuleIsNull");
    }
    public static boolean mlirModuleIsNull ( MemorySegment module) {
        var mh$ = mlirModuleIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.mlirModuleDestroy$MH,"mlirModuleDestroy");
    }
    public static void mlirModuleDestroy ( MemorySegment module) {
        var mh$ = mlirModuleDestroy$MH();
        try {
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleGetOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$9.mlirModuleGetOperation$MH,"mlirModuleGetOperation");
    }
    public static MemorySegment mlirModuleGetOperation ( SegmentAllocator allocator,  MemorySegment module) {
        var mh$ = mlirModuleGetOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, module);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirModuleFromOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$9.mlirModuleFromOperation$MH,"mlirModuleFromOperation");
    }
    public static MemorySegment mlirModuleFromOperation ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirModuleFromOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateGet$MH() {
        return RuntimeHelper.requireNonNull(constants$9.mlirOperationStateGet$MH,"mlirOperationStateGet");
    }
    public static MemorySegment mlirOperationStateGet ( SegmentAllocator allocator,  MemorySegment name,  MemorySegment loc) {
        var mh$ = mlirOperationStateGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, name, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateAddResults$MH() {
        return RuntimeHelper.requireNonNull(constants$10.mlirOperationStateAddResults$MH,"mlirOperationStateAddResults");
    }
    public static void mlirOperationStateAddResults ( Addressable state,  long n,  Addressable results) {
        var mh$ = mlirOperationStateAddResults$MH();
        try {
            mh$.invokeExact(state, n, results);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateAddOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$10.mlirOperationStateAddOperands$MH,"mlirOperationStateAddOperands");
    }
    public static void mlirOperationStateAddOperands ( Addressable state,  long n,  Addressable operands) {
        var mh$ = mlirOperationStateAddOperands$MH();
        try {
            mh$.invokeExact(state, n, operands);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateAddOwnedRegions$MH() {
        return RuntimeHelper.requireNonNull(constants$10.mlirOperationStateAddOwnedRegions$MH,"mlirOperationStateAddOwnedRegions");
    }
    public static void mlirOperationStateAddOwnedRegions ( Addressable state,  long n,  Addressable regions) {
        var mh$ = mlirOperationStateAddOwnedRegions$MH();
        try {
            mh$.invokeExact(state, n, regions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateAddSuccessors$MH() {
        return RuntimeHelper.requireNonNull(constants$10.mlirOperationStateAddSuccessors$MH,"mlirOperationStateAddSuccessors");
    }
    public static void mlirOperationStateAddSuccessors ( Addressable state,  long n,  Addressable successors) {
        var mh$ = mlirOperationStateAddSuccessors$MH();
        try {
            mh$.invokeExact(state, n, successors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateAddAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$10.mlirOperationStateAddAttributes$MH,"mlirOperationStateAddAttributes");
    }
    public static void mlirOperationStateAddAttributes ( Addressable state,  long n,  Addressable attributes) {
        var mh$ = mlirOperationStateAddAttributes$MH();
        try {
            mh$.invokeExact(state, n, attributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationStateEnableResultTypeInference$MH() {
        return RuntimeHelper.requireNonNull(constants$10.mlirOperationStateEnableResultTypeInference$MH,"mlirOperationStateEnableResultTypeInference");
    }
    public static void mlirOperationStateEnableResultTypeInference ( Addressable state) {
        var mh$ = mlirOperationStateEnableResultTypeInference$MH();
        try {
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$11.mlirOpPrintingFlagsCreate$MH,"mlirOpPrintingFlagsCreate");
    }
    public static MemorySegment mlirOpPrintingFlagsCreate ( SegmentAllocator allocator) {
        var mh$ = mlirOpPrintingFlagsCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$11.mlirOpPrintingFlagsDestroy$MH,"mlirOpPrintingFlagsDestroy");
    }
    public static void mlirOpPrintingFlagsDestroy ( MemorySegment flags) {
        var mh$ = mlirOpPrintingFlagsDestroy$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsElideLargeElementsAttrs$MH() {
        return RuntimeHelper.requireNonNull(constants$11.mlirOpPrintingFlagsElideLargeElementsAttrs$MH,"mlirOpPrintingFlagsElideLargeElementsAttrs");
    }
    public static void mlirOpPrintingFlagsElideLargeElementsAttrs ( MemorySegment flags,  long largeElementLimit) {
        var mh$ = mlirOpPrintingFlagsElideLargeElementsAttrs$MH();
        try {
            mh$.invokeExact(flags, largeElementLimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsEnableDebugInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$11.mlirOpPrintingFlagsEnableDebugInfo$MH,"mlirOpPrintingFlagsEnableDebugInfo");
    }
    public static void mlirOpPrintingFlagsEnableDebugInfo ( MemorySegment flags,  boolean enable,  boolean prettyForm) {
        var mh$ = mlirOpPrintingFlagsEnableDebugInfo$MH();
        try {
            mh$.invokeExact(flags, enable, prettyForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsPrintGenericOpForm$MH() {
        return RuntimeHelper.requireNonNull(constants$11.mlirOpPrintingFlagsPrintGenericOpForm$MH,"mlirOpPrintingFlagsPrintGenericOpForm");
    }
    public static void mlirOpPrintingFlagsPrintGenericOpForm ( MemorySegment flags) {
        var mh$ = mlirOpPrintingFlagsPrintGenericOpForm$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsUseLocalScope$MH() {
        return RuntimeHelper.requireNonNull(constants$11.mlirOpPrintingFlagsUseLocalScope$MH,"mlirOpPrintingFlagsUseLocalScope");
    }
    public static void mlirOpPrintingFlagsUseLocalScope ( MemorySegment flags) {
        var mh$ = mlirOpPrintingFlagsUseLocalScope$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpPrintingFlagsAssumeVerified$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mlirOpPrintingFlagsAssumeVerified$MH,"mlirOpPrintingFlagsAssumeVerified");
    }
    public static void mlirOpPrintingFlagsAssumeVerified ( MemorySegment flags) {
        var mh$ = mlirOpPrintingFlagsAssumeVerified$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mlirOperationCreate$MH,"mlirOperationCreate");
    }
    public static MemorySegment mlirOperationCreate ( SegmentAllocator allocator,  Addressable state) {
        var mh$ = mlirOperationCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationClone$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mlirOperationClone$MH,"mlirOperationClone");
    }
    public static MemorySegment mlirOperationClone ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationClone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mlirOperationDestroy$MH,"mlirOperationDestroy");
    }
    public static void mlirOperationDestroy ( MemorySegment op) {
        var mh$ = mlirOperationDestroy$MH();
        try {
            mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationRemoveFromParent$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mlirOperationRemoveFromParent$MH,"mlirOperationRemoveFromParent");
    }
    public static void mlirOperationRemoveFromParent ( MemorySegment op) {
        var mh$ = mlirOperationRemoveFromParent$MH();
        try {
            mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mlirOperationIsNull$MH,"mlirOperationIsNull");
    }
    public static boolean mlirOperationIsNull ( MemorySegment op) {
        var mh$ = mlirOperationIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mlirOperationEqual$MH,"mlirOperationEqual");
    }
    public static boolean mlirOperationEqual ( MemorySegment op,  MemorySegment other) {
        var mh$ = mlirOperationEqual$MH();
        try {
            return (boolean)mh$.invokeExact(op, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mlirOperationGetContext$MH,"mlirOperationGetContext");
    }
    public static MemorySegment mlirOperationGetContext ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mlirOperationGetLocation$MH,"mlirOperationGetLocation");
    }
    public static MemorySegment mlirOperationGetLocation ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetLocation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mlirOperationGetTypeID$MH,"mlirOperationGetTypeID");
    }
    public static MemorySegment mlirOperationGetTypeID ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetTypeID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetName$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mlirOperationGetName$MH,"mlirOperationGetName");
    }
    public static MemorySegment mlirOperationGetName ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mlirOperationGetBlock$MH,"mlirOperationGetBlock");
    }
    public static MemorySegment mlirOperationGetBlock ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetBlock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetParentOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mlirOperationGetParentOperation$MH,"mlirOperationGetParentOperation");
    }
    public static MemorySegment mlirOperationGetParentOperation ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetParentOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetNumRegions$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mlirOperationGetNumRegions$MH,"mlirOperationGetNumRegions");
    }
    public static long mlirOperationGetNumRegions ( MemorySegment op) {
        var mh$ = mlirOperationGetNumRegions$MH();
        try {
            return (long)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mlirOperationGetRegion$MH,"mlirOperationGetRegion");
    }
    public static MemorySegment mlirOperationGetRegion ( SegmentAllocator allocator,  MemorySegment op,  long pos) {
        var mh$ = mlirOperationGetRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetNextInBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mlirOperationGetNextInBlock$MH,"mlirOperationGetNextInBlock");
    }
    public static MemorySegment mlirOperationGetNextInBlock ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetNextInBlock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetNumOperands$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mlirOperationGetNumOperands$MH,"mlirOperationGetNumOperands");
    }
    public static long mlirOperationGetNumOperands ( MemorySegment op) {
        var mh$ = mlirOperationGetNumOperands$MH();
        try {
            return (long)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mlirOperationGetOperand$MH,"mlirOperationGetOperand");
    }
    public static MemorySegment mlirOperationGetOperand ( SegmentAllocator allocator,  MemorySegment op,  long pos) {
        var mh$ = mlirOperationGetOperand$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationSetOperand$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mlirOperationSetOperand$MH,"mlirOperationSetOperand");
    }
    public static void mlirOperationSetOperand ( MemorySegment op,  long pos,  MemorySegment newValue) {
        var mh$ = mlirOperationSetOperand$MH();
        try {
            mh$.invokeExact(op, pos, newValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetNumResults$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mlirOperationGetNumResults$MH,"mlirOperationGetNumResults");
    }
    public static long mlirOperationGetNumResults ( MemorySegment op) {
        var mh$ = mlirOperationGetNumResults$MH();
        try {
            return (long)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetResult$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mlirOperationGetResult$MH,"mlirOperationGetResult");
    }
    public static MemorySegment mlirOperationGetResult ( SegmentAllocator allocator,  MemorySegment op,  long pos) {
        var mh$ = mlirOperationGetResult$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetNumSuccessors$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mlirOperationGetNumSuccessors$MH,"mlirOperationGetNumSuccessors");
    }
    public static long mlirOperationGetNumSuccessors ( MemorySegment op) {
        var mh$ = mlirOperationGetNumSuccessors$MH();
        try {
            return (long)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetSuccessor$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mlirOperationGetSuccessor$MH,"mlirOperationGetSuccessor");
    }
    public static MemorySegment mlirOperationGetSuccessor ( SegmentAllocator allocator,  MemorySegment op,  long pos) {
        var mh$ = mlirOperationGetSuccessor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetNumAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mlirOperationGetNumAttributes$MH,"mlirOperationGetNumAttributes");
    }
    public static long mlirOperationGetNumAttributes ( MemorySegment op) {
        var mh$ = mlirOperationGetNumAttributes$MH();
        try {
            return (long)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mlirOperationGetAttribute$MH,"mlirOperationGetAttribute");
    }
    public static MemorySegment mlirOperationGetAttribute ( SegmentAllocator allocator,  MemorySegment op,  long pos) {
        var mh$ = mlirOperationGetAttribute$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetAttributeByName$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mlirOperationGetAttributeByName$MH,"mlirOperationGetAttributeByName");
    }
    public static MemorySegment mlirOperationGetAttributeByName ( SegmentAllocator allocator,  MemorySegment op,  MemorySegment name) {
        var mh$ = mlirOperationGetAttributeByName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationSetAttributeByName$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mlirOperationSetAttributeByName$MH,"mlirOperationSetAttributeByName");
    }
    public static void mlirOperationSetAttributeByName ( MemorySegment op,  MemorySegment name,  MemorySegment attr) {
        var mh$ = mlirOperationSetAttributeByName$MH();
        try {
            mh$.invokeExact(op, name, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationRemoveAttributeByName$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mlirOperationRemoveAttributeByName$MH,"mlirOperationRemoveAttributeByName");
    }
    public static boolean mlirOperationRemoveAttributeByName ( MemorySegment op,  MemorySegment name) {
        var mh$ = mlirOperationRemoveAttributeByName$MH();
        try {
            return (boolean)mh$.invokeExact(op, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mlirOperationPrint$MH,"mlirOperationPrint");
    }
    public static void mlirOperationPrint ( MemorySegment op,  Addressable callback,  Addressable userData) {
        var mh$ = mlirOperationPrint$MH();
        try {
            mh$.invokeExact(op, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationPrintWithFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mlirOperationPrintWithFlags$MH,"mlirOperationPrintWithFlags");
    }
    public static void mlirOperationPrintWithFlags ( MemorySegment op,  MemorySegment flags,  Addressable callback,  Addressable userData) {
        var mh$ = mlirOperationPrintWithFlags$MH();
        try {
            mh$.invokeExact(op, flags, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationWriteBytecode$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mlirOperationWriteBytecode$MH,"mlirOperationWriteBytecode");
    }
    public static void mlirOperationWriteBytecode ( MemorySegment op,  Addressable callback,  Addressable userData) {
        var mh$ = mlirOperationWriteBytecode$MH();
        try {
            mh$.invokeExact(op, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationDump$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mlirOperationDump$MH,"mlirOperationDump");
    }
    public static void mlirOperationDump ( MemorySegment op) {
        var mh$ = mlirOperationDump$MH();
        try {
            mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationVerify$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mlirOperationVerify$MH,"mlirOperationVerify");
    }
    public static boolean mlirOperationVerify ( MemorySegment op) {
        var mh$ = mlirOperationVerify$MH();
        try {
            return (boolean)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationMoveAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mlirOperationMoveAfter$MH,"mlirOperationMoveAfter");
    }
    public static void mlirOperationMoveAfter ( MemorySegment op,  MemorySegment other) {
        var mh$ = mlirOperationMoveAfter$MH();
        try {
            mh$.invokeExact(op, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationMoveBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mlirOperationMoveBefore$MH,"mlirOperationMoveBefore");
    }
    public static void mlirOperationMoveBefore ( MemorySegment op,  MemorySegment other) {
        var mh$ = mlirOperationMoveBefore$MH();
        try {
            mh$.invokeExact(op, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mlirRegionCreate$MH,"mlirRegionCreate");
    }
    public static MemorySegment mlirRegionCreate ( SegmentAllocator allocator) {
        var mh$ = mlirRegionCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mlirRegionDestroy$MH,"mlirRegionDestroy");
    }
    public static void mlirRegionDestroy ( MemorySegment region) {
        var mh$ = mlirRegionDestroy$MH();
        try {
            mh$.invokeExact(region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mlirRegionIsNull$MH,"mlirRegionIsNull");
    }
    public static boolean mlirRegionIsNull ( MemorySegment region) {
        var mh$ = mlirRegionIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mlirRegionEqual$MH,"mlirRegionEqual");
    }
    public static boolean mlirRegionEqual ( MemorySegment region,  MemorySegment other) {
        var mh$ = mlirRegionEqual$MH();
        try {
            return (boolean)mh$.invokeExact(region, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionGetFirstBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mlirRegionGetFirstBlock$MH,"mlirRegionGetFirstBlock");
    }
    public static MemorySegment mlirRegionGetFirstBlock ( SegmentAllocator allocator,  MemorySegment region) {
        var mh$ = mlirRegionGetFirstBlock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionAppendOwnedBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mlirRegionAppendOwnedBlock$MH,"mlirRegionAppendOwnedBlock");
    }
    public static void mlirRegionAppendOwnedBlock ( MemorySegment region,  MemorySegment block) {
        var mh$ = mlirRegionAppendOwnedBlock$MH();
        try {
            mh$.invokeExact(region, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionInsertOwnedBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mlirRegionInsertOwnedBlock$MH,"mlirRegionInsertOwnedBlock");
    }
    public static void mlirRegionInsertOwnedBlock ( MemorySegment region,  long pos,  MemorySegment block) {
        var mh$ = mlirRegionInsertOwnedBlock$MH();
        try {
            mh$.invokeExact(region, pos, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionInsertOwnedBlockAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mlirRegionInsertOwnedBlockAfter$MH,"mlirRegionInsertOwnedBlockAfter");
    }
    public static void mlirRegionInsertOwnedBlockAfter ( MemorySegment region,  MemorySegment reference,  MemorySegment block) {
        var mh$ = mlirRegionInsertOwnedBlockAfter$MH();
        try {
            mh$.invokeExact(region, reference, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionInsertOwnedBlockBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mlirRegionInsertOwnedBlockBefore$MH,"mlirRegionInsertOwnedBlockBefore");
    }
    public static void mlirRegionInsertOwnedBlockBefore ( MemorySegment region,  MemorySegment reference,  MemorySegment block) {
        var mh$ = mlirRegionInsertOwnedBlockBefore$MH();
        try {
            mh$.invokeExact(region, reference, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationGetFirstRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mlirOperationGetFirstRegion$MH,"mlirOperationGetFirstRegion");
    }
    public static MemorySegment mlirOperationGetFirstRegion ( SegmentAllocator allocator,  MemorySegment op) {
        var mh$ = mlirOperationGetFirstRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegionGetNextInOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mlirRegionGetNextInOperation$MH,"mlirRegionGetNextInOperation");
    }
    public static MemorySegment mlirRegionGetNextInOperation ( SegmentAllocator allocator,  MemorySegment region) {
        var mh$ = mlirRegionGetNextInOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mlirBlockCreate$MH,"mlirBlockCreate");
    }
    public static MemorySegment mlirBlockCreate ( SegmentAllocator allocator,  long nArgs,  Addressable args,  Addressable locs) {
        var mh$ = mlirBlockCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, nArgs, args, locs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mlirBlockDestroy$MH,"mlirBlockDestroy");
    }
    public static void mlirBlockDestroy ( MemorySegment block) {
        var mh$ = mlirBlockDestroy$MH();
        try {
            mh$.invokeExact(block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockDetach$MH() {
        return RuntimeHelper.requireNonNull(constants$20.mlirBlockDetach$MH,"mlirBlockDetach");
    }
    public static void mlirBlockDetach ( MemorySegment block) {
        var mh$ = mlirBlockDetach$MH();
        try {
            mh$.invokeExact(block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$20.mlirBlockIsNull$MH,"mlirBlockIsNull");
    }
    public static boolean mlirBlockIsNull ( MemorySegment block) {
        var mh$ = mlirBlockIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$20.mlirBlockEqual$MH,"mlirBlockEqual");
    }
    public static boolean mlirBlockEqual ( MemorySegment block,  MemorySegment other) {
        var mh$ = mlirBlockEqual$MH();
        try {
            return (boolean)mh$.invokeExact(block, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetParentOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$20.mlirBlockGetParentOperation$MH,"mlirBlockGetParentOperation");
    }
    public static MemorySegment mlirBlockGetParentOperation ( SegmentAllocator allocator,  MemorySegment x1) {
        var mh$ = mlirBlockGetParentOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetParentRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$20.mlirBlockGetParentRegion$MH,"mlirBlockGetParentRegion");
    }
    public static MemorySegment mlirBlockGetParentRegion ( SegmentAllocator allocator,  MemorySegment block) {
        var mh$ = mlirBlockGetParentRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetNextInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$20.mlirBlockGetNextInRegion$MH,"mlirBlockGetNextInRegion");
    }
    public static MemorySegment mlirBlockGetNextInRegion ( SegmentAllocator allocator,  MemorySegment block) {
        var mh$ = mlirBlockGetNextInRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetFirstOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mlirBlockGetFirstOperation$MH,"mlirBlockGetFirstOperation");
    }
    public static MemorySegment mlirBlockGetFirstOperation ( SegmentAllocator allocator,  MemorySegment block) {
        var mh$ = mlirBlockGetFirstOperation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetTerminator$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mlirBlockGetTerminator$MH,"mlirBlockGetTerminator");
    }
    public static MemorySegment mlirBlockGetTerminator ( SegmentAllocator allocator,  MemorySegment block) {
        var mh$ = mlirBlockGetTerminator$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockAppendOwnedOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mlirBlockAppendOwnedOperation$MH,"mlirBlockAppendOwnedOperation");
    }
    public static void mlirBlockAppendOwnedOperation ( MemorySegment block,  MemorySegment operation) {
        var mh$ = mlirBlockAppendOwnedOperation$MH();
        try {
            mh$.invokeExact(block, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockInsertOwnedOperation$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mlirBlockInsertOwnedOperation$MH,"mlirBlockInsertOwnedOperation");
    }
    public static void mlirBlockInsertOwnedOperation ( MemorySegment block,  long pos,  MemorySegment operation) {
        var mh$ = mlirBlockInsertOwnedOperation$MH();
        try {
            mh$.invokeExact(block, pos, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockInsertOwnedOperationAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mlirBlockInsertOwnedOperationAfter$MH,"mlirBlockInsertOwnedOperationAfter");
    }
    public static void mlirBlockInsertOwnedOperationAfter ( MemorySegment block,  MemorySegment reference,  MemorySegment operation) {
        var mh$ = mlirBlockInsertOwnedOperationAfter$MH();
        try {
            mh$.invokeExact(block, reference, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockInsertOwnedOperationBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mlirBlockInsertOwnedOperationBefore$MH,"mlirBlockInsertOwnedOperationBefore");
    }
    public static void mlirBlockInsertOwnedOperationBefore ( MemorySegment block,  MemorySegment reference,  MemorySegment operation) {
        var mh$ = mlirBlockInsertOwnedOperationBefore$MH();
        try {
            mh$.invokeExact(block, reference, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetNumArguments$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mlirBlockGetNumArguments$MH,"mlirBlockGetNumArguments");
    }
    public static long mlirBlockGetNumArguments ( MemorySegment block) {
        var mh$ = mlirBlockGetNumArguments$MH();
        try {
            return (long)mh$.invokeExact(block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockAddArgument$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mlirBlockAddArgument$MH,"mlirBlockAddArgument");
    }
    public static MemorySegment mlirBlockAddArgument ( SegmentAllocator allocator,  MemorySegment block,  MemorySegment type,  MemorySegment loc) {
        var mh$ = mlirBlockAddArgument$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, block, type, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockGetArgument$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mlirBlockGetArgument$MH,"mlirBlockGetArgument");
    }
    public static MemorySegment mlirBlockGetArgument ( SegmentAllocator allocator,  MemorySegment block,  long pos) {
        var mh$ = mlirBlockGetArgument$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, block, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mlirBlockPrint$MH,"mlirBlockPrint");
    }
    public static void mlirBlockPrint ( MemorySegment block,  Addressable callback,  Addressable userData) {
        var mh$ = mlirBlockPrint$MH();
        try {
            mh$.invokeExact(block, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mlirValueIsNull$MH,"mlirValueIsNull");
    }
    public static boolean mlirValueIsNull ( MemorySegment value) {
        var mh$ = mlirValueIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mlirValueEqual$MH,"mlirValueEqual");
    }
    public static boolean mlirValueEqual ( MemorySegment value1,  MemorySegment value2) {
        var mh$ = mlirValueEqual$MH();
        try {
            return (boolean)mh$.invokeExact(value1, value2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueIsABlockArgument$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mlirValueIsABlockArgument$MH,"mlirValueIsABlockArgument");
    }
    public static boolean mlirValueIsABlockArgument ( MemorySegment value) {
        var mh$ = mlirValueIsABlockArgument$MH();
        try {
            return (boolean)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueIsAOpResult$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mlirValueIsAOpResult$MH,"mlirValueIsAOpResult");
    }
    public static boolean mlirValueIsAOpResult ( MemorySegment value) {
        var mh$ = mlirValueIsAOpResult$MH();
        try {
            return (boolean)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockArgumentGetOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mlirBlockArgumentGetOwner$MH,"mlirBlockArgumentGetOwner");
    }
    public static MemorySegment mlirBlockArgumentGetOwner ( SegmentAllocator allocator,  MemorySegment value) {
        var mh$ = mlirBlockArgumentGetOwner$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockArgumentGetArgNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mlirBlockArgumentGetArgNumber$MH,"mlirBlockArgumentGetArgNumber");
    }
    public static long mlirBlockArgumentGetArgNumber ( MemorySegment value) {
        var mh$ = mlirBlockArgumentGetArgNumber$MH();
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBlockArgumentSetType$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mlirBlockArgumentSetType$MH,"mlirBlockArgumentSetType");
    }
    public static void mlirBlockArgumentSetType ( MemorySegment value,  MemorySegment type) {
        var mh$ = mlirBlockArgumentSetType$MH();
        try {
            mh$.invokeExact(value, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpResultGetOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mlirOpResultGetOwner$MH,"mlirOpResultGetOwner");
    }
    public static MemorySegment mlirOpResultGetOwner ( SegmentAllocator allocator,  MemorySegment value) {
        var mh$ = mlirOpResultGetOwner$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpResultGetResultNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mlirOpResultGetResultNumber$MH,"mlirOpResultGetResultNumber");
    }
    public static long mlirOpResultGetResultNumber ( MemorySegment value) {
        var mh$ = mlirOpResultGetResultNumber$MH();
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mlirValueGetType$MH,"mlirValueGetType");
    }
    public static MemorySegment mlirValueGetType ( SegmentAllocator allocator,  MemorySegment value) {
        var mh$ = mlirValueGetType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueDump$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mlirValueDump$MH,"mlirValueDump");
    }
    public static void mlirValueDump ( MemorySegment value) {
        var mh$ = mlirValueDump$MH();
        try {
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValuePrint$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mlirValuePrint$MH,"mlirValuePrint");
    }
    public static void mlirValuePrint ( MemorySegment value,  Addressable callback,  Addressable userData) {
        var mh$ = mlirValuePrint$MH();
        try {
            mh$.invokeExact(value, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirValueGetFirstUse$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mlirValueGetFirstUse$MH,"mlirValueGetFirstUse");
    }
    public static MemorySegment mlirValueGetFirstUse ( SegmentAllocator allocator,  MemorySegment value) {
        var mh$ = mlirValueGetFirstUse$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpOperandIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$24.mlirOpOperandIsNull$MH,"mlirOpOperandIsNull");
    }
    public static boolean mlirOpOperandIsNull ( MemorySegment opOperand) {
        var mh$ = mlirOpOperandIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(opOperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpOperandGetOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$25.mlirOpOperandGetOwner$MH,"mlirOpOperandGetOwner");
    }
    public static MemorySegment mlirOpOperandGetOwner ( SegmentAllocator allocator,  MemorySegment opOperand) {
        var mh$ = mlirOpOperandGetOwner$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, opOperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpOperandGetOperandNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$25.mlirOpOperandGetOperandNumber$MH,"mlirOpOperandGetOperandNumber");
    }
    public static int mlirOpOperandGetOperandNumber ( MemorySegment opOperand) {
        var mh$ = mlirOpOperandGetOperandNumber$MH();
        try {
            return (int)mh$.invokeExact(opOperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpOperandGetNextUse$MH() {
        return RuntimeHelper.requireNonNull(constants$25.mlirOpOperandGetNextUse$MH,"mlirOpOperandGetNextUse");
    }
    public static MemorySegment mlirOpOperandGetNextUse ( SegmentAllocator allocator,  MemorySegment opOperand) {
        var mh$ = mlirOpOperandGetNextUse$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, opOperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeParseGet$MH() {
        return RuntimeHelper.requireNonNull(constants$25.mlirTypeParseGet$MH,"mlirTypeParseGet");
    }
    public static MemorySegment mlirTypeParseGet ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment type) {
        var mh$ = mlirTypeParseGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$25.mlirTypeGetContext$MH,"mlirTypeGetContext");
    }
    public static MemorySegment mlirTypeGetContext ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirTypeGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeGetTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$25.mlirTypeGetTypeID$MH,"mlirTypeGetTypeID");
    }
    public static MemorySegment mlirTypeGetTypeID ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirTypeGetTypeID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$26.mlirTypeIsNull$MH,"mlirTypeIsNull");
    }
    public static boolean mlirTypeIsNull ( MemorySegment type) {
        var mh$ = mlirTypeIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$26.mlirTypeEqual$MH,"mlirTypeEqual");
    }
    public static boolean mlirTypeEqual ( MemorySegment t1,  MemorySegment t2) {
        var mh$ = mlirTypeEqual$MH();
        try {
            return (boolean)mh$.invokeExact(t1, t2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypePrint$MH() {
        return RuntimeHelper.requireNonNull(constants$26.mlirTypePrint$MH,"mlirTypePrint");
    }
    public static void mlirTypePrint ( MemorySegment type,  Addressable callback,  Addressable userData) {
        var mh$ = mlirTypePrint$MH();
        try {
            mh$.invokeExact(type, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeDump$MH() {
        return RuntimeHelper.requireNonNull(constants$26.mlirTypeDump$MH,"mlirTypeDump");
    }
    public static void mlirTypeDump ( MemorySegment type) {
        var mh$ = mlirTypeDump$MH();
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeParseGet$MH() {
        return RuntimeHelper.requireNonNull(constants$26.mlirAttributeParseGet$MH,"mlirAttributeParseGet");
    }
    public static MemorySegment mlirAttributeParseGet ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment attr) {
        var mh$ = mlirAttributeParseGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$26.mlirAttributeGetContext$MH,"mlirAttributeGetContext");
    }
    public static MemorySegment mlirAttributeGetContext ( SegmentAllocator allocator,  MemorySegment attribute) {
        var mh$ = mlirAttributeGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$27.mlirAttributeGetType$MH,"mlirAttributeGetType");
    }
    public static MemorySegment mlirAttributeGetType ( SegmentAllocator allocator,  MemorySegment attribute) {
        var mh$ = mlirAttributeGetType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeGetTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$27.mlirAttributeGetTypeID$MH,"mlirAttributeGetTypeID");
    }
    public static MemorySegment mlirAttributeGetTypeID ( SegmentAllocator allocator,  MemorySegment attribute) {
        var mh$ = mlirAttributeGetTypeID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$27.mlirAttributeIsNull$MH,"mlirAttributeIsNull");
    }
    public static boolean mlirAttributeIsNull ( MemorySegment attr) {
        var mh$ = mlirAttributeIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$27.mlirAttributeEqual$MH,"mlirAttributeEqual");
    }
    public static boolean mlirAttributeEqual ( MemorySegment a1,  MemorySegment a2) {
        var mh$ = mlirAttributeEqual$MH();
        try {
            return (boolean)mh$.invokeExact(a1, a2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributePrint$MH() {
        return RuntimeHelper.requireNonNull(constants$27.mlirAttributePrint$MH,"mlirAttributePrint");
    }
    public static void mlirAttributePrint ( MemorySegment attr,  Addressable callback,  Addressable userData) {
        var mh$ = mlirAttributePrint$MH();
        try {
            mh$.invokeExact(attr, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAttributeDump$MH() {
        return RuntimeHelper.requireNonNull(constants$27.mlirAttributeDump$MH,"mlirAttributeDump");
    }
    public static void mlirAttributeDump ( MemorySegment attr) {
        var mh$ = mlirAttributeDump$MH();
        try {
            mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirNamedAttributeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mlirNamedAttributeGet$MH,"mlirNamedAttributeGet");
    }
    public static MemorySegment mlirNamedAttributeGet ( SegmentAllocator allocator,  MemorySegment name,  MemorySegment attr) {
        var mh$ = mlirNamedAttributeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, name, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIdentifierGet$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mlirIdentifierGet$MH,"mlirIdentifierGet");
    }
    public static MemorySegment mlirIdentifierGet ( SegmentAllocator allocator,  MemorySegment context,  MemorySegment str) {
        var mh$ = mlirIdentifierGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIdentifierGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mlirIdentifierGetContext$MH,"mlirIdentifierGetContext");
    }
    public static MemorySegment mlirIdentifierGetContext ( SegmentAllocator allocator,  MemorySegment x1) {
        var mh$ = mlirIdentifierGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIdentifierEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mlirIdentifierEqual$MH,"mlirIdentifierEqual");
    }
    public static boolean mlirIdentifierEqual ( MemorySegment ident,  MemorySegment other) {
        var mh$ = mlirIdentifierEqual$MH();
        try {
            return (boolean)mh$.invokeExact(ident, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIdentifierStr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mlirIdentifierStr$MH,"mlirIdentifierStr");
    }
    public static MemorySegment mlirIdentifierStr ( SegmentAllocator allocator,  MemorySegment ident) {
        var mh$ = mlirIdentifierStr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ident);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableGetSymbolAttributeName$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mlirSymbolTableGetSymbolAttributeName$MH,"mlirSymbolTableGetSymbolAttributeName");
    }
    public static MemorySegment mlirSymbolTableGetSymbolAttributeName ( SegmentAllocator allocator) {
        var mh$ = mlirSymbolTableGetSymbolAttributeName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableGetVisibilityAttributeName$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mlirSymbolTableGetVisibilityAttributeName$MH,"mlirSymbolTableGetVisibilityAttributeName");
    }
    public static MemorySegment mlirSymbolTableGetVisibilityAttributeName ( SegmentAllocator allocator) {
        var mh$ = mlirSymbolTableGetVisibilityAttributeName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mlirSymbolTableCreate$MH,"mlirSymbolTableCreate");
    }
    public static MemorySegment mlirSymbolTableCreate ( SegmentAllocator allocator,  MemorySegment operation) {
        var mh$ = mlirSymbolTableCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mlirSymbolTableIsNull$MH,"mlirSymbolTableIsNull");
    }
    public static boolean mlirSymbolTableIsNull ( MemorySegment symbolTable) {
        var mh$ = mlirSymbolTableIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(symbolTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mlirSymbolTableDestroy$MH,"mlirSymbolTableDestroy");
    }
    public static void mlirSymbolTableDestroy ( MemorySegment symbolTable) {
        var mh$ = mlirSymbolTableDestroy$MH();
        try {
            mh$.invokeExact(symbolTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableLookup$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mlirSymbolTableLookup$MH,"mlirSymbolTableLookup");
    }
    public static MemorySegment mlirSymbolTableLookup ( SegmentAllocator allocator,  MemorySegment symbolTable,  MemorySegment name) {
        var mh$ = mlirSymbolTableLookup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, symbolTable, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableInsert$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mlirSymbolTableInsert$MH,"mlirSymbolTableInsert");
    }
    public static MemorySegment mlirSymbolTableInsert ( SegmentAllocator allocator,  MemorySegment symbolTable,  MemorySegment operation) {
        var mh$ = mlirSymbolTableInsert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, symbolTable, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableErase$MH() {
        return RuntimeHelper.requireNonNull(constants$30.mlirSymbolTableErase$MH,"mlirSymbolTableErase");
    }
    public static void mlirSymbolTableErase ( MemorySegment symbolTable,  MemorySegment operation) {
        var mh$ = mlirSymbolTableErase$MH();
        try {
            mh$.invokeExact(symbolTable, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableReplaceAllSymbolUses$MH() {
        return RuntimeHelper.requireNonNull(constants$30.mlirSymbolTableReplaceAllSymbolUses$MH,"mlirSymbolTableReplaceAllSymbolUses");
    }
    public static MemorySegment mlirSymbolTableReplaceAllSymbolUses ( SegmentAllocator allocator,  MemorySegment oldSymbol,  MemorySegment newSymbol,  MemorySegment from) {
        var mh$ = mlirSymbolTableReplaceAllSymbolUses$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, oldSymbol, newSymbol, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirSymbolTableWalkSymbolTables$MH() {
        return RuntimeHelper.requireNonNull(constants$30.mlirSymbolTableWalkSymbolTables$MH,"mlirSymbolTableWalkSymbolTables");
    }
    public static void mlirSymbolTableWalkSymbolTables ( MemorySegment from,  boolean allSymUsesVisible,  Addressable callback,  Addressable userData) {
        var mh$ = mlirSymbolTableWalkSymbolTables$MH();
        try {
            mh$.invokeExact(from, allSymUsesVisible, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationImplementsInterface$MH() {
        return RuntimeHelper.requireNonNull(constants$30.mlirOperationImplementsInterface$MH,"mlirOperationImplementsInterface");
    }
    public static boolean mlirOperationImplementsInterface ( MemorySegment operation,  MemorySegment interfaceTypeID) {
        var mh$ = mlirOperationImplementsInterface$MH();
        try {
            return (boolean)mh$.invokeExact(operation, interfaceTypeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOperationImplementsInterfaceStatic$MH() {
        return RuntimeHelper.requireNonNull(constants$31.mlirOperationImplementsInterfaceStatic$MH,"mlirOperationImplementsInterfaceStatic");
    }
    public static boolean mlirOperationImplementsInterfaceStatic ( MemorySegment operationName,  MemorySegment context,  MemorySegment interfaceTypeID) {
        var mh$ = mlirOperationImplementsInterfaceStatic$MH();
        try {
            return (boolean)mh$.invokeExact(operationName, context, interfaceTypeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirInferTypeOpInterfaceTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$31.mlirInferTypeOpInterfaceTypeID$MH,"mlirInferTypeOpInterfaceTypeID");
    }
    public static MemorySegment mlirInferTypeOpInterfaceTypeID ( SegmentAllocator allocator, Object... x1) {
        var mh$ = mlirInferTypeOpInterfaceTypeID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirInferTypeOpInterfaceInferReturnTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$31.mlirInferTypeOpInterfaceInferReturnTypes$MH,"mlirInferTypeOpInterfaceInferReturnTypes");
    }
    public static MemorySegment mlirInferTypeOpInterfaceInferReturnTypes ( SegmentAllocator allocator,  MemorySegment opName,  MemorySegment context,  MemorySegment location,  long nOperands,  Addressable operands,  MemorySegment attributes,  long nRegions,  Addressable regions,  Addressable callback,  Addressable userData) {
        var mh$ = mlirInferTypeOpInterfaceInferReturnTypes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, opName, context, location, nOperands, operands, attributes, nRegions, regions, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAllDialects$MH() {
        return RuntimeHelper.requireNonNull(constants$31.mlirRegisterAllDialects$MH,"mlirRegisterAllDialects");
    }
    public static void mlirRegisterAllDialects ( MemorySegment registry) {
        var mh$ = mlirRegisterAllDialects$MH();
        try {
            mh$.invokeExact(registry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAllLLVMTranslations$MH() {
        return RuntimeHelper.requireNonNull(constants$32.mlirRegisterAllLLVMTranslations$MH,"mlirRegisterAllLLVMTranslations");
    }
    public static void mlirRegisterAllLLVMTranslations ( MemorySegment context) {
        var mh$ = mlirRegisterAllLLVMTranslations$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRegisterAllPasses$MH() {
        return RuntimeHelper.requireNonNull(constants$32.mlirRegisterAllPasses$MH,"mlirRegisterAllPasses");
    }
    public static void mlirRegisterAllPasses () {
        var mh$ = mlirRegisterAllPasses$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$32.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long j) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$32.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$32.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt16$MH() {
        return RuntimeHelper.requireNonNull(constants$33._OSSwapInt16$MH,"_OSSwapInt16");
    }
    public static short _OSSwapInt16 ( short _data) {
        var mh$ = _OSSwapInt16$MH();
        try {
            return (short)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt32$MH() {
        return RuntimeHelper.requireNonNull(constants$33._OSSwapInt32$MH,"_OSSwapInt32");
    }
    public static int _OSSwapInt32 ( int _data) {
        var mh$ = _OSSwapInt32$MH();
        try {
            return (int)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt64$MH() {
        return RuntimeHelper.requireNonNull(constants$33._OSSwapInt64$MH,"_OSSwapInt64");
    }
    public static long _OSSwapInt64 ( long _data) {
        var mh$ = _OSSwapInt64$MH();
        try {
            return (long)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress qaddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt segsz_t = Constants$root.C_INT$LAYOUT;
    public static OfInt swblk_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfInt errno_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __darwin_check_fd_set_overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__darwin_check_fd_set_overflow$MH,"__darwin_check_fd_set_overflow");
    }
    public static int __darwin_check_fd_set_overflow ( int x0,  Addressable x1,  int x2) {
        var mh$ = __darwin_check_fd_set_overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_check_fd_set$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__darwin_check_fd_set$MH,"__darwin_check_fd_set");
    }
    public static int __darwin_check_fd_set ( int _a,  Addressable _b) {
        var mh$ = __darwin_check_fd_set$MH();
        try {
            return (int)mh$.invokeExact(_a, _b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_isset$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__darwin_fd_isset$MH,"__darwin_fd_isset");
    }
    public static int __darwin_fd_isset ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_isset$MH();
        try {
            return (int)mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_set$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__darwin_fd_set$MH,"__darwin_fd_set");
    }
    public static void __darwin_fd_set ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_set$MH();
        try {
            mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_clr$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__darwin_fd_clr$MH,"__darwin_fd_clr");
    }
    public static void __darwin_fd_clr ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_clr$MH();
        try {
            mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt fd_mask = Constants$root.C_INT$LAYOUT;
    public static OfAddress pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt LLVMBool = Constants$root.C_INT$LAYOUT;
    public static OfAddress LLVMMemoryBufferRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMContextRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMModuleRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMTypeRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMValueRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMBasicBlockRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMMetadataRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMNamedMDNodeRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMBuilderRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMDIBuilderRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMModuleProviderRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMPassManagerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMPassRegistryRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMUseRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMAttributeRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMDiagnosticInfoRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMComdatRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMJITEventListenerRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMBinaryRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMSectionIteratorRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMSymbolIteratorRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMRelocationIteratorRef = Constants$root.C_POINTER$LAYOUT;
    public static int LLVMBinaryTypeArchive() {
        return (int)0L;
    }
    public static int LLVMBinaryTypeMachOUniversalBinary() {
        return (int)1L;
    }
    public static int LLVMBinaryTypeCOFFImportFile() {
        return (int)2L;
    }
    public static int LLVMBinaryTypeIR() {
        return (int)3L;
    }
    public static int LLVMBinaryTypeWinRes() {
        return (int)4L;
    }
    public static int LLVMBinaryTypeCOFF() {
        return (int)5L;
    }
    public static int LLVMBinaryTypeELF32L() {
        return (int)6L;
    }
    public static int LLVMBinaryTypeELF32B() {
        return (int)7L;
    }
    public static int LLVMBinaryTypeELF64L() {
        return (int)8L;
    }
    public static int LLVMBinaryTypeELF64B() {
        return (int)9L;
    }
    public static int LLVMBinaryTypeMachO32L() {
        return (int)10L;
    }
    public static int LLVMBinaryTypeMachO32B() {
        return (int)11L;
    }
    public static int LLVMBinaryTypeMachO64L() {
        return (int)12L;
    }
    public static int LLVMBinaryTypeMachO64B() {
        return (int)13L;
    }
    public static int LLVMBinaryTypeWasm() {
        return (int)14L;
    }
    public static int LLVMBinaryTypeOffload() {
        return (int)15L;
    }
    public static MethodHandle LLVMCreateBinary$MH() {
        return RuntimeHelper.requireNonNull(constants$34.LLVMCreateBinary$MH,"LLVMCreateBinary");
    }
    public static MemoryAddress LLVMCreateBinary ( Addressable MemBuf,  Addressable Context,  Addressable ErrorMessage) {
        var mh$ = LLVMCreateBinary$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MemBuf, Context, ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeBinary$MH() {
        return RuntimeHelper.requireNonNull(constants$34.LLVMDisposeBinary$MH,"LLVMDisposeBinary");
    }
    public static void LLVMDisposeBinary ( Addressable BR) {
        var mh$ = LLVMDisposeBinary$MH();
        try {
            mh$.invokeExact(BR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBinaryCopyMemoryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$35.LLVMBinaryCopyMemoryBuffer$MH,"LLVMBinaryCopyMemoryBuffer");
    }
    public static MemoryAddress LLVMBinaryCopyMemoryBuffer ( Addressable BR) {
        var mh$ = LLVMBinaryCopyMemoryBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMBinaryGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$35.LLVMBinaryGetType$MH,"LLVMBinaryGetType");
    }
    public static int LLVMBinaryGetType ( Addressable BR) {
        var mh$ = LLVMBinaryGetType$MH();
        try {
            return (int)mh$.invokeExact(BR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMachOUniversalBinaryCopyObjectForArch$MH() {
        return RuntimeHelper.requireNonNull(constants$35.LLVMMachOUniversalBinaryCopyObjectForArch$MH,"LLVMMachOUniversalBinaryCopyObjectForArch");
    }
    public static MemoryAddress LLVMMachOUniversalBinaryCopyObjectForArch ( Addressable BR,  Addressable Arch,  long ArchLen,  Addressable ErrorMessage) {
        var mh$ = LLVMMachOUniversalBinaryCopyObjectForArch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BR, Arch, ArchLen, ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMObjectFileCopySectionIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$35.LLVMObjectFileCopySectionIterator$MH,"LLVMObjectFileCopySectionIterator");
    }
    public static MemoryAddress LLVMObjectFileCopySectionIterator ( Addressable BR) {
        var mh$ = LLVMObjectFileCopySectionIterator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMObjectFileIsSectionIteratorAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$35.LLVMObjectFileIsSectionIteratorAtEnd$MH,"LLVMObjectFileIsSectionIteratorAtEnd");
    }
    public static int LLVMObjectFileIsSectionIteratorAtEnd ( Addressable BR,  Addressable SI) {
        var mh$ = LLVMObjectFileIsSectionIteratorAtEnd$MH();
        try {
            return (int)mh$.invokeExact(BR, SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMObjectFileCopySymbolIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$35.LLVMObjectFileCopySymbolIterator$MH,"LLVMObjectFileCopySymbolIterator");
    }
    public static MemoryAddress LLVMObjectFileCopySymbolIterator ( Addressable BR) {
        var mh$ = LLVMObjectFileCopySymbolIterator$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMObjectFileIsSymbolIteratorAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$36.LLVMObjectFileIsSymbolIteratorAtEnd$MH,"LLVMObjectFileIsSymbolIteratorAtEnd");
    }
    public static int LLVMObjectFileIsSymbolIteratorAtEnd ( Addressable BR,  Addressable SI) {
        var mh$ = LLVMObjectFileIsSymbolIteratorAtEnd$MH();
        try {
            return (int)mh$.invokeExact(BR, SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeSectionIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$36.LLVMDisposeSectionIterator$MH,"LLVMDisposeSectionIterator");
    }
    public static void LLVMDisposeSectionIterator ( Addressable SI) {
        var mh$ = LLVMDisposeSectionIterator$MH();
        try {
            mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMoveToNextSection$MH() {
        return RuntimeHelper.requireNonNull(constants$36.LLVMMoveToNextSection$MH,"LLVMMoveToNextSection");
    }
    public static void LLVMMoveToNextSection ( Addressable SI) {
        var mh$ = LLVMMoveToNextSection$MH();
        try {
            mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMoveToContainingSection$MH() {
        return RuntimeHelper.requireNonNull(constants$36.LLVMMoveToContainingSection$MH,"LLVMMoveToContainingSection");
    }
    public static void LLVMMoveToContainingSection ( Addressable Sect,  Addressable Sym) {
        var mh$ = LLVMMoveToContainingSection$MH();
        try {
            mh$.invokeExact(Sect, Sym);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeSymbolIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$36.LLVMDisposeSymbolIterator$MH,"LLVMDisposeSymbolIterator");
    }
    public static void LLVMDisposeSymbolIterator ( Addressable SI) {
        var mh$ = LLVMDisposeSymbolIterator$MH();
        try {
            mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMoveToNextSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$36.LLVMMoveToNextSymbol$MH,"LLVMMoveToNextSymbol");
    }
    public static void LLVMMoveToNextSymbol ( Addressable SI) {
        var mh$ = LLVMMoveToNextSymbol$MH();
        try {
            mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSectionName$MH() {
        return RuntimeHelper.requireNonNull(constants$37.LLVMGetSectionName$MH,"LLVMGetSectionName");
    }
    public static MemoryAddress LLVMGetSectionName ( Addressable SI) {
        var mh$ = LLVMGetSectionName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSectionSize$MH() {
        return RuntimeHelper.requireNonNull(constants$37.LLVMGetSectionSize$MH,"LLVMGetSectionSize");
    }
    public static long LLVMGetSectionSize ( Addressable SI) {
        var mh$ = LLVMGetSectionSize$MH();
        try {
            return (long)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSectionContents$MH() {
        return RuntimeHelper.requireNonNull(constants$37.LLVMGetSectionContents$MH,"LLVMGetSectionContents");
    }
    public static MemoryAddress LLVMGetSectionContents ( Addressable SI) {
        var mh$ = LLVMGetSectionContents$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSectionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$37.LLVMGetSectionAddress$MH,"LLVMGetSectionAddress");
    }
    public static long LLVMGetSectionAddress ( Addressable SI) {
        var mh$ = LLVMGetSectionAddress$MH();
        try {
            return (long)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSectionContainsSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$37.LLVMGetSectionContainsSymbol$MH,"LLVMGetSectionContainsSymbol");
    }
    public static int LLVMGetSectionContainsSymbol ( Addressable SI,  Addressable Sym) {
        var mh$ = LLVMGetSectionContainsSymbol$MH();
        try {
            return (int)mh$.invokeExact(SI, Sym);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetRelocations$MH() {
        return RuntimeHelper.requireNonNull(constants$37.LLVMGetRelocations$MH,"LLVMGetRelocations");
    }
    public static MemoryAddress LLVMGetRelocations ( Addressable Section) {
        var mh$ = LLVMGetRelocations$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeRelocationIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$38.LLVMDisposeRelocationIterator$MH,"LLVMDisposeRelocationIterator");
    }
    public static void LLVMDisposeRelocationIterator ( Addressable RI) {
        var mh$ = LLVMDisposeRelocationIterator$MH();
        try {
            mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsRelocationIteratorAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$38.LLVMIsRelocationIteratorAtEnd$MH,"LLVMIsRelocationIteratorAtEnd");
    }
    public static int LLVMIsRelocationIteratorAtEnd ( Addressable Section,  Addressable RI) {
        var mh$ = LLVMIsRelocationIteratorAtEnd$MH();
        try {
            return (int)mh$.invokeExact(Section, RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMMoveToNextRelocation$MH() {
        return RuntimeHelper.requireNonNull(constants$38.LLVMMoveToNextRelocation$MH,"LLVMMoveToNextRelocation");
    }
    public static void LLVMMoveToNextRelocation ( Addressable RI) {
        var mh$ = LLVMMoveToNextRelocation$MH();
        try {
            mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSymbolName$MH() {
        return RuntimeHelper.requireNonNull(constants$38.LLVMGetSymbolName$MH,"LLVMGetSymbolName");
    }
    public static MemoryAddress LLVMGetSymbolName ( Addressable SI) {
        var mh$ = LLVMGetSymbolName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSymbolAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$38.LLVMGetSymbolAddress$MH,"LLVMGetSymbolAddress");
    }
    public static long LLVMGetSymbolAddress ( Addressable SI) {
        var mh$ = LLVMGetSymbolAddress$MH();
        try {
            return (long)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSymbolSize$MH() {
        return RuntimeHelper.requireNonNull(constants$38.LLVMGetSymbolSize$MH,"LLVMGetSymbolSize");
    }
    public static long LLVMGetSymbolSize ( Addressable SI) {
        var mh$ = LLVMGetSymbolSize$MH();
        try {
            return (long)mh$.invokeExact(SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetRelocationOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$39.LLVMGetRelocationOffset$MH,"LLVMGetRelocationOffset");
    }
    public static long LLVMGetRelocationOffset ( Addressable RI) {
        var mh$ = LLVMGetRelocationOffset$MH();
        try {
            return (long)mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetRelocationSymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$39.LLVMGetRelocationSymbol$MH,"LLVMGetRelocationSymbol");
    }
    public static MemoryAddress LLVMGetRelocationSymbol ( Addressable RI) {
        var mh$ = LLVMGetRelocationSymbol$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetRelocationType$MH() {
        return RuntimeHelper.requireNonNull(constants$39.LLVMGetRelocationType$MH,"LLVMGetRelocationType");
    }
    public static long LLVMGetRelocationType ( Addressable RI) {
        var mh$ = LLVMGetRelocationType$MH();
        try {
            return (long)mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetRelocationTypeName$MH() {
        return RuntimeHelper.requireNonNull(constants$39.LLVMGetRelocationTypeName$MH,"LLVMGetRelocationTypeName");
    }
    public static MemoryAddress LLVMGetRelocationTypeName ( Addressable RI) {
        var mh$ = LLVMGetRelocationTypeName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetRelocationValueString$MH() {
        return RuntimeHelper.requireNonNull(constants$39.LLVMGetRelocationValueString$MH,"LLVMGetRelocationValueString");
    }
    public static MemoryAddress LLVMGetRelocationValueString ( Addressable RI) {
        var mh$ = LLVMGetRelocationValueString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(RI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMObjectFileRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMCreateObjectFile$MH() {
        return RuntimeHelper.requireNonNull(constants$39.LLVMCreateObjectFile$MH,"LLVMCreateObjectFile");
    }
    public static MemoryAddress LLVMCreateObjectFile ( Addressable MemBuf) {
        var mh$ = LLVMCreateObjectFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(MemBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeObjectFile$MH() {
        return RuntimeHelper.requireNonNull(constants$40.LLVMDisposeObjectFile$MH,"LLVMDisposeObjectFile");
    }
    public static void LLVMDisposeObjectFile ( Addressable ObjectFile) {
        var mh$ = LLVMDisposeObjectFile$MH();
        try {
            mh$.invokeExact(ObjectFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSections$MH() {
        return RuntimeHelper.requireNonNull(constants$40.LLVMGetSections$MH,"LLVMGetSections");
    }
    public static MemoryAddress LLVMGetSections ( Addressable ObjectFile) {
        var mh$ = LLVMGetSections$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ObjectFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsSectionIteratorAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$40.LLVMIsSectionIteratorAtEnd$MH,"LLVMIsSectionIteratorAtEnd");
    }
    public static int LLVMIsSectionIteratorAtEnd ( Addressable ObjectFile,  Addressable SI) {
        var mh$ = LLVMIsSectionIteratorAtEnd$MH();
        try {
            return (int)mh$.invokeExact(ObjectFile, SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$40.LLVMGetSymbols$MH,"LLVMGetSymbols");
    }
    public static MemoryAddress LLVMGetSymbols ( Addressable ObjectFile) {
        var mh$ = LLVMGetSymbols$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ObjectFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIsSymbolIteratorAtEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$40.LLVMIsSymbolIteratorAtEnd$MH,"LLVMIsSymbolIteratorAtEnd");
    }
    public static int LLVMIsSymbolIteratorAtEnd ( Addressable ObjectFile,  Addressable SI) {
        var mh$ = LLVMIsSymbolIteratorAtEnd$MH();
        try {
            return (int)mh$.invokeExact(ObjectFile, SI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$40.mlirAffineExprGetContext$MH,"mlirAffineExprGetContext");
    }
    public static MemorySegment mlirAffineExprGetContext ( SegmentAllocator allocator,  MemorySegment affineExpr) {
        var mh$ = mlirAffineExprGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mlirAffineExprEqual$MH,"mlirAffineExprEqual");
    }
    public static boolean mlirAffineExprEqual ( MemorySegment lhs,  MemorySegment rhs) {
        var mh$ = mlirAffineExprEqual$MH();
        try {
            return (boolean)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mlirAffineExprIsNull$MH,"mlirAffineExprIsNull");
    }
    public static boolean mlirAffineExprIsNull ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mlirAffineExprPrint$MH,"mlirAffineExprPrint");
    }
    public static void mlirAffineExprPrint ( MemorySegment affineExpr,  Addressable callback,  Addressable userData) {
        var mh$ = mlirAffineExprPrint$MH();
        try {
            mh$.invokeExact(affineExpr, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprDump$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mlirAffineExprDump$MH,"mlirAffineExprDump");
    }
    public static void mlirAffineExprDump ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprDump$MH();
        try {
            mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsSymbolicOrConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mlirAffineExprIsSymbolicOrConstant$MH,"mlirAffineExprIsSymbolicOrConstant");
    }
    public static boolean mlirAffineExprIsSymbolicOrConstant ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsSymbolicOrConstant$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsPureAffine$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mlirAffineExprIsPureAffine$MH,"mlirAffineExprIsPureAffine");
    }
    public static boolean mlirAffineExprIsPureAffine ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsPureAffine$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprGetLargestKnownDivisor$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mlirAffineExprGetLargestKnownDivisor$MH,"mlirAffineExprGetLargestKnownDivisor");
    }
    public static long mlirAffineExprGetLargestKnownDivisor ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprGetLargestKnownDivisor$MH();
        try {
            return (long)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsMultipleOf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mlirAffineExprIsMultipleOf$MH,"mlirAffineExprIsMultipleOf");
    }
    public static boolean mlirAffineExprIsMultipleOf ( MemorySegment affineExpr,  long factor) {
        var mh$ = mlirAffineExprIsMultipleOf$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsFunctionOfDim$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mlirAffineExprIsFunctionOfDim$MH,"mlirAffineExprIsFunctionOfDim");
    }
    public static boolean mlirAffineExprIsFunctionOfDim ( MemorySegment affineExpr,  long position) {
        var mh$ = mlirAffineExprIsFunctionOfDim$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprCompose$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mlirAffineExprCompose$MH,"mlirAffineExprCompose");
    }
    public static MemorySegment mlirAffineExprCompose ( SegmentAllocator allocator,  MemorySegment affineExpr,  MemorySegment affineMap) {
        var mh$ = mlirAffineExprCompose$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineExpr, affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsADim$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mlirAffineExprIsADim$MH,"mlirAffineExprIsADim");
    }
    public static boolean mlirAffineExprIsADim ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsADim$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineDimExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mlirAffineDimExprGet$MH,"mlirAffineDimExprGet");
    }
    public static MemorySegment mlirAffineDimExprGet ( SegmentAllocator allocator,  MemorySegment ctx,  long position) {
        var mh$ = mlirAffineDimExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineDimExprGetPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mlirAffineDimExprGetPosition$MH,"mlirAffineDimExprGetPosition");
    }
    public static long mlirAffineDimExprGetPosition ( MemorySegment affineExpr) {
        var mh$ = mlirAffineDimExprGetPosition$MH();
        try {
            return (long)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsASymbol$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mlirAffineExprIsASymbol$MH,"mlirAffineExprIsASymbol");
    }
    public static boolean mlirAffineExprIsASymbol ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsASymbol$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineSymbolExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mlirAffineSymbolExprGet$MH,"mlirAffineSymbolExprGet");
    }
    public static MemorySegment mlirAffineSymbolExprGet ( SegmentAllocator allocator,  MemorySegment ctx,  long position) {
        var mh$ = mlirAffineSymbolExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineSymbolExprGetPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mlirAffineSymbolExprGetPosition$MH,"mlirAffineSymbolExprGetPosition");
    }
    public static long mlirAffineSymbolExprGetPosition ( MemorySegment affineExpr) {
        var mh$ = mlirAffineSymbolExprGetPosition$MH();
        try {
            return (long)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsAConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mlirAffineExprIsAConstant$MH,"mlirAffineExprIsAConstant");
    }
    public static boolean mlirAffineExprIsAConstant ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsAConstant$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineConstantExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mlirAffineConstantExprGet$MH,"mlirAffineConstantExprGet");
    }
    public static MemorySegment mlirAffineConstantExprGet ( SegmentAllocator allocator,  MemorySegment ctx,  long constant) {
        var mh$ = mlirAffineConstantExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, constant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineConstantExprGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mlirAffineConstantExprGetValue$MH,"mlirAffineConstantExprGetValue");
    }
    public static long mlirAffineConstantExprGetValue ( MemorySegment affineExpr) {
        var mh$ = mlirAffineConstantExprGetValue$MH();
        try {
            return (long)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsAAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mlirAffineExprIsAAdd$MH,"mlirAffineExprIsAAdd");
    }
    public static boolean mlirAffineExprIsAAdd ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsAAdd$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineAddExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mlirAffineAddExprGet$MH,"mlirAffineAddExprGet");
    }
    public static MemorySegment mlirAffineAddExprGet ( SegmentAllocator allocator,  MemorySegment lhs,  MemorySegment rhs) {
        var mh$ = mlirAffineAddExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsAMul$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mlirAffineExprIsAMul$MH,"mlirAffineExprIsAMul");
    }
    public static boolean mlirAffineExprIsAMul ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsAMul$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMulExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mlirAffineMulExprGet$MH,"mlirAffineMulExprGet");
    }
    public static MemorySegment mlirAffineMulExprGet ( SegmentAllocator allocator,  MemorySegment lhs,  MemorySegment rhs) {
        var mh$ = mlirAffineMulExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsAMod$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mlirAffineExprIsAMod$MH,"mlirAffineExprIsAMod");
    }
    public static boolean mlirAffineExprIsAMod ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsAMod$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineModExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$45.mlirAffineModExprGet$MH,"mlirAffineModExprGet");
    }
    public static MemorySegment mlirAffineModExprGet ( SegmentAllocator allocator,  MemorySegment lhs,  MemorySegment rhs) {
        var mh$ = mlirAffineModExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsAFloorDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.mlirAffineExprIsAFloorDiv$MH,"mlirAffineExprIsAFloorDiv");
    }
    public static boolean mlirAffineExprIsAFloorDiv ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsAFloorDiv$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineFloorDivExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$45.mlirAffineFloorDivExprGet$MH,"mlirAffineFloorDivExprGet");
    }
    public static MemorySegment mlirAffineFloorDivExprGet ( SegmentAllocator allocator,  MemorySegment lhs,  MemorySegment rhs) {
        var mh$ = mlirAffineFloorDivExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsACeilDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.mlirAffineExprIsACeilDiv$MH,"mlirAffineExprIsACeilDiv");
    }
    public static boolean mlirAffineExprIsACeilDiv ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsACeilDiv$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineCeilDivExprGet$MH() {
        return RuntimeHelper.requireNonNull(constants$45.mlirAffineCeilDivExprGet$MH,"mlirAffineCeilDivExprGet");
    }
    public static MemorySegment mlirAffineCeilDivExprGet ( SegmentAllocator allocator,  MemorySegment lhs,  MemorySegment rhs) {
        var mh$ = mlirAffineCeilDivExprGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineExprIsABinary$MH() {
        return RuntimeHelper.requireNonNull(constants$45.mlirAffineExprIsABinary$MH,"mlirAffineExprIsABinary");
    }
    public static boolean mlirAffineExprIsABinary ( MemorySegment affineExpr) {
        var mh$ = mlirAffineExprIsABinary$MH();
        try {
            return (boolean)mh$.invokeExact(affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineBinaryOpExprGetLHS$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mlirAffineBinaryOpExprGetLHS$MH,"mlirAffineBinaryOpExprGetLHS");
    }
    public static MemorySegment mlirAffineBinaryOpExprGetLHS ( SegmentAllocator allocator,  MemorySegment affineExpr) {
        var mh$ = mlirAffineBinaryOpExprGetLHS$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineBinaryOpExprGetRHS$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mlirAffineBinaryOpExprGetRHS$MH,"mlirAffineBinaryOpExprGetRHS");
    }
    public static MemorySegment mlirAffineBinaryOpExprGetRHS ( SegmentAllocator allocator,  MemorySegment affineExpr) {
        var mh$ = mlirAffineBinaryOpExprGetRHS$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineExpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mlirIntegerSetGetContext$MH,"mlirIntegerSetGetContext");
    }
    public static MemorySegment mlirIntegerSetGetContext ( SegmentAllocator allocator,  MemorySegment set) {
        var mh$ = mlirIntegerSetGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mlirIntegerSetIsNull$MH,"mlirIntegerSetIsNull");
    }
    public static boolean mlirIntegerSetIsNull ( MemorySegment set) {
        var mh$ = mlirIntegerSetIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mlirIntegerSetEqual$MH,"mlirIntegerSetEqual");
    }
    public static boolean mlirIntegerSetEqual ( MemorySegment s1,  MemorySegment s2) {
        var mh$ = mlirIntegerSetEqual$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mlirIntegerSetPrint$MH,"mlirIntegerSetPrint");
    }
    public static void mlirIntegerSetPrint ( MemorySegment set,  Addressable callback,  Addressable userData) {
        var mh$ = mlirIntegerSetPrint$MH();
        try {
            mh$.invokeExact(set, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetDump$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mlirIntegerSetDump$MH,"mlirIntegerSetDump");
    }
    public static void mlirIntegerSetDump ( MemorySegment set) {
        var mh$ = mlirIntegerSetDump$MH();
        try {
            mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetEmptyGet$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mlirIntegerSetEmptyGet$MH,"mlirIntegerSetEmptyGet");
    }
    public static MemorySegment mlirIntegerSetEmptyGet ( SegmentAllocator allocator,  MemorySegment context,  long numDims,  long numSymbols) {
        var mh$ = mlirIntegerSetEmptyGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, numDims, numSymbols);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGet$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mlirIntegerSetGet$MH,"mlirIntegerSetGet");
    }
    public static MemorySegment mlirIntegerSetGet ( SegmentAllocator allocator,  MemorySegment context,  long numDims,  long numSymbols,  long numConstraints,  Addressable constraints,  Addressable eqFlags) {
        var mh$ = mlirIntegerSetGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, context, numDims, numSymbols, numConstraints, constraints, eqFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetReplaceGet$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mlirIntegerSetReplaceGet$MH,"mlirIntegerSetReplaceGet");
    }
    public static MemorySegment mlirIntegerSetReplaceGet ( SegmentAllocator allocator,  MemorySegment set,  Addressable dimReplacements,  Addressable symbolReplacements,  long numResultDims,  long numResultSymbols) {
        var mh$ = mlirIntegerSetReplaceGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, set, dimReplacements, symbolReplacements, numResultDims, numResultSymbols);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetIsCanonicalEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mlirIntegerSetIsCanonicalEmpty$MH,"mlirIntegerSetIsCanonicalEmpty");
    }
    public static boolean mlirIntegerSetIsCanonicalEmpty ( MemorySegment set) {
        var mh$ = mlirIntegerSetIsCanonicalEmpty$MH();
        try {
            return (boolean)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetNumDims$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mlirIntegerSetGetNumDims$MH,"mlirIntegerSetGetNumDims");
    }
    public static long mlirIntegerSetGetNumDims ( MemorySegment set) {
        var mh$ = mlirIntegerSetGetNumDims$MH();
        try {
            return (long)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetNumSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mlirIntegerSetGetNumSymbols$MH,"mlirIntegerSetGetNumSymbols");
    }
    public static long mlirIntegerSetGetNumSymbols ( MemorySegment set) {
        var mh$ = mlirIntegerSetGetNumSymbols$MH();
        try {
            return (long)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetNumInputs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mlirIntegerSetGetNumInputs$MH,"mlirIntegerSetGetNumInputs");
    }
    public static long mlirIntegerSetGetNumInputs ( MemorySegment set) {
        var mh$ = mlirIntegerSetGetNumInputs$MH();
        try {
            return (long)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetNumConstraints$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mlirIntegerSetGetNumConstraints$MH,"mlirIntegerSetGetNumConstraints");
    }
    public static long mlirIntegerSetGetNumConstraints ( MemorySegment set) {
        var mh$ = mlirIntegerSetGetNumConstraints$MH();
        try {
            return (long)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetNumEqualities$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mlirIntegerSetGetNumEqualities$MH,"mlirIntegerSetGetNumEqualities");
    }
    public static long mlirIntegerSetGetNumEqualities ( MemorySegment set) {
        var mh$ = mlirIntegerSetGetNumEqualities$MH();
        try {
            return (long)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetNumInequalities$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mlirIntegerSetGetNumInequalities$MH,"mlirIntegerSetGetNumInequalities");
    }
    public static long mlirIntegerSetGetNumInequalities ( MemorySegment set) {
        var mh$ = mlirIntegerSetGetNumInequalities$MH();
        try {
            return (long)mh$.invokeExact(set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetGetConstraint$MH() {
        return RuntimeHelper.requireNonNull(constants$48.mlirIntegerSetGetConstraint$MH,"mlirIntegerSetGetConstraint");
    }
    public static MemorySegment mlirIntegerSetGetConstraint ( SegmentAllocator allocator,  MemorySegment set,  long pos) {
        var mh$ = mlirIntegerSetGetConstraint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, set, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerSetIsConstraintEq$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mlirIntegerSetIsConstraintEq$MH,"mlirIntegerSetIsConstraintEq");
    }
    public static boolean mlirIntegerSetIsConstraintEq ( MemorySegment set,  long pos) {
        var mh$ = mlirIntegerSetIsConstraintEq$MH();
        try {
            return (boolean)mh$.invokeExact(set, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mlirAffineMapGetContext$MH,"mlirAffineMapGetContext");
    }
    public static MemorySegment mlirAffineMapGetContext ( SegmentAllocator allocator,  MemorySegment affineMap) {
        var mh$ = mlirAffineMapGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsNull$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mlirAffineMapIsNull$MH,"mlirAffineMapIsNull");
    }
    public static boolean mlirAffineMapIsNull ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsNull$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mlirAffineMapEqual$MH,"mlirAffineMapEqual");
    }
    public static boolean mlirAffineMapEqual ( MemorySegment a1,  MemorySegment a2) {
        var mh$ = mlirAffineMapEqual$MH();
        try {
            return (boolean)mh$.invokeExact(a1, a2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapPrint$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mlirAffineMapPrint$MH,"mlirAffineMapPrint");
    }
    public static void mlirAffineMapPrint ( MemorySegment affineMap,  Addressable callback,  Addressable userData) {
        var mh$ = mlirAffineMapPrint$MH();
        try {
            mh$.invokeExact(affineMap, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapDump$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mlirAffineMapDump$MH,"mlirAffineMapDump");
    }
    public static void mlirAffineMapDump ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapDump$MH();
        try {
            mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapEmptyGet$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mlirAffineMapEmptyGet$MH,"mlirAffineMapEmptyGet");
    }
    public static MemorySegment mlirAffineMapEmptyGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirAffineMapEmptyGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapZeroResultGet$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mlirAffineMapZeroResultGet$MH,"mlirAffineMapZeroResultGet");
    }
    public static MemorySegment mlirAffineMapZeroResultGet ( SegmentAllocator allocator,  MemorySegment ctx,  long dimCount,  long symbolCount) {
        var mh$ = mlirAffineMapZeroResultGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, dimCount, symbolCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGet$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mlirAffineMapGet$MH,"mlirAffineMapGet");
    }
    public static MemorySegment mlirAffineMapGet ( SegmentAllocator allocator,  MemorySegment ctx,  long dimCount,  long symbolCount,  long nAffineExprs,  Addressable affineExprs) {
        var mh$ = mlirAffineMapGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, dimCount, symbolCount, nAffineExprs, affineExprs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapConstantGet$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mlirAffineMapConstantGet$MH,"mlirAffineMapConstantGet");
    }
    public static MemorySegment mlirAffineMapConstantGet ( SegmentAllocator allocator,  MemorySegment ctx,  long val) {
        var mh$ = mlirAffineMapConstantGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapMultiDimIdentityGet$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mlirAffineMapMultiDimIdentityGet$MH,"mlirAffineMapMultiDimIdentityGet");
    }
    public static MemorySegment mlirAffineMapMultiDimIdentityGet ( SegmentAllocator allocator,  MemorySegment ctx,  long numDims) {
        var mh$ = mlirAffineMapMultiDimIdentityGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, numDims);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapMinorIdentityGet$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mlirAffineMapMinorIdentityGet$MH,"mlirAffineMapMinorIdentityGet");
    }
    public static MemorySegment mlirAffineMapMinorIdentityGet ( SegmentAllocator allocator,  MemorySegment ctx,  long dims,  long results) {
        var mh$ = mlirAffineMapMinorIdentityGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, dims, results);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapPermutationGet$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mlirAffineMapPermutationGet$MH,"mlirAffineMapPermutationGet");
    }
    public static MemorySegment mlirAffineMapPermutationGet ( SegmentAllocator allocator,  MemorySegment ctx,  long size,  Addressable permutation) {
        var mh$ = mlirAffineMapPermutationGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, size, permutation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mlirAffineMapIsIdentity$MH,"mlirAffineMapIsIdentity");
    }
    public static boolean mlirAffineMapIsIdentity ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsIdentity$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsMinorIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mlirAffineMapIsMinorIdentity$MH,"mlirAffineMapIsMinorIdentity");
    }
    public static boolean mlirAffineMapIsMinorIdentity ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsMinorIdentity$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mlirAffineMapIsEmpty$MH,"mlirAffineMapIsEmpty");
    }
    public static boolean mlirAffineMapIsEmpty ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsEmpty$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsSingleConstant$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mlirAffineMapIsSingleConstant$MH,"mlirAffineMapIsSingleConstant");
    }
    public static boolean mlirAffineMapIsSingleConstant ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsSingleConstant$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetSingleConstantResult$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mlirAffineMapGetSingleConstantResult$MH,"mlirAffineMapGetSingleConstantResult");
    }
    public static long mlirAffineMapGetSingleConstantResult ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapGetSingleConstantResult$MH();
        try {
            return (long)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetNumDims$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mlirAffineMapGetNumDims$MH,"mlirAffineMapGetNumDims");
    }
    public static long mlirAffineMapGetNumDims ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapGetNumDims$MH();
        try {
            return (long)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetNumSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mlirAffineMapGetNumSymbols$MH,"mlirAffineMapGetNumSymbols");
    }
    public static long mlirAffineMapGetNumSymbols ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapGetNumSymbols$MH();
        try {
            return (long)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetNumResults$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mlirAffineMapGetNumResults$MH,"mlirAffineMapGetNumResults");
    }
    public static long mlirAffineMapGetNumResults ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapGetNumResults$MH();
        try {
            return (long)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetResult$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mlirAffineMapGetResult$MH,"mlirAffineMapGetResult");
    }
    public static MemorySegment mlirAffineMapGetResult ( SegmentAllocator allocator,  MemorySegment affineMap,  long pos) {
        var mh$ = mlirAffineMapGetResult$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineMap, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetNumInputs$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mlirAffineMapGetNumInputs$MH,"mlirAffineMapGetNumInputs");
    }
    public static long mlirAffineMapGetNumInputs ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapGetNumInputs$MH();
        try {
            return (long)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsProjectedPermutation$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mlirAffineMapIsProjectedPermutation$MH,"mlirAffineMapIsProjectedPermutation");
    }
    public static boolean mlirAffineMapIsProjectedPermutation ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsProjectedPermutation$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapIsPermutation$MH() {
        return RuntimeHelper.requireNonNull(constants$53.mlirAffineMapIsPermutation$MH,"mlirAffineMapIsPermutation");
    }
    public static boolean mlirAffineMapIsPermutation ( MemorySegment affineMap) {
        var mh$ = mlirAffineMapIsPermutation$MH();
        try {
            return (boolean)mh$.invokeExact(affineMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetSubMap$MH() {
        return RuntimeHelper.requireNonNull(constants$53.mlirAffineMapGetSubMap$MH,"mlirAffineMapGetSubMap");
    }
    public static MemorySegment mlirAffineMapGetSubMap ( SegmentAllocator allocator,  MemorySegment affineMap,  long size,  Addressable resultPos) {
        var mh$ = mlirAffineMapGetSubMap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineMap, size, resultPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetMajorSubMap$MH() {
        return RuntimeHelper.requireNonNull(constants$53.mlirAffineMapGetMajorSubMap$MH,"mlirAffineMapGetMajorSubMap");
    }
    public static MemorySegment mlirAffineMapGetMajorSubMap ( SegmentAllocator allocator,  MemorySegment affineMap,  long numResults) {
        var mh$ = mlirAffineMapGetMajorSubMap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineMap, numResults);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapGetMinorSubMap$MH() {
        return RuntimeHelper.requireNonNull(constants$53.mlirAffineMapGetMinorSubMap$MH,"mlirAffineMapGetMinorSubMap");
    }
    public static MemorySegment mlirAffineMapGetMinorSubMap ( SegmentAllocator allocator,  MemorySegment affineMap,  long numResults) {
        var mh$ = mlirAffineMapGetMinorSubMap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineMap, numResults);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapReplace$MH() {
        return RuntimeHelper.requireNonNull(constants$53.mlirAffineMapReplace$MH,"mlirAffineMapReplace");
    }
    public static MemorySegment mlirAffineMapReplace ( SegmentAllocator allocator,  MemorySegment affineMap,  MemorySegment expression,  MemorySegment replacement,  long numResultDims,  long numResultSyms) {
        var mh$ = mlirAffineMapReplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, affineMap, expression, replacement, numResultDims, numResultSyms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirAffineMapCompressUnusedSymbols$MH() {
        return RuntimeHelper.requireNonNull(constants$54.mlirAffineMapCompressUnusedSymbols$MH,"mlirAffineMapCompressUnusedSymbols");
    }
    public static void mlirAffineMapCompressUnusedSymbols ( Addressable affineMaps,  long size,  Addressable result,  Addressable populateResult) {
        var mh$ = mlirAffineMapCompressUnusedSymbols$MH();
        try {
            mh$.invokeExact(affineMaps, size, result, populateResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAInteger$MH() {
        return RuntimeHelper.requireNonNull(constants$54.mlirTypeIsAInteger$MH,"mlirTypeIsAInteger");
    }
    public static boolean mlirTypeIsAInteger ( MemorySegment type) {
        var mh$ = mlirTypeIsAInteger$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$54.mlirIntegerTypeGet$MH,"mlirIntegerTypeGet");
    }
    public static MemorySegment mlirIntegerTypeGet ( SegmentAllocator allocator,  MemorySegment ctx,  int bitwidth) {
        var mh$ = mlirIntegerTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, bitwidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeSignedGet$MH() {
        return RuntimeHelper.requireNonNull(constants$54.mlirIntegerTypeSignedGet$MH,"mlirIntegerTypeSignedGet");
    }
    public static MemorySegment mlirIntegerTypeSignedGet ( SegmentAllocator allocator,  MemorySegment ctx,  int bitwidth) {
        var mh$ = mlirIntegerTypeSignedGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, bitwidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeUnsignedGet$MH() {
        return RuntimeHelper.requireNonNull(constants$54.mlirIntegerTypeUnsignedGet$MH,"mlirIntegerTypeUnsignedGet");
    }
    public static MemorySegment mlirIntegerTypeUnsignedGet ( SegmentAllocator allocator,  MemorySegment ctx,  int bitwidth) {
        var mh$ = mlirIntegerTypeUnsignedGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, bitwidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeGetWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mlirIntegerTypeGetWidth$MH,"mlirIntegerTypeGetWidth");
    }
    public static int mlirIntegerTypeGetWidth ( MemorySegment type) {
        var mh$ = mlirIntegerTypeGetWidth$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeIsSignless$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mlirIntegerTypeIsSignless$MH,"mlirIntegerTypeIsSignless");
    }
    public static boolean mlirIntegerTypeIsSignless ( MemorySegment type) {
        var mh$ = mlirIntegerTypeIsSignless$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeIsSigned$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mlirIntegerTypeIsSigned$MH,"mlirIntegerTypeIsSigned");
    }
    public static boolean mlirIntegerTypeIsSigned ( MemorySegment type) {
        var mh$ = mlirIntegerTypeIsSigned$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIntegerTypeIsUnsigned$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mlirIntegerTypeIsUnsigned$MH,"mlirIntegerTypeIsUnsigned");
    }
    public static boolean mlirIntegerTypeIsUnsigned ( MemorySegment type) {
        var mh$ = mlirIntegerTypeIsUnsigned$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mlirTypeIsAIndex$MH,"mlirTypeIsAIndex");
    }
    public static boolean mlirTypeIsAIndex ( MemorySegment type) {
        var mh$ = mlirTypeIsAIndex$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirIndexTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mlirIndexTypeGet$MH,"mlirIndexTypeGet");
    }
    public static MemorySegment mlirIndexTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirIndexTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAFloat8E5M2$MH() {
        return RuntimeHelper.requireNonNull(constants$56.mlirTypeIsAFloat8E5M2$MH,"mlirTypeIsAFloat8E5M2");
    }
    public static boolean mlirTypeIsAFloat8E5M2 ( MemorySegment type) {
        var mh$ = mlirTypeIsAFloat8E5M2$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloat8E5M2TypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$56.mlirFloat8E5M2TypeGet$MH,"mlirFloat8E5M2TypeGet");
    }
    public static MemorySegment mlirFloat8E5M2TypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirFloat8E5M2TypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAFloat8E4M3FN$MH() {
        return RuntimeHelper.requireNonNull(constants$56.mlirTypeIsAFloat8E4M3FN$MH,"mlirTypeIsAFloat8E4M3FN");
    }
    public static boolean mlirTypeIsAFloat8E4M3FN ( MemorySegment type) {
        var mh$ = mlirTypeIsAFloat8E4M3FN$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloat8E4M3FNTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$56.mlirFloat8E4M3FNTypeGet$MH,"mlirFloat8E4M3FNTypeGet");
    }
    public static MemorySegment mlirFloat8E4M3FNTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirFloat8E4M3FNTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAFloat8E5M2FNUZ$MH() {
        return RuntimeHelper.requireNonNull(constants$56.mlirTypeIsAFloat8E5M2FNUZ$MH,"mlirTypeIsAFloat8E5M2FNUZ");
    }
    public static boolean mlirTypeIsAFloat8E5M2FNUZ ( MemorySegment type) {
        var mh$ = mlirTypeIsAFloat8E5M2FNUZ$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloat8E5M2FNUZTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$56.mlirFloat8E5M2FNUZTypeGet$MH,"mlirFloat8E5M2FNUZTypeGet");
    }
    public static MemorySegment mlirFloat8E5M2FNUZTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirFloat8E5M2FNUZTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAFloat8E4M3FNUZ$MH() {
        return RuntimeHelper.requireNonNull(constants$57.mlirTypeIsAFloat8E4M3FNUZ$MH,"mlirTypeIsAFloat8E4M3FNUZ");
    }
    public static boolean mlirTypeIsAFloat8E4M3FNUZ ( MemorySegment type) {
        var mh$ = mlirTypeIsAFloat8E4M3FNUZ$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFloat8E4M3FNUZTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$57.mlirFloat8E4M3FNUZTypeGet$MH,"mlirFloat8E4M3FNUZTypeGet");
    }
    public static MemorySegment mlirFloat8E4M3FNUZTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirFloat8E4M3FNUZTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsABF16$MH() {
        return RuntimeHelper.requireNonNull(constants$57.mlirTypeIsABF16$MH,"mlirTypeIsABF16");
    }
    public static boolean mlirTypeIsABF16 ( MemorySegment type) {
        var mh$ = mlirTypeIsABF16$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirBF16TypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$57.mlirBF16TypeGet$MH,"mlirBF16TypeGet");
    }
    public static MemorySegment mlirBF16TypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirBF16TypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAF16$MH() {
        return RuntimeHelper.requireNonNull(constants$57.mlirTypeIsAF16$MH,"mlirTypeIsAF16");
    }
    public static boolean mlirTypeIsAF16 ( MemorySegment type) {
        var mh$ = mlirTypeIsAF16$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirF16TypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$57.mlirF16TypeGet$MH,"mlirF16TypeGet");
    }
    public static MemorySegment mlirF16TypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirF16TypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAF32$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mlirTypeIsAF32$MH,"mlirTypeIsAF32");
    }
    public static boolean mlirTypeIsAF32 ( MemorySegment type) {
        var mh$ = mlirTypeIsAF32$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirF32TypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mlirF32TypeGet$MH,"mlirF32TypeGet");
    }
    public static MemorySegment mlirF32TypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirF32TypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAF64$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mlirTypeIsAF64$MH,"mlirTypeIsAF64");
    }
    public static boolean mlirTypeIsAF64 ( MemorySegment type) {
        var mh$ = mlirTypeIsAF64$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirF64TypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mlirF64TypeGet$MH,"mlirF64TypeGet");
    }
    public static MemorySegment mlirF64TypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirF64TypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsANone$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mlirTypeIsANone$MH,"mlirTypeIsANone");
    }
    public static boolean mlirTypeIsANone ( MemorySegment type) {
        var mh$ = mlirTypeIsANone$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirNoneTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$58.mlirNoneTypeGet$MH,"mlirNoneTypeGet");
    }
    public static MemorySegment mlirNoneTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirNoneTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAComplex$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mlirTypeIsAComplex$MH,"mlirTypeIsAComplex");
    }
    public static boolean mlirTypeIsAComplex ( MemorySegment type) {
        var mh$ = mlirTypeIsAComplex$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirComplexTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mlirComplexTypeGet$MH,"mlirComplexTypeGet");
    }
    public static MemorySegment mlirComplexTypeGet ( SegmentAllocator allocator,  MemorySegment elementType) {
        var mh$ = mlirComplexTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirComplexTypeGetElementType$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mlirComplexTypeGetElementType$MH,"mlirComplexTypeGetElementType");
    }
    public static MemorySegment mlirComplexTypeGetElementType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirComplexTypeGetElementType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAShaped$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mlirTypeIsAShaped$MH,"mlirTypeIsAShaped");
    }
    public static boolean mlirTypeIsAShaped ( MemorySegment type) {
        var mh$ = mlirTypeIsAShaped$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeGetElementType$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mlirShapedTypeGetElementType$MH,"mlirShapedTypeGetElementType");
    }
    public static MemorySegment mlirShapedTypeGetElementType ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirShapedTypeGetElementType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeHasRank$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mlirShapedTypeHasRank$MH,"mlirShapedTypeHasRank");
    }
    public static boolean mlirShapedTypeHasRank ( MemorySegment type) {
        var mh$ = mlirShapedTypeHasRank$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeGetRank$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mlirShapedTypeGetRank$MH,"mlirShapedTypeGetRank");
    }
    public static long mlirShapedTypeGetRank ( MemorySegment type) {
        var mh$ = mlirShapedTypeGetRank$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeHasStaticShape$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mlirShapedTypeHasStaticShape$MH,"mlirShapedTypeHasStaticShape");
    }
    public static boolean mlirShapedTypeHasStaticShape ( MemorySegment type) {
        var mh$ = mlirShapedTypeHasStaticShape$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeIsDynamicDim$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mlirShapedTypeIsDynamicDim$MH,"mlirShapedTypeIsDynamicDim");
    }
    public static boolean mlirShapedTypeIsDynamicDim ( MemorySegment type,  long dim) {
        var mh$ = mlirShapedTypeIsDynamicDim$MH();
        try {
            return (boolean)mh$.invokeExact(type, dim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeGetDimSize$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mlirShapedTypeGetDimSize$MH,"mlirShapedTypeGetDimSize");
    }
    public static long mlirShapedTypeGetDimSize ( MemorySegment type,  long dim) {
        var mh$ = mlirShapedTypeGetDimSize$MH();
        try {
            return (long)mh$.invokeExact(type, dim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeIsDynamicSize$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mlirShapedTypeIsDynamicSize$MH,"mlirShapedTypeIsDynamicSize");
    }
    public static boolean mlirShapedTypeIsDynamicSize ( long size) {
        var mh$ = mlirShapedTypeIsDynamicSize$MH();
        try {
            return (boolean)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeGetDynamicSize$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mlirShapedTypeGetDynamicSize$MH,"mlirShapedTypeGetDynamicSize");
    }
    public static long mlirShapedTypeGetDynamicSize () {
        var mh$ = mlirShapedTypeGetDynamicSize$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeIsDynamicStrideOrOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$61.mlirShapedTypeIsDynamicStrideOrOffset$MH,"mlirShapedTypeIsDynamicStrideOrOffset");
    }
    public static boolean mlirShapedTypeIsDynamicStrideOrOffset ( long val) {
        var mh$ = mlirShapedTypeIsDynamicStrideOrOffset$MH();
        try {
            return (boolean)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirShapedTypeGetDynamicStrideOrOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$61.mlirShapedTypeGetDynamicStrideOrOffset$MH,"mlirShapedTypeGetDynamicStrideOrOffset");
    }
    public static long mlirShapedTypeGetDynamicStrideOrOffset () {
        var mh$ = mlirShapedTypeGetDynamicStrideOrOffset$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAVector$MH() {
        return RuntimeHelper.requireNonNull(constants$61.mlirTypeIsAVector$MH,"mlirTypeIsAVector");
    }
    public static boolean mlirTypeIsAVector ( MemorySegment type) {
        var mh$ = mlirTypeIsAVector$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirVectorTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$61.mlirVectorTypeGet$MH,"mlirVectorTypeGet");
    }
    public static MemorySegment mlirVectorTypeGet ( SegmentAllocator allocator,  long rank,  Addressable shape,  MemorySegment elementType) {
        var mh$ = mlirVectorTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, rank, shape, elementType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirVectorTypeGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$61.mlirVectorTypeGetChecked$MH,"mlirVectorTypeGetChecked");
    }
    public static MemorySegment mlirVectorTypeGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  long rank,  Addressable shape,  MemorySegment elementType) {
        var mh$ = mlirVectorTypeGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, rank, shape, elementType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsATensor$MH() {
        return RuntimeHelper.requireNonNull(constants$61.mlirTypeIsATensor$MH,"mlirTypeIsATensor");
    }
    public static boolean mlirTypeIsATensor ( MemorySegment type) {
        var mh$ = mlirTypeIsATensor$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsARankedTensor$MH() {
        return RuntimeHelper.requireNonNull(constants$62.mlirTypeIsARankedTensor$MH,"mlirTypeIsARankedTensor");
    }
    public static boolean mlirTypeIsARankedTensor ( MemorySegment type) {
        var mh$ = mlirTypeIsARankedTensor$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAUnrankedTensor$MH() {
        return RuntimeHelper.requireNonNull(constants$62.mlirTypeIsAUnrankedTensor$MH,"mlirTypeIsAUnrankedTensor");
    }
    public static boolean mlirTypeIsAUnrankedTensor ( MemorySegment type) {
        var mh$ = mlirTypeIsAUnrankedTensor$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRankedTensorTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$62.mlirRankedTensorTypeGet$MH,"mlirRankedTensorTypeGet");
    }
    public static MemorySegment mlirRankedTensorTypeGet ( SegmentAllocator allocator,  long rank,  Addressable shape,  MemorySegment elementType,  MemorySegment encoding) {
        var mh$ = mlirRankedTensorTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, rank, shape, elementType, encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRankedTensorTypeGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.mlirRankedTensorTypeGetChecked$MH,"mlirRankedTensorTypeGetChecked");
    }
    public static MemorySegment mlirRankedTensorTypeGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  long rank,  Addressable shape,  MemorySegment elementType,  MemorySegment encoding) {
        var mh$ = mlirRankedTensorTypeGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, rank, shape, elementType, encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirRankedTensorTypeGetEncoding$MH() {
        return RuntimeHelper.requireNonNull(constants$62.mlirRankedTensorTypeGetEncoding$MH,"mlirRankedTensorTypeGetEncoding");
    }
    public static MemorySegment mlirRankedTensorTypeGetEncoding ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirRankedTensorTypeGetEncoding$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnrankedTensorTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$62.mlirUnrankedTensorTypeGet$MH,"mlirUnrankedTensorTypeGet");
    }
    public static MemorySegment mlirUnrankedTensorTypeGet ( SegmentAllocator allocator,  MemorySegment elementType) {
        var mh$ = mlirUnrankedTensorTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnrankedTensorTypeGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.mlirUnrankedTensorTypeGetChecked$MH,"mlirUnrankedTensorTypeGetChecked");
    }
    public static MemorySegment mlirUnrankedTensorTypeGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  MemorySegment elementType) {
        var mh$ = mlirUnrankedTensorTypeGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, elementType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAMemRef$MH() {
        return RuntimeHelper.requireNonNull(constants$63.mlirTypeIsAMemRef$MH,"mlirTypeIsAMemRef");
    }
    public static boolean mlirTypeIsAMemRef ( MemorySegment type) {
        var mh$ = mlirTypeIsAMemRef$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAUnrankedMemRef$MH() {
        return RuntimeHelper.requireNonNull(constants$63.mlirTypeIsAUnrankedMemRef$MH,"mlirTypeIsAUnrankedMemRef");
    }
    public static boolean mlirTypeIsAUnrankedMemRef ( MemorySegment type) {
        var mh$ = mlirTypeIsAUnrankedMemRef$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.mlirMemRefTypeGet$MH,"mlirMemRefTypeGet");
    }
    public static MemorySegment mlirMemRefTypeGet ( SegmentAllocator allocator,  MemorySegment elementType,  long rank,  Addressable shape,  MemorySegment layout,  MemorySegment memorySpace) {
        var mh$ = mlirMemRefTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType, rank, shape, layout, memorySpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.mlirMemRefTypeGetChecked$MH,"mlirMemRefTypeGetChecked");
    }
    public static MemorySegment mlirMemRefTypeGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  MemorySegment elementType,  long rank,  Addressable shape,  MemorySegment layout,  MemorySegment memorySpace) {
        var mh$ = mlirMemRefTypeGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, elementType, rank, shape, layout, memorySpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeContiguousGet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.mlirMemRefTypeContiguousGet$MH,"mlirMemRefTypeContiguousGet");
    }
    public static MemorySegment mlirMemRefTypeContiguousGet ( SegmentAllocator allocator,  MemorySegment elementType,  long rank,  Addressable shape,  MemorySegment memorySpace) {
        var mh$ = mlirMemRefTypeContiguousGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType, rank, shape, memorySpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeContiguousGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$64.mlirMemRefTypeContiguousGetChecked$MH,"mlirMemRefTypeContiguousGetChecked");
    }
    public static MemorySegment mlirMemRefTypeContiguousGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  MemorySegment elementType,  long rank,  Addressable shape,  MemorySegment memorySpace) {
        var mh$ = mlirMemRefTypeContiguousGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, elementType, rank, shape, memorySpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnrankedMemRefTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$64.mlirUnrankedMemRefTypeGet$MH,"mlirUnrankedMemRefTypeGet");
    }
    public static MemorySegment mlirUnrankedMemRefTypeGet ( SegmentAllocator allocator,  MemorySegment elementType,  MemorySegment memorySpace) {
        var mh$ = mlirUnrankedMemRefTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, elementType, memorySpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnrankedMemRefTypeGetChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$64.mlirUnrankedMemRefTypeGetChecked$MH,"mlirUnrankedMemRefTypeGetChecked");
    }
    public static MemorySegment mlirUnrankedMemRefTypeGetChecked ( SegmentAllocator allocator,  MemorySegment loc,  MemorySegment elementType,  MemorySegment memorySpace) {
        var mh$ = mlirUnrankedMemRefTypeGetChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, loc, elementType, memorySpace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeGetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$64.mlirMemRefTypeGetLayout$MH,"mlirMemRefTypeGetLayout");
    }
    public static MemorySegment mlirMemRefTypeGetLayout ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirMemRefTypeGetLayout$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeGetAffineMap$MH() {
        return RuntimeHelper.requireNonNull(constants$64.mlirMemRefTypeGetAffineMap$MH,"mlirMemRefTypeGetAffineMap");
    }
    public static MemorySegment mlirMemRefTypeGetAffineMap ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirMemRefTypeGetAffineMap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirMemRefTypeGetMemorySpace$MH() {
        return RuntimeHelper.requireNonNull(constants$64.mlirMemRefTypeGetMemorySpace$MH,"mlirMemRefTypeGetMemorySpace");
    }
    public static MemorySegment mlirMemRefTypeGetMemorySpace ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirMemRefTypeGetMemorySpace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirUnrankedMemrefGetMemorySpace$MH() {
        return RuntimeHelper.requireNonNull(constants$65.mlirUnrankedMemrefGetMemorySpace$MH,"mlirUnrankedMemrefGetMemorySpace");
    }
    public static MemorySegment mlirUnrankedMemrefGetMemorySpace ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirUnrankedMemrefGetMemorySpace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsATuple$MH() {
        return RuntimeHelper.requireNonNull(constants$65.mlirTypeIsATuple$MH,"mlirTypeIsATuple");
    }
    public static boolean mlirTypeIsATuple ( MemorySegment type) {
        var mh$ = mlirTypeIsATuple$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTupleTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$65.mlirTupleTypeGet$MH,"mlirTupleTypeGet");
    }
    public static MemorySegment mlirTupleTypeGet ( SegmentAllocator allocator,  MemorySegment ctx,  long numElements,  Addressable elements) {
        var mh$ = mlirTupleTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, numElements, elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTupleTypeGetNumTypes$MH() {
        return RuntimeHelper.requireNonNull(constants$65.mlirTupleTypeGetNumTypes$MH,"mlirTupleTypeGetNumTypes");
    }
    public static long mlirTupleTypeGetNumTypes ( MemorySegment type) {
        var mh$ = mlirTupleTypeGetNumTypes$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTupleTypeGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$65.mlirTupleTypeGetType$MH,"mlirTupleTypeGetType");
    }
    public static MemorySegment mlirTupleTypeGetType ( SegmentAllocator allocator,  MemorySegment type,  long pos) {
        var mh$ = mlirTupleTypeGetType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$65.mlirTypeIsAFunction$MH,"mlirTypeIsAFunction");
    }
    public static boolean mlirTypeIsAFunction ( MemorySegment type) {
        var mh$ = mlirTypeIsAFunction$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFunctionTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$66.mlirFunctionTypeGet$MH,"mlirFunctionTypeGet");
    }
    public static MemorySegment mlirFunctionTypeGet ( SegmentAllocator allocator,  MemorySegment ctx,  long numInputs,  Addressable inputs,  long numResults,  Addressable results) {
        var mh$ = mlirFunctionTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, numInputs, inputs, numResults, results);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFunctionTypeGetNumInputs$MH() {
        return RuntimeHelper.requireNonNull(constants$66.mlirFunctionTypeGetNumInputs$MH,"mlirFunctionTypeGetNumInputs");
    }
    public static long mlirFunctionTypeGetNumInputs ( MemorySegment type) {
        var mh$ = mlirFunctionTypeGetNumInputs$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFunctionTypeGetNumResults$MH() {
        return RuntimeHelper.requireNonNull(constants$66.mlirFunctionTypeGetNumResults$MH,"mlirFunctionTypeGetNumResults");
    }
    public static long mlirFunctionTypeGetNumResults ( MemorySegment type) {
        var mh$ = mlirFunctionTypeGetNumResults$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFunctionTypeGetInput$MH() {
        return RuntimeHelper.requireNonNull(constants$66.mlirFunctionTypeGetInput$MH,"mlirFunctionTypeGetInput");
    }
    public static MemorySegment mlirFunctionTypeGetInput ( SegmentAllocator allocator,  MemorySegment type,  long pos) {
        var mh$ = mlirFunctionTypeGetInput$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirFunctionTypeGetResult$MH() {
        return RuntimeHelper.requireNonNull(constants$66.mlirFunctionTypeGetResult$MH,"mlirFunctionTypeGetResult");
    }
    public static MemorySegment mlirFunctionTypeGetResult ( SegmentAllocator allocator,  MemorySegment type,  long pos) {
        var mh$ = mlirFunctionTypeGetResult$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsAOpaque$MH() {
        return RuntimeHelper.requireNonNull(constants$66.mlirTypeIsAOpaque$MH,"mlirTypeIsAOpaque");
    }
    public static boolean mlirTypeIsAOpaque ( MemorySegment type) {
        var mh$ = mlirTypeIsAOpaque$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpaqueTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$67.mlirOpaqueTypeGet$MH,"mlirOpaqueTypeGet");
    }
    public static MemorySegment mlirOpaqueTypeGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment dialectNamespace,  MemorySegment typeData) {
        var mh$ = mlirOpaqueTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, dialectNamespace, typeData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpaqueTypeGetDialectNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$67.mlirOpaqueTypeGetDialectNamespace$MH,"mlirOpaqueTypeGetDialectNamespace");
    }
    public static MemorySegment mlirOpaqueTypeGetDialectNamespace ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirOpaqueTypeGetDialectNamespace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirOpaqueTypeGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$67.mlirOpaqueTypeGetData$MH,"mlirOpaqueTypeGetData");
    }
    public static MemorySegment mlirOpaqueTypeGetData ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirOpaqueTypeGetData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirGetDialectHandle__transform__$MH() {
        return RuntimeHelper.requireNonNull(constants$67.mlirGetDialectHandle__transform__$MH,"mlirGetDialectHandle__transform__");
    }
    public static MemorySegment mlirGetDialectHandle__transform__ ( SegmentAllocator allocator) {
        var mh$ = mlirGetDialectHandle__transform__$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsATransformAnyOpType$MH() {
        return RuntimeHelper.requireNonNull(constants$67.mlirTypeIsATransformAnyOpType$MH,"mlirTypeIsATransformAnyOpType");
    }
    public static boolean mlirTypeIsATransformAnyOpType ( MemorySegment type) {
        var mh$ = mlirTypeIsATransformAnyOpType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTransformAnyOpTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$67.mlirTransformAnyOpTypeGet$MH,"mlirTransformAnyOpTypeGet");
    }
    public static MemorySegment mlirTransformAnyOpTypeGet ( SegmentAllocator allocator,  MemorySegment ctx) {
        var mh$ = mlirTransformAnyOpTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTypeIsATransformOperationType$MH() {
        return RuntimeHelper.requireNonNull(constants$68.mlirTypeIsATransformOperationType$MH,"mlirTypeIsATransformOperationType");
    }
    public static boolean mlirTypeIsATransformOperationType ( MemorySegment type) {
        var mh$ = mlirTypeIsATransformOperationType$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTransformOperationTypeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$68.mlirTransformOperationTypeGet$MH,"mlirTransformOperationTypeGet");
    }
    public static MemorySegment mlirTransformOperationTypeGet ( SegmentAllocator allocator,  MemorySegment ctx,  MemorySegment operationName) {
        var mh$ = mlirTransformOperationTypeGet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, operationName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mlirTransformOperationTypeGetOperationName$MH() {
        return RuntimeHelper.requireNonNull(constants$68.mlirTransformOperationTypeGetOperationName$MH,"mlirTransformOperationTypeGetOperationName");
    }
    public static MemorySegment mlirTransformOperationTypeGetOperationName ( SegmentAllocator allocator,  MemorySegment type) {
        var mh$ = mlirTransformOperationTypeGetOperationName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMBigEndian() {
        return (int)0L;
    }
    public static int LLVMLittleEndian() {
        return (int)1L;
    }
    public static OfAddress LLVMTargetDataRef = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LLVMTargetLibraryInfoRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMInitializeAArch64TargetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$68.LLVMInitializeAArch64TargetInfo$MH,"LLVMInitializeAArch64TargetInfo");
    }
    public static void LLVMInitializeAArch64TargetInfo () {
        var mh$ = LLVMInitializeAArch64TargetInfo$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAArch64Target$MH() {
        return RuntimeHelper.requireNonNull(constants$68.LLVMInitializeAArch64Target$MH,"LLVMInitializeAArch64Target");
    }
    public static void LLVMInitializeAArch64Target () {
        var mh$ = LLVMInitializeAArch64Target$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAArch64TargetMC$MH() {
        return RuntimeHelper.requireNonNull(constants$68.LLVMInitializeAArch64TargetMC$MH,"LLVMInitializeAArch64TargetMC");
    }
    public static void LLVMInitializeAArch64TargetMC () {
        var mh$ = LLVMInitializeAArch64TargetMC$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAArch64AsmPrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$69.LLVMInitializeAArch64AsmPrinter$MH,"LLVMInitializeAArch64AsmPrinter");
    }
    public static void LLVMInitializeAArch64AsmPrinter () {
        var mh$ = LLVMInitializeAArch64AsmPrinter$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAArch64AsmParser$MH() {
        return RuntimeHelper.requireNonNull(constants$69.LLVMInitializeAArch64AsmParser$MH,"LLVMInitializeAArch64AsmParser");
    }
    public static void LLVMInitializeAArch64AsmParser () {
        var mh$ = LLVMInitializeAArch64AsmParser$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAArch64Disassembler$MH() {
        return RuntimeHelper.requireNonNull(constants$69.LLVMInitializeAArch64Disassembler$MH,"LLVMInitializeAArch64Disassembler");
    }
    public static void LLVMInitializeAArch64Disassembler () {
        var mh$ = LLVMInitializeAArch64Disassembler$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAllTargetInfos$MH() {
        return RuntimeHelper.requireNonNull(constants$69.LLVMInitializeAllTargetInfos$MH,"LLVMInitializeAllTargetInfos");
    }
    public static void LLVMInitializeAllTargetInfos () {
        var mh$ = LLVMInitializeAllTargetInfos$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAllTargets$MH() {
        return RuntimeHelper.requireNonNull(constants$69.LLVMInitializeAllTargets$MH,"LLVMInitializeAllTargets");
    }
    public static void LLVMInitializeAllTargets () {
        var mh$ = LLVMInitializeAllTargets$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAllTargetMCs$MH() {
        return RuntimeHelper.requireNonNull(constants$69.LLVMInitializeAllTargetMCs$MH,"LLVMInitializeAllTargetMCs");
    }
    public static void LLVMInitializeAllTargetMCs () {
        var mh$ = LLVMInitializeAllTargetMCs$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAllAsmPrinters$MH() {
        return RuntimeHelper.requireNonNull(constants$70.LLVMInitializeAllAsmPrinters$MH,"LLVMInitializeAllAsmPrinters");
    }
    public static void LLVMInitializeAllAsmPrinters () {
        var mh$ = LLVMInitializeAllAsmPrinters$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAllAsmParsers$MH() {
        return RuntimeHelper.requireNonNull(constants$70.LLVMInitializeAllAsmParsers$MH,"LLVMInitializeAllAsmParsers");
    }
    public static void LLVMInitializeAllAsmParsers () {
        var mh$ = LLVMInitializeAllAsmParsers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeAllDisassemblers$MH() {
        return RuntimeHelper.requireNonNull(constants$70.LLVMInitializeAllDisassemblers$MH,"LLVMInitializeAllDisassemblers");
    }
    public static void LLVMInitializeAllDisassemblers () {
        var mh$ = LLVMInitializeAllDisassemblers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeNativeTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$70.LLVMInitializeNativeTarget$MH,"LLVMInitializeNativeTarget");
    }
    public static int LLVMInitializeNativeTarget () {
        var mh$ = LLVMInitializeNativeTarget$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeNativeAsmParser$MH() {
        return RuntimeHelper.requireNonNull(constants$70.LLVMInitializeNativeAsmParser$MH,"LLVMInitializeNativeAsmParser");
    }
    public static int LLVMInitializeNativeAsmParser () {
        var mh$ = LLVMInitializeNativeAsmParser$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeNativeAsmPrinter$MH() {
        return RuntimeHelper.requireNonNull(constants$70.LLVMInitializeNativeAsmPrinter$MH,"LLVMInitializeNativeAsmPrinter");
    }
    public static int LLVMInitializeNativeAsmPrinter () {
        var mh$ = LLVMInitializeNativeAsmPrinter$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInitializeNativeDisassembler$MH() {
        return RuntimeHelper.requireNonNull(constants$71.LLVMInitializeNativeDisassembler$MH,"LLVMInitializeNativeDisassembler");
    }
    public static int LLVMInitializeNativeDisassembler () {
        var mh$ = LLVMInitializeNativeDisassembler$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMGetModuleDataLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$71.LLVMGetModuleDataLayout$MH,"LLVMGetModuleDataLayout");
    }
    public static MemoryAddress LLVMGetModuleDataLayout ( Addressable M) {
        var mh$ = LLVMGetModuleDataLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(M);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSetModuleDataLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$71.LLVMSetModuleDataLayout$MH,"LLVMSetModuleDataLayout");
    }
    public static void LLVMSetModuleDataLayout ( Addressable M,  Addressable DL) {
        var mh$ = LLVMSetModuleDataLayout$MH();
        try {
            mh$.invokeExact(M, DL);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCreateTargetData$MH() {
        return RuntimeHelper.requireNonNull(constants$71.LLVMCreateTargetData$MH,"LLVMCreateTargetData");
    }
    public static MemoryAddress LLVMCreateTargetData ( Addressable StringRep) {
        var mh$ = LLVMCreateTargetData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(StringRep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMDisposeTargetData$MH() {
        return RuntimeHelper.requireNonNull(constants$71.LLVMDisposeTargetData$MH,"LLVMDisposeTargetData");
    }
    public static void LLVMDisposeTargetData ( Addressable TD) {
        var mh$ = LLVMDisposeTargetData$MH();
        try {
            mh$.invokeExact(TD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMAddTargetLibraryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$71.LLVMAddTargetLibraryInfo$MH,"LLVMAddTargetLibraryInfo");
    }
    public static void LLVMAddTargetLibraryInfo ( Addressable TLI,  Addressable PM) {
        var mh$ = LLVMAddTargetLibraryInfo$MH();
        try {
            mh$.invokeExact(TLI, PM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCopyStringRepOfTargetData$MH() {
        return RuntimeHelper.requireNonNull(constants$72.LLVMCopyStringRepOfTargetData$MH,"LLVMCopyStringRepOfTargetData");
    }
    public static MemoryAddress LLVMCopyStringRepOfTargetData ( Addressable TD) {
        var mh$ = LLVMCopyStringRepOfTargetData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMByteOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$72.LLVMByteOrder$MH,"LLVMByteOrder");
    }
    public static int LLVMByteOrder ( Addressable TD) {
        var mh$ = LLVMByteOrder$MH();
        try {
            return (int)mh$.invokeExact(TD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPointerSize$MH() {
        return RuntimeHelper.requireNonNull(constants$72.LLVMPointerSize$MH,"LLVMPointerSize");
    }
    public static int LLVMPointerSize ( Addressable TD) {
        var mh$ = LLVMPointerSize$MH();
        try {
            return (int)mh$.invokeExact(TD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPointerSizeForAS$MH() {
        return RuntimeHelper.requireNonNull(constants$72.LLVMPointerSizeForAS$MH,"LLVMPointerSizeForAS");
    }
    public static int LLVMPointerSizeForAS ( Addressable TD,  int AS) {
        var mh$ = LLVMPointerSizeForAS$MH();
        try {
            return (int)mh$.invokeExact(TD, AS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntPtrType$MH() {
        return RuntimeHelper.requireNonNull(constants$72.LLVMIntPtrType$MH,"LLVMIntPtrType");
    }
    public static MemoryAddress LLVMIntPtrType ( Addressable TD) {
        var mh$ = LLVMIntPtrType$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntPtrTypeForAS$MH() {
        return RuntimeHelper.requireNonNull(constants$72.LLVMIntPtrTypeForAS$MH,"LLVMIntPtrTypeForAS");
    }
    public static MemoryAddress LLVMIntPtrTypeForAS ( Addressable TD,  int AS) {
        var mh$ = LLVMIntPtrTypeForAS$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TD, AS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntPtrTypeInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$73.LLVMIntPtrTypeInContext$MH,"LLVMIntPtrTypeInContext");
    }
    public static MemoryAddress LLVMIntPtrTypeInContext ( Addressable C,  Addressable TD) {
        var mh$ = LLVMIntPtrTypeInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, TD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMIntPtrTypeForASInContext$MH() {
        return RuntimeHelper.requireNonNull(constants$73.LLVMIntPtrTypeForASInContext$MH,"LLVMIntPtrTypeForASInContext");
    }
    public static MemoryAddress LLVMIntPtrTypeForASInContext ( Addressable C,  Addressable TD,  int AS) {
        var mh$ = LLVMIntPtrTypeForASInContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C, TD, AS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMSizeOfTypeInBits$MH() {
        return RuntimeHelper.requireNonNull(constants$73.LLVMSizeOfTypeInBits$MH,"LLVMSizeOfTypeInBits");
    }
    public static long LLVMSizeOfTypeInBits ( Addressable TD,  Addressable Ty) {
        var mh$ = LLVMSizeOfTypeInBits$MH();
        try {
            return (long)mh$.invokeExact(TD, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMStoreSizeOfType$MH() {
        return RuntimeHelper.requireNonNull(constants$73.LLVMStoreSizeOfType$MH,"LLVMStoreSizeOfType");
    }
    public static long LLVMStoreSizeOfType ( Addressable TD,  Addressable Ty) {
        var mh$ = LLVMStoreSizeOfType$MH();
        try {
            return (long)mh$.invokeExact(TD, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMABISizeOfType$MH() {
        return RuntimeHelper.requireNonNull(constants$73.LLVMABISizeOfType$MH,"LLVMABISizeOfType");
    }
    public static long LLVMABISizeOfType ( Addressable TD,  Addressable Ty) {
        var mh$ = LLVMABISizeOfType$MH();
        try {
            return (long)mh$.invokeExact(TD, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMABIAlignmentOfType$MH() {
        return RuntimeHelper.requireNonNull(constants$73.LLVMABIAlignmentOfType$MH,"LLVMABIAlignmentOfType");
    }
    public static int LLVMABIAlignmentOfType ( Addressable TD,  Addressable Ty) {
        var mh$ = LLVMABIAlignmentOfType$MH();
        try {
            return (int)mh$.invokeExact(TD, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMCallFrameAlignmentOfType$MH() {
        return RuntimeHelper.requireNonNull(constants$74.LLVMCallFrameAlignmentOfType$MH,"LLVMCallFrameAlignmentOfType");
    }
    public static int LLVMCallFrameAlignmentOfType ( Addressable TD,  Addressable Ty) {
        var mh$ = LLVMCallFrameAlignmentOfType$MH();
        try {
            return (int)mh$.invokeExact(TD, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPreferredAlignmentOfType$MH() {
        return RuntimeHelper.requireNonNull(constants$74.LLVMPreferredAlignmentOfType$MH,"LLVMPreferredAlignmentOfType");
    }
    public static int LLVMPreferredAlignmentOfType ( Addressable TD,  Addressable Ty) {
        var mh$ = LLVMPreferredAlignmentOfType$MH();
        try {
            return (int)mh$.invokeExact(TD, Ty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMPreferredAlignmentOfGlobal$MH() {
        return RuntimeHelper.requireNonNull(constants$74.LLVMPreferredAlignmentOfGlobal$MH,"LLVMPreferredAlignmentOfGlobal");
    }
    public static int LLVMPreferredAlignmentOfGlobal ( Addressable TD,  Addressable GlobalVar) {
        var mh$ = LLVMPreferredAlignmentOfGlobal$MH();
        try {
            return (int)mh$.invokeExact(TD, GlobalVar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMElementAtOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$74.LLVMElementAtOffset$MH,"LLVMElementAtOffset");
    }
    public static int LLVMElementAtOffset ( Addressable TD,  Addressable StructTy,  long Offset) {
        var mh$ = LLVMElementAtOffset$MH();
        try {
            return (int)mh$.invokeExact(TD, StructTy, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMOffsetOfElement$MH() {
        return RuntimeHelper.requireNonNull(constants$74.LLVMOffsetOfElement$MH,"LLVMOffsetOfElement");
    }
    public static long LLVMOffsetOfElement ( Addressable TD,  Addressable StructTy,  int Element) {
        var mh$ = LLVMOffsetOfElement$MH();
        try {
            return (long)mh$.invokeExact(TD, StructTy, Element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMInstallFatalErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$75.LLVMInstallFatalErrorHandler$MH,"LLVMInstallFatalErrorHandler");
    }
    public static void LLVMInstallFatalErrorHandler ( Addressable Handler) {
        var mh$ = LLVMInstallFatalErrorHandler$MH();
        try {
            mh$.invokeExact(Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMResetFatalErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$75.LLVMResetFatalErrorHandler$MH,"LLVMResetFatalErrorHandler");
    }
    public static void LLVMResetFatalErrorHandler () {
        var mh$ = LLVMResetFatalErrorHandler$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMEnablePrettyStackTrace$MH() {
        return RuntimeHelper.requireNonNull(constants$75.LLVMEnablePrettyStackTrace$MH,"LLVMEnablePrettyStackTrace");
    }
    public static void LLVMEnablePrettyStackTrace () {
        var mh$ = LLVMEnablePrettyStackTrace$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMRemarkTypeUnknown() {
        return (int)0L;
    }
    public static int LLVMRemarkTypePassed() {
        return (int)1L;
    }
    public static int LLVMRemarkTypeMissed() {
        return (int)2L;
    }
    public static int LLVMRemarkTypeAnalysis() {
        return (int)3L;
    }
    public static int LLVMRemarkTypeAnalysisFPCommute() {
        return (int)4L;
    }
    public static int LLVMRemarkTypeAnalysisAliasing() {
        return (int)5L;
    }
    public static int LLVMRemarkTypeFailure() {
        return (int)6L;
    }
    public static OfAddress LLVMRemarkStringRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMRemarkStringGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$75.LLVMRemarkStringGetData$MH,"LLVMRemarkStringGetData");
    }
    public static MemoryAddress LLVMRemarkStringGetData ( Addressable String_) {
        var mh$ = LLVMRemarkStringGetData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkStringGetLen$MH() {
        return RuntimeHelper.requireNonNull(constants$75.LLVMRemarkStringGetLen$MH,"LLVMRemarkStringGetLen");
    }
    public static int LLVMRemarkStringGetLen ( Addressable String_) {
        var mh$ = LLVMRemarkStringGetLen$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMRemarkDebugLocRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMRemarkDebugLocGetSourceFilePath$MH() {
        return RuntimeHelper.requireNonNull(constants$76.LLVMRemarkDebugLocGetSourceFilePath$MH,"LLVMRemarkDebugLocGetSourceFilePath");
    }
    public static MemoryAddress LLVMRemarkDebugLocGetSourceFilePath ( Addressable DL) {
        var mh$ = LLVMRemarkDebugLocGetSourceFilePath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(DL);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkDebugLocGetSourceLine$MH() {
        return RuntimeHelper.requireNonNull(constants$76.LLVMRemarkDebugLocGetSourceLine$MH,"LLVMRemarkDebugLocGetSourceLine");
    }
    public static int LLVMRemarkDebugLocGetSourceLine ( Addressable DL) {
        var mh$ = LLVMRemarkDebugLocGetSourceLine$MH();
        try {
            return (int)mh$.invokeExact(DL);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkDebugLocGetSourceColumn$MH() {
        return RuntimeHelper.requireNonNull(constants$76.LLVMRemarkDebugLocGetSourceColumn$MH,"LLVMRemarkDebugLocGetSourceColumn");
    }
    public static int LLVMRemarkDebugLocGetSourceColumn ( Addressable DL) {
        var mh$ = LLVMRemarkDebugLocGetSourceColumn$MH();
        try {
            return (int)mh$.invokeExact(DL);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMRemarkArgRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMRemarkArgGetKey$MH() {
        return RuntimeHelper.requireNonNull(constants$76.LLVMRemarkArgGetKey$MH,"LLVMRemarkArgGetKey");
    }
    public static MemoryAddress LLVMRemarkArgGetKey ( Addressable Arg) {
        var mh$ = LLVMRemarkArgGetKey$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkArgGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$76.LLVMRemarkArgGetValue$MH,"LLVMRemarkArgGetValue");
    }
    public static MemoryAddress LLVMRemarkArgGetValue ( Addressable Arg) {
        var mh$ = LLVMRemarkArgGetValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkArgGetDebugLoc$MH() {
        return RuntimeHelper.requireNonNull(constants$76.LLVMRemarkArgGetDebugLoc$MH,"LLVMRemarkArgGetDebugLoc");
    }
    public static MemoryAddress LLVMRemarkArgGetDebugLoc ( Addressable Arg) {
        var mh$ = LLVMRemarkArgGetDebugLoc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMRemarkEntryRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMRemarkEntryDispose$MH() {
        return RuntimeHelper.requireNonNull(constants$77.LLVMRemarkEntryDispose$MH,"LLVMRemarkEntryDispose");
    }
    public static void LLVMRemarkEntryDispose ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryDispose$MH();
        try {
            mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$77.LLVMRemarkEntryGetType$MH,"LLVMRemarkEntryGetType");
    }
    public static int LLVMRemarkEntryGetType ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetType$MH();
        try {
            return (int)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetPassName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.LLVMRemarkEntryGetPassName$MH,"LLVMRemarkEntryGetPassName");
    }
    public static MemoryAddress LLVMRemarkEntryGetPassName ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetPassName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetRemarkName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.LLVMRemarkEntryGetRemarkName$MH,"LLVMRemarkEntryGetRemarkName");
    }
    public static MemoryAddress LLVMRemarkEntryGetRemarkName ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetRemarkName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetFunctionName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.LLVMRemarkEntryGetFunctionName$MH,"LLVMRemarkEntryGetFunctionName");
    }
    public static MemoryAddress LLVMRemarkEntryGetFunctionName ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetFunctionName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetDebugLoc$MH() {
        return RuntimeHelper.requireNonNull(constants$77.LLVMRemarkEntryGetDebugLoc$MH,"LLVMRemarkEntryGetDebugLoc");
    }
    public static MemoryAddress LLVMRemarkEntryGetDebugLoc ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetDebugLoc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetHotness$MH() {
        return RuntimeHelper.requireNonNull(constants$78.LLVMRemarkEntryGetHotness$MH,"LLVMRemarkEntryGetHotness");
    }
    public static long LLVMRemarkEntryGetHotness ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetHotness$MH();
        try {
            return (long)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetNumArgs$MH() {
        return RuntimeHelper.requireNonNull(constants$78.LLVMRemarkEntryGetNumArgs$MH,"LLVMRemarkEntryGetNumArgs");
    }
    public static int LLVMRemarkEntryGetNumArgs ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetNumArgs$MH();
        try {
            return (int)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetFirstArg$MH() {
        return RuntimeHelper.requireNonNull(constants$78.LLVMRemarkEntryGetFirstArg$MH,"LLVMRemarkEntryGetFirstArg");
    }
    public static MemoryAddress LLVMRemarkEntryGetFirstArg ( Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetFirstArg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkEntryGetNextArg$MH() {
        return RuntimeHelper.requireNonNull(constants$78.LLVMRemarkEntryGetNextArg$MH,"LLVMRemarkEntryGetNextArg");
    }
    public static MemoryAddress LLVMRemarkEntryGetNextArg ( Addressable It,  Addressable Remark) {
        var mh$ = LLVMRemarkEntryGetNextArg$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(It, Remark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LLVMRemarkParserRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LLVMRemarkParserCreateYAML$MH() {
        return RuntimeHelper.requireNonNull(constants$78.LLVMRemarkParserCreateYAML$MH,"LLVMRemarkParserCreateYAML");
    }
    public static MemoryAddress LLVMRemarkParserCreateYAML ( Addressable Buf,  long Size) {
        var mh$ = LLVMRemarkParserCreateYAML$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Buf, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkParserCreateBitstream$MH() {
        return RuntimeHelper.requireNonNull(constants$78.LLVMRemarkParserCreateBitstream$MH,"LLVMRemarkParserCreateBitstream");
    }
    public static MemoryAddress LLVMRemarkParserCreateBitstream ( Addressable Buf,  long Size) {
        var mh$ = LLVMRemarkParserCreateBitstream$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Buf, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkParserGetNext$MH() {
        return RuntimeHelper.requireNonNull(constants$79.LLVMRemarkParserGetNext$MH,"LLVMRemarkParserGetNext");
    }
    public static MemoryAddress LLVMRemarkParserGetNext ( Addressable Parser) {
        var mh$ = LLVMRemarkParserGetNext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Parser);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkParserHasError$MH() {
        return RuntimeHelper.requireNonNull(constants$79.LLVMRemarkParserHasError$MH,"LLVMRemarkParserHasError");
    }
    public static int LLVMRemarkParserHasError ( Addressable Parser) {
        var mh$ = LLVMRemarkParserHasError$MH();
        try {
            return (int)mh$.invokeExact(Parser);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkParserGetErrorMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$79.LLVMRemarkParserGetErrorMessage$MH,"LLVMRemarkParserGetErrorMessage");
    }
    public static MemoryAddress LLVMRemarkParserGetErrorMessage ( Addressable Parser) {
        var mh$ = LLVMRemarkParserGetErrorMessage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Parser);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkParserDispose$MH() {
        return RuntimeHelper.requireNonNull(constants$79.LLVMRemarkParserDispose$MH,"LLVMRemarkParserDispose");
    }
    public static void LLVMRemarkParserDispose ( Addressable Parser) {
        var mh$ = LLVMRemarkParserDispose$MH();
        try {
            mh$.invokeExact(Parser);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LLVMRemarkVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.LLVMRemarkVersion$MH,"LLVMRemarkVersion");
    }
    public static int LLVMRemarkVersion () {
        var mh$ = LLVMRemarkVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LLVMRet() {
        return (int)1L;
    }
    public static int LLVMBr() {
        return (int)2L;
    }
    public static int LLVMSwitch() {
        return (int)3L;
    }
    public static int LLVMIndirectBr() {
        return (int)4L;
    }
    public static int LLVMInvoke() {
        return (int)5L;
    }
    public static int LLVMUnreachable() {
        return (int)7L;
    }
    public static int LLVMCallBr() {
        return (int)67L;
    }
    public static int LLVMFNeg() {
        return (int)66L;
    }
    public static int LLVMAdd() {
        return (int)8L;
    }
    public static int LLVMFAdd() {
        return (int)9L;
    }
    public static int LLVMSub() {
        return (int)10L;
    }
    public static int LLVMFSub() {
        return (int)11L;
    }
    public static int LLVMMul() {
        return (int)12L;
    }
    public static int LLVMFMul() {
        return (int)13L;
    }
    public static int LLVMUDiv() {
        return (int)14L;
    }
    public static int LLVMSDiv() {
        return (int)15L;
    }
    public static int LLVMFDiv() {
        return (int)16L;
    }
    public static int LLVMURem() {
        return (int)17L;
    }
    public static int LLVMSRem() {
        return (int)18L;
    }
    public static int LLVMFRem() {
        return (int)19L;
    }
    public static int LLVMShl() {
        return (int)20L;
    }
    public static int LLVMLShr() {
        return (int)21L;
    }
    public static int LLVMAShr() {
        return (int)22L;
    }
    public static int LLVMAnd() {
        return (int)23L;
    }
    public static int LLVMOr() {
        return (int)24L;
    }
    public static int LLVMXor() {
        return (int)25L;
    }
    public static int LLVMAlloca() {
        return (int)26L;
    }
    public static int LLVMLoad() {
        return (int)27L;
    }
    public static int LLVMStore() {
        return (int)28L;
    }
    public static int LLVMGetElementPtr() {
        return (int)29L;
    }
    public static int LLVMTrunc() {
        return (int)30L;
    }
    public static int LLVMZExt() {
        return (int)31L;
    }
    public static int LLVMSExt() {
        return (int)32L;
    }
    public static int LLVMFPToUI() {
        return (int)33L;
    }
    public static int LLVMFPToSI() {
        return (int)34L;
    }
    public static int LLVMUIToFP() {
        return (int)35L;
    }
    public static int LLVMSIToFP() {
        return (int)36L;
    }
    public static int LLVMFPTrunc() {
        return (int)37L;
    }
    public static int LLVMFPExt() {
        return (int)38L;
    }
    public static int LLVMPtrToInt() {
        return (int)39L;
    }
    public static int LLVMIntToPtr() {
        return (int)40L;
    }
    public static int LLVMBitCast() {
        return (int)41L;
    }
    public static int LLVMAddrSpaceCast() {
        return (int)60L;
    }
    public static int LLVMICmp() {
        return (int)42L;
    }
    public static int LLVMFCmp() {
        return (int)43L;
    }
    public static int LLVMPHI() {
        return (int)44L;
    }
    public static int LLVMCall() {
        return (int)45L;
    }
    public static int LLVMSelect() {
        return (int)46L;
    }
    public static int LLVMUserOp1() {
        return (int)47L;
    }
    public static int LLVMUserOp2() {
        return (int)48L;
    }
    public static int LLVMVAArg() {
        return (int)49L;
    }
    public static int LLVMExtractElement() {
        return (int)50L;
    }
    public static int LLVMInsertElement() {
        return (int)51L;
    }
    public static int LLVMShuffleVector() {
        return (int)52L;
    }
    public static int LLVMExtractValue() {
        return (int)53L;
    }
    public static int LLVMInsertValue() {
        return (int)54L;
    }
    public static int LLVMFreeze() {
        return (int)68L;
    }
    public static int LLVMFence() {
        return (int)55L;
    }
    public static int LLVMAtomicCmpXchg() {
        return (int)56L;
    }
    public static int LLVMAtomicRMW() {
        return (int)57L;
    }
    public static int LLVMResume() {
        return (int)58L;
    }
    public static int LLVMLandingPad() {
        return (int)59L;
    }
    public static int LLVMCleanupRet() {
        return (int)61L;
    }
    public static int LLVMCatchRet() {
        return (int)62L;
    }
    public static int LLVMCatchPad() {
        return (int)63L;
    }
    public static int LLVMCleanupPad() {
        return (int)64L;
    }
    public static int LLVMCatchSwitch() {
        return (int)65L;
    }
    public static int LLVMVoidTypeKind() {
        return (int)0L;
    }
    public static int LLVMHalfTypeKind() {
        return (int)1L;
    }
    public static int LLVMFloatTypeKind() {
        return (int)2L;
    }
    public static int LLVMDoubleTypeKind() {
        return (int)3L;
    }
    public static int LLVMX86_FP80TypeKind() {
        return (int)4L;
    }
    public static int LLVMFP128TypeKind() {
        return (int)5L;
    }
    public static int LLVMPPC_FP128TypeKind() {
        return (int)6L;
    }
    public static int LLVMLabelTypeKind() {
        return (int)7L;
    }
    public static int LLVMIntegerTypeKind() {
        return (int)8L;
    }
    public static int LLVMFunctionTypeKind() {
        return (int)9L;
    }
    public static int LLVMStructTypeKind() {
        return (int)10L;
    }
    public static int LLVMArrayTypeKind() {
        return (int)11L;
    }
    public static int LLVMPointerTypeKind() {
        return (int)12L;
    }
    public static int LLVMVectorTypeKind() {
        return (int)13L;
    }
    public static int LLVMMetadataTypeKind() {
        return (int)14L;
    }
    public static int LLVMX86_MMXTypeKind() {
        return (int)15L;
    }
    public static int LLVMTokenTypeKind() {
        return (int)16L;
    }
    public static int LLVMScalableVectorTypeKind() {
        return (int)17L;
    }
    public static int LLVMBFloatTypeKind() {
        return (int)18L;
    }
    public static int LLVMX86_AMXTypeKind() {
        return (int)19L;
    }
    public static int LLVMTargetExtTypeKind() {
        return (int)20L;
    }
    public static int LLVMExternalLinkage() {
        return (int)0L;
    }
    public static int LLVMAvailableExternallyLinkage() {
        return (int)1L;
    }
    public static int LLVMLinkOnceAnyLinkage() {
        return (int)2L;
    }
    public static int LLVMLinkOnceODRLinkage() {
        return (int)3L;
    }
    public static int LLVMLinkOnceODRAutoHideLinkage() {
        return (int)4L;
    }
    public static int LLVMWeakAnyLinkage() {
        return (int)5L;
    }
    public static int LLVMWeakODRLinkage() {
        return (int)6L;
    }
    public static int LLVMAppendingLinkage() {
        return (int)7L;
    }
    public static int LLVMInternalLinkage() {
        return (int)8L;
    }
    public static int LLVMPrivateLinkage() {
        return (int)9L;
    }
    public static int LLVMDLLImportLinkage() {
        return (int)10L;
    }
    public static int LLVMDLLExportLinkage() {
        return (int)11L;
    }
    public static int LLVMExternalWeakLinkage() {
        return (int)12L;
    }
    public static int LLVMGhostLinkage() {
        return (int)13L;
    }
    public static int LLVMCommonLinkage() {
        return (int)14L;
    }
    public static int LLVMLinkerPrivateLinkage() {
        return (int)15L;
    }
    public static int LLVMLinkerPrivateWeakLinkage() {
        return (int)16L;
    }
    public static int LLVMDefaultVisibility() {
        return (int)0L;
    }
    public static int LLVMHiddenVisibility() {
        return (int)1L;
    }
    public static int LLVMProtectedVisibility() {
        return (int)2L;
    }
    public static int LLVMNoUnnamedAddr() {
        return (int)0L;
    }
    public static int LLVMLocalUnnamedAddr() {
        return (int)1L;
    }
    public static int LLVMGlobalUnnamedAddr() {
        return (int)2L;
    }
    public static int LLVMDefaultStorageClass() {
        return (int)0L;
    }
    public static int LLVMDLLImportStorageClass() {
        return (int)1L;
    }
    public static int LLVMDLLExportStorageClass() {
        return (int)2L;
    }
    public static int LLVMCCallConv() {
        return (int)0L;
    }
    public static int LLVMFastCallConv() {
        return (int)8L;
    }
    public static int LLVMColdCallConv() {
        return (int)9L;
    }
    public static int LLVMGHCCallConv() {
        return (int)10L;
    }
    public static int LLVMHiPECallConv() {
        return (int)11L;
    }
    public static int LLVMWebKitJSCallConv() {
        return (int)12L;
    }
    public static int LLVMAnyRegCallConv() {
        return (int)13L;
    }
    public static int LLVMPreserveMostCallConv() {
        return (int)14L;
    }
    public static int LLVMPreserveAllCallConv() {
        return (int)15L;
    }
    public static int LLVMSwiftCallConv() {
        return (int)16L;
    }
    public static int LLVMCXXFASTTLSCallConv() {
        return (int)17L;
    }
    public static int LLVMX86StdcallCallConv() {
        return (int)64L;
    }
    public static int LLVMX86FastcallCallConv() {
        return (int)65L;
    }
    public static int LLVMARMAPCSCallConv() {
        return (int)66L;
    }
    public static int LLVMARMAAPCSCallConv() {
        return (int)67L;
    }
    public static int LLVMARMAAPCSVFPCallConv() {
        return (int)68L;
    }
    public static int LLVMMSP430INTRCallConv() {
        return (int)69L;
    }
    public static int LLVMX86ThisCallCallConv() {
        return (int)70L;
    }
    public static int LLVMPTXKernelCallConv() {
        return (int)71L;
    }
    public static int LLVMPTXDeviceCallConv() {
        return (int)72L;
    }
    public static int LLVMSPIRFUNCCallConv() {
        return (int)75L;
    }
    public static int LLVMSPIRKERNELCallConv() {
        return (int)76L;
    }
    public static int LLVMIntelOCLBICallConv() {
        return (int)77L;
    }
    public static int LLVMX8664SysVCallConv() {
        return (int)78L;
    }
    public static int LLVMWin64CallConv() {
        return (int)79L;
    }
    public static int LLVMX86VectorCallCallConv() {
        return (int)80L;
    }
    public static int LLVMHHVMCallConv() {
        return (int)81L;
    }
    public static int LLVMHHVMCCallConv() {
        return (int)82L;
    }
    public static int LLVMX86INTRCallConv() {
        return (int)83L;
    }
    public static int LLVMAVRINTRCallConv() {
        return (int)84L;
    }
    public static int LLVMAVRSIGNALCallConv() {
        return (int)85L;
    }
    public static int LLVMAVRBUILTINCallConv() {
        return (int)86L;
    }
    public static int LLVMAMDGPUVSCallConv() {
        return (int)87L;
    }
    public static int LLVMAMDGPUGSCallConv() {
        return (int)88L;
    }
    public static int LLVMAMDGPUPSCallConv() {
        return (int)89L;
    }
    public static int LLVMAMDGPUCSCallConv() {
        return (int)90L;
    }
    public static int LLVMAMDGPUKERNELCallConv() {
        return (int)91L;
    }
    public static int LLVMX86RegCallCallConv() {
        return (int)92L;
    }
    public static int LLVMAMDGPUHSCallConv() {
        return (int)93L;
    }
    public static int LLVMMSP430BUILTINCallConv() {
        return (int)94L;
    }
    public static int LLVMAMDGPULSCallConv() {
        return (int)95L;
    }
}


