// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$26 {

    static final FunctionDescriptor mlirTypeIsNull$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeIsNull$MH = RuntimeHelper.downcallHandle(
        "mlirTypeIsNull",
        constants$26.mlirTypeIsNull$FUNC
    );
    static final FunctionDescriptor mlirTypeEqual$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeEqual$MH = RuntimeHelper.downcallHandle(
        "mlirTypeEqual",
        constants$26.mlirTypeEqual$FUNC
    );
    static final FunctionDescriptor mlirTypePrint$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirTypePrint$MH = RuntimeHelper.downcallHandle(
        "mlirTypePrint",
        constants$26.mlirTypePrint$FUNC
    );
    static final FunctionDescriptor mlirTypeDump$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeDump$MH = RuntimeHelper.downcallHandle(
        "mlirTypeDump",
        constants$26.mlirTypeDump$FUNC
    );
    static final FunctionDescriptor mlirAttributeParseGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAttribute"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef")
    );
    static final MethodHandle mlirAttributeParseGet$MH = RuntimeHelper.downcallHandle(
        "mlirAttributeParseGet",
        constants$26.mlirAttributeParseGet$FUNC
    );
    static final FunctionDescriptor mlirAttributeGetContext$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAttribute")
    );
    static final MethodHandle mlirAttributeGetContext$MH = RuntimeHelper.downcallHandle(
        "mlirAttributeGetContext",
        constants$26.mlirAttributeGetContext$FUNC
    );
}


