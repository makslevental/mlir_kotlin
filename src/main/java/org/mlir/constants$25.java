// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$25 {

    static final FunctionDescriptor mlirOpOperandGetOwner$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirOperation"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOpOperand")
    );
    static final MethodHandle mlirOpOperandGetOwner$MH = RuntimeHelper.downcallHandle(
        "mlirOpOperandGetOwner",
        constants$25.mlirOpOperandGetOwner$FUNC
    );
    static final FunctionDescriptor mlirOpOperandGetOperandNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOpOperand")
    );
    static final MethodHandle mlirOpOperandGetOperandNumber$MH = RuntimeHelper.downcallHandle(
        "mlirOpOperandGetOperandNumber",
        constants$25.mlirOpOperandGetOperandNumber$FUNC
    );
    static final FunctionDescriptor mlirOpOperandGetNextUse$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirOpOperand"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOpOperand")
    );
    static final MethodHandle mlirOpOperandGetNextUse$MH = RuntimeHelper.downcallHandle(
        "mlirOpOperandGetNextUse",
        constants$25.mlirOpOperandGetNextUse$FUNC
    );
    static final FunctionDescriptor mlirTypeParseGet$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirType"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef")
    );
    static final MethodHandle mlirTypeParseGet$MH = RuntimeHelper.downcallHandle(
        "mlirTypeParseGet",
        constants$25.mlirTypeParseGet$FUNC
    );
    static final FunctionDescriptor mlirTypeGetContext$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirContext"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeGetContext$MH = RuntimeHelper.downcallHandle(
        "mlirTypeGetContext",
        constants$25.mlirTypeGetContext$FUNC
    );
    static final FunctionDescriptor mlirTypeGetTypeID$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirTypeID"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirType")
    );
    static final MethodHandle mlirTypeGetTypeID$MH = RuntimeHelper.downcallHandle(
        "mlirTypeGetTypeID",
        constants$25.mlirTypeGetTypeID$FUNC
    );
}


