// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface LLVMOrcIRTransformLayerTransformFunction {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress Ctx, java.lang.foreign.MemoryAddress ModInOut, java.lang.foreign.MemoryAddress MR);
    static MemorySegment allocate(LLVMOrcIRTransformLayerTransformFunction fi, MemorySession session) {
        return RuntimeHelper.upcallStub(LLVMOrcIRTransformLayerTransformFunction.class, fi, constants$206.LLVMOrcIRTransformLayerTransformFunction$FUNC, session);
    }
    static LLVMOrcIRTransformLayerTransformFunction ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _Ctx, java.lang.foreign.MemoryAddress _ModInOut, java.lang.foreign.MemoryAddress _MR) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$207.LLVMOrcIRTransformLayerTransformFunction$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_Ctx, (java.lang.foreign.Addressable)_ModInOut, (java.lang.foreign.Addressable)_MR);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


