// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$155 {

    static final FunctionDescriptor LLVMReplaceMDNodeOperandWith$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMReplaceMDNodeOperandWith$MH = RuntimeHelper.downcallHandle(
        "LLVMReplaceMDNodeOperandWith",
        constants$155.LLVMReplaceMDNodeOperandWith$FUNC
    );
    static final FunctionDescriptor LLVMMDStringInContext$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMMDStringInContext$MH = RuntimeHelper.downcallHandle(
        "LLVMMDStringInContext",
        constants$155.LLVMMDStringInContext$FUNC
    );
    static final FunctionDescriptor LLVMMDString$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMMDString$MH = RuntimeHelper.downcallHandle(
        "LLVMMDString",
        constants$155.LLVMMDString$FUNC
    );
    static final FunctionDescriptor LLVMMDNodeInContext$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMMDNodeInContext$MH = RuntimeHelper.downcallHandle(
        "LLVMMDNodeInContext",
        constants$155.LLVMMDNodeInContext$FUNC
    );
    static final FunctionDescriptor LLVMMDNode$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMMDNode$MH = RuntimeHelper.downcallHandle(
        "LLVMMDNode",
        constants$155.LLVMMDNode$FUNC
    );
    static final FunctionDescriptor LLVMBasicBlockAsValue$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMBasicBlockAsValue$MH = RuntimeHelper.downcallHandle(
        "LLVMBasicBlockAsValue",
        constants$155.LLVMBasicBlockAsValue$FUNC
    );
}


