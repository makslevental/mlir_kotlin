// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$230 {

    static final FunctionDescriptor mlirLinalgFillBuiltinNamedOpRegion$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOperation")
    );
    static final MethodHandle mlirLinalgFillBuiltinNamedOpRegion$MH = RuntimeHelper.downcallHandle(
        "mlirLinalgFillBuiltinNamedOpRegion",
        constants$230.mlirLinalgFillBuiltinNamedOpRegion$FUNC
    );
    static final FunctionDescriptor mlirGetDialectHandle__linalg__$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirDialectHandle"));
    static final MethodHandle mlirGetDialectHandle__linalg__$MH = RuntimeHelper.downcallHandle(
        "mlirGetDialectHandle__linalg__",
        constants$230.mlirGetDialectHandle__linalg__$FUNC
    );
    static final FunctionDescriptor mlirRegisterLinalgPasses$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterLinalgPasses$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterLinalgPasses",
        constants$230.mlirRegisterLinalgPasses$FUNC
    );
    static final FunctionDescriptor mlirCreateLinalgConvertElementwiseToLinalg$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateLinalgConvertElementwiseToLinalg$MH = RuntimeHelper.downcallHandle(
        "mlirCreateLinalgConvertElementwiseToLinalg",
        constants$230.mlirCreateLinalgConvertElementwiseToLinalg$FUNC
    );
    static final FunctionDescriptor mlirRegisterLinalgConvertElementwiseToLinalg$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterLinalgConvertElementwiseToLinalg$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterLinalgConvertElementwiseToLinalg",
        constants$230.mlirRegisterLinalgConvertElementwiseToLinalg$FUNC
    );
    static final FunctionDescriptor mlirCreateLinalgLinalgBufferize$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateLinalgLinalgBufferize$MH = RuntimeHelper.downcallHandle(
        "mlirCreateLinalgLinalgBufferize",
        constants$230.mlirCreateLinalgLinalgBufferize$FUNC
    );
}


