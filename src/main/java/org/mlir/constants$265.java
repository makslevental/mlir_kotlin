// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$265 {

    static final FunctionDescriptor mlirCreateGPUGpuMapParallelLoopsPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateGPUGpuMapParallelLoopsPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateGPUGpuMapParallelLoopsPass",
        constants$265.mlirCreateGPUGpuMapParallelLoopsPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterGPUGpuMapParallelLoopsPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterGPUGpuMapParallelLoopsPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterGPUGpuMapParallelLoopsPass",
        constants$265.mlirRegisterGPUGpuMapParallelLoopsPass$FUNC
    );
    static final FunctionDescriptor mlirGetDialectHandle__func__$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirDialectHandle"));
    static final MethodHandle mlirGetDialectHandle__func__$MH = RuntimeHelper.downcallHandle(
        "mlirGetDialectHandle__func__",
        constants$265.mlirGetDialectHandle__func__$FUNC
    );
    static final FunctionDescriptor mlirGetDialectHandle__shape__$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirDialectHandle"));
    static final MethodHandle mlirGetDialectHandle__shape__$MH = RuntimeHelper.downcallHandle(
        "mlirGetDialectHandle__shape__",
        constants$265.mlirGetDialectHandle__shape__$FUNC
    );
    static final FunctionDescriptor mlirGetDialectHandle__sparse_tensor__$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirDialectHandle"));
    static final MethodHandle mlirGetDialectHandle__sparse_tensor__$MH = RuntimeHelper.downcallHandle(
        "mlirGetDialectHandle__sparse_tensor__",
        constants$265.mlirGetDialectHandle__sparse_tensor__$FUNC
    );
    static final FunctionDescriptor mlirAttributeIsASparseTensorEncodingAttr$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAttribute")
    );
    static final MethodHandle mlirAttributeIsASparseTensorEncodingAttr$MH = RuntimeHelper.downcallHandle(
        "mlirAttributeIsASparseTensorEncodingAttr",
        constants$265.mlirAttributeIsASparseTensorEncodingAttr$FUNC
    );
}


