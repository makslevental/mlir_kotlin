// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$53 {

    static final FunctionDescriptor mlirAffineMapIsPermutation$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
    static final MethodHandle mlirAffineMapIsPermutation$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapIsPermutation",
        constants$53.mlirAffineMapIsPermutation$FUNC
    );
    static final FunctionDescriptor mlirAffineMapGetSubMap$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineMap"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap"),
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirAffineMapGetSubMap$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapGetSubMap",
        constants$53.mlirAffineMapGetSubMap$FUNC
    );
    static final FunctionDescriptor mlirAffineMapGetMajorSubMap$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineMap"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirAffineMapGetMajorSubMap$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapGetMajorSubMap",
        constants$53.mlirAffineMapGetMajorSubMap$FUNC
    );
    static final FunctionDescriptor mlirAffineMapGetMinorSubMap$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineMap"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap"),
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirAffineMapGetMinorSubMap$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapGetMinorSubMap",
        constants$53.mlirAffineMapGetMinorSubMap$FUNC
    );
    static final FunctionDescriptor mlirAffineMapReplace$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirAffineMap"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle mlirAffineMapReplace$MH = RuntimeHelper.downcallHandle(
        "mlirAffineMapReplace",
        constants$53.mlirAffineMapReplace$FUNC
    );
    static final FunctionDescriptor mlirAffineMapCompressUnusedSymbols$populateResult$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineMap")
    );
}


