// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$328 {

    static final FunctionDescriptor LLVMDIBuilderCreateParameterVariable$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMDIBuilderCreateParameterVariable$MH = RuntimeHelper.downcallHandle(
        "LLVMDIBuilderCreateParameterVariable",
        constants$328.LLVMDIBuilderCreateParameterVariable$FUNC
    );
    static final FunctionDescriptor LLVMGetSubprogram$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetSubprogram$MH = RuntimeHelper.downcallHandle(
        "LLVMGetSubprogram",
        constants$328.LLVMGetSubprogram$FUNC
    );
    static final FunctionDescriptor LLVMSetSubprogram$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMSetSubprogram$MH = RuntimeHelper.downcallHandle(
        "LLVMSetSubprogram",
        constants$328.LLVMSetSubprogram$FUNC
    );
    static final FunctionDescriptor LLVMDISubprogramGetLine$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMDISubprogramGetLine$MH = RuntimeHelper.downcallHandle(
        "LLVMDISubprogramGetLine",
        constants$328.LLVMDISubprogramGetLine$FUNC
    );
    static final FunctionDescriptor LLVMInstructionGetDebugLoc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMInstructionGetDebugLoc$MH = RuntimeHelper.downcallHandle(
        "LLVMInstructionGetDebugLoc",
        constants$328.LLVMInstructionGetDebugLoc$FUNC
    );
    static final FunctionDescriptor LLVMInstructionSetDebugLoc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMInstructionSetDebugLoc$MH = RuntimeHelper.downcallHandle(
        "LLVMInstructionSetDebugLoc",
        constants$328.LLVMInstructionSetDebugLoc$FUNC
    );
}


