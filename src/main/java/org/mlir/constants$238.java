// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$238 {

    static final FunctionDescriptor mlirRegisterConversionConvertBufferizationToMemRef$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertBufferizationToMemRef$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertBufferizationToMemRef",
        constants$238.mlirRegisterConversionConvertBufferizationToMemRef$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertComplexToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertComplexToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertComplexToLLVMPass",
        constants$238.mlirCreateConversionConvertComplexToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertComplexToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertComplexToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertComplexToLLVMPass",
        constants$238.mlirRegisterConversionConvertComplexToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertComplexToLibm$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertComplexToLibm$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertComplexToLibm",
        constants$238.mlirCreateConversionConvertComplexToLibm$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertComplexToLibm$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertComplexToLibm$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertComplexToLibm",
        constants$238.mlirRegisterConversionConvertComplexToLibm$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertComplexToStandard$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertComplexToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertComplexToStandard",
        constants$238.mlirCreateConversionConvertComplexToStandard$FUNC
    );
}


