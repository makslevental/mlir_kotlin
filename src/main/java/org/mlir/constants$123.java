// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$123 {

    static final FunctionDescriptor LLVMIsAMDNode$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAMDNode$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAMDNode",
        constants$123.LLVMIsAMDNode$FUNC
    );
    static final FunctionDescriptor LLVMIsAValueAsMetadata$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAValueAsMetadata$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAValueAsMetadata",
        constants$123.LLVMIsAValueAsMetadata$FUNC
    );
    static final FunctionDescriptor LLVMIsAMDString$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMIsAMDString$MH = RuntimeHelper.downcallHandle(
        "LLVMIsAMDString",
        constants$123.LLVMIsAMDString$FUNC
    );
    static final FunctionDescriptor LLVMGetValueName$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetValueName$MH = RuntimeHelper.downcallHandle(
        "LLVMGetValueName",
        constants$123.LLVMGetValueName$FUNC
    );
    static final FunctionDescriptor LLVMSetValueName$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMSetValueName$MH = RuntimeHelper.downcallHandle(
        "LLVMSetValueName",
        constants$123.LLVMSetValueName$FUNC
    );
    static final FunctionDescriptor LLVMGetFirstUse$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LLVMGetFirstUse$MH = RuntimeHelper.downcallHandle(
        "LLVMGetFirstUse",
        constants$123.LLVMGetFirstUse$FUNC
    );
}


