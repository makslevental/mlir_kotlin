// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$268 {

    static final FunctionDescriptor mlirCreateSparseTensorSparseBufferRewrite$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateSparseTensorSparseBufferRewrite$MH = RuntimeHelper.downcallHandle(
        "mlirCreateSparseTensorSparseBufferRewrite",
        constants$268.mlirCreateSparseTensorSparseBufferRewrite$FUNC
    );
    static final FunctionDescriptor mlirRegisterSparseTensorSparseBufferRewrite$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterSparseTensorSparseBufferRewrite$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterSparseTensorSparseBufferRewrite",
        constants$268.mlirRegisterSparseTensorSparseBufferRewrite$FUNC
    );
    static final FunctionDescriptor mlirCreateSparseTensorSparseTensorCodegen$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateSparseTensorSparseTensorCodegen$MH = RuntimeHelper.downcallHandle(
        "mlirCreateSparseTensorSparseTensorCodegen",
        constants$268.mlirCreateSparseTensorSparseTensorCodegen$FUNC
    );
    static final FunctionDescriptor mlirRegisterSparseTensorSparseTensorCodegen$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterSparseTensorSparseTensorCodegen$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterSparseTensorSparseTensorCodegen",
        constants$268.mlirRegisterSparseTensorSparseTensorCodegen$FUNC
    );
    static final FunctionDescriptor mlirCreateSparseTensorSparseTensorConversionPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateSparseTensorSparseTensorConversionPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateSparseTensorSparseTensorConversionPass",
        constants$268.mlirCreateSparseTensorSparseTensorConversionPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterSparseTensorSparseTensorConversionPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterSparseTensorSparseTensorConversionPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterSparseTensorSparseTensorConversionPass",
        constants$268.mlirRegisterSparseTensorSparseTensorConversionPass$FUNC
    );
}


