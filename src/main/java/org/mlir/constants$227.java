// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$227 {

    static final FunctionDescriptor mlirOpPassManagerAddPipeline$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("value")
    ).withName("MlirLogicalResult"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOpPassManager"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirOpPassManagerAddPipeline$MH = RuntimeHelper.downcallHandle(
        "mlirOpPassManagerAddPipeline",
        constants$227.mlirOpPassManagerAddPipeline$FUNC
    );
    static final FunctionDescriptor mlirPrintPassPipeline$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOpPassManager"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirPrintPassPipeline$MH = RuntimeHelper.downcallHandle(
        "mlirPrintPassPipeline",
        constants$227.mlirPrintPassPipeline$FUNC
    );
    static final FunctionDescriptor mlirParsePassPipeline$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("value")
    ).withName("MlirLogicalResult"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirOpPassManager"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirParsePassPipeline$MH = RuntimeHelper.downcallHandle(
        "mlirParsePassPipeline",
        constants$227.mlirParsePassPipeline$FUNC
    );
    static final FunctionDescriptor mlirCreateExternalPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirTypeID"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("data"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("length")
        ).withName("MlirStringRef"),
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("construct"),
            Constants$root.C_POINTER$LAYOUT.withName("destruct"),
            Constants$root.C_POINTER$LAYOUT.withName("initialize"),
            Constants$root.C_POINTER$LAYOUT.withName("clone"),
            Constants$root.C_POINTER$LAYOUT.withName("run")
        ).withName("MlirExternalPassCallbacks"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirCreateExternalPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateExternalPass",
        constants$227.mlirCreateExternalPass$FUNC
    );
    static final FunctionDescriptor mlirExternalPassSignalFailure$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirExternalPass")
    );
    static final MethodHandle mlirExternalPassSignalFailure$MH = RuntimeHelper.downcallHandle(
        "mlirExternalPassSignalFailure",
        constants$227.mlirExternalPassSignalFailure$FUNC
    );
    static final FunctionDescriptor mlirRegisterAsyncPasses$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterAsyncPasses$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterAsyncPasses",
        constants$227.mlirRegisterAsyncPasses$FUNC
    );
}


