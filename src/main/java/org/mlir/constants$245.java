// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$245 {

    static final FunctionDescriptor mlirRegisterConversionConvertOpenACCToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertOpenACCToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertOpenACCToLLVMPass",
        constants$245.mlirRegisterConversionConvertOpenACCToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertOpenACCToSCF$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertOpenACCToSCF$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertOpenACCToSCF",
        constants$245.mlirCreateConversionConvertOpenACCToSCF$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertOpenACCToSCF$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertOpenACCToSCF$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertOpenACCToSCF",
        constants$245.mlirRegisterConversionConvertOpenACCToSCF$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertOpenMPToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertOpenMPToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertOpenMPToLLVMPass",
        constants$245.mlirCreateConversionConvertOpenMPToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertOpenMPToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertOpenMPToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertOpenMPToLLVMPass",
        constants$245.mlirRegisterConversionConvertOpenMPToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertPDLToPDLInterp$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertPDLToPDLInterp$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertPDLToPDLInterp",
        constants$245.mlirCreateConversionConvertPDLToPDLInterp$FUNC
    );
}


