// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$41 {

    static final FunctionDescriptor mlirAffineExprEqual$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprEqual$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprEqual",
        constants$41.mlirAffineExprEqual$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsNull$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsNull$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsNull",
        constants$41.mlirAffineExprIsNull$FUNC
    );
    static final FunctionDescriptor mlirAffineExprPrint$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mlirAffineExprPrint$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprPrint",
        constants$41.mlirAffineExprPrint$FUNC
    );
    static final FunctionDescriptor mlirAffineExprDump$FUNC = FunctionDescriptor.ofVoid(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprDump$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprDump",
        constants$41.mlirAffineExprDump$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsSymbolicOrConstant$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsSymbolicOrConstant$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsSymbolicOrConstant",
        constants$41.mlirAffineExprIsSymbolicOrConstant$FUNC
    );
    static final FunctionDescriptor mlirAffineExprIsPureAffine$FUNC = FunctionDescriptor.of(Constants$root.C_BOOL$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr")
        ).withName("MlirAffineExpr")
    );
    static final MethodHandle mlirAffineExprIsPureAffine$MH = RuntimeHelper.downcallHandle(
        "mlirAffineExprIsPureAffine",
        constants$41.mlirAffineExprIsPureAffine$FUNC
    );
}


