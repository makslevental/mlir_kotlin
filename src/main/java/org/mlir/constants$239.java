// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$239 {

    static final FunctionDescriptor mlirRegisterConversionConvertComplexToStandard$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertComplexToStandard$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertComplexToStandard",
        constants$239.mlirRegisterConversionConvertComplexToStandard$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertControlFlowToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertControlFlowToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertControlFlowToLLVMPass",
        constants$239.mlirCreateConversionConvertControlFlowToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertControlFlowToLLVMPass$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertControlFlowToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertControlFlowToLLVMPass",
        constants$239.mlirRegisterConversionConvertControlFlowToLLVMPass$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertControlFlowToSPIRV$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertControlFlowToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertControlFlowToSPIRV",
        constants$239.mlirCreateConversionConvertControlFlowToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirRegisterConversionConvertControlFlowToSPIRV$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle mlirRegisterConversionConvertControlFlowToSPIRV$MH = RuntimeHelper.downcallHandle(
        "mlirRegisterConversionConvertControlFlowToSPIRV",
        constants$239.mlirRegisterConversionConvertControlFlowToSPIRV$FUNC
    );
    static final FunctionDescriptor mlirCreateConversionConvertFuncToLLVMPass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ptr")
    ).withName("MlirPass"));
    static final MethodHandle mlirCreateConversionConvertFuncToLLVMPass$MH = RuntimeHelper.downcallHandle(
        "mlirCreateConversionConvertFuncToLLVMPass",
        constants$239.mlirCreateConversionConvertFuncToLLVMPass$FUNC
    );
}


