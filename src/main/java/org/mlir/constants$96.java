// Generated by jextract

package org.mlir;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$96 {

    static final FunctionDescriptor LLVMIntTypeInContext$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle LLVMIntTypeInContext$MH = RuntimeHelper.downcallHandle(
        "LLVMIntTypeInContext",
        constants$96.LLVMIntTypeInContext$FUNC
    );
    static final FunctionDescriptor LLVMInt1Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMInt1Type$MH = RuntimeHelper.downcallHandle(
        "LLVMInt1Type",
        constants$96.LLVMInt1Type$FUNC
    );
    static final FunctionDescriptor LLVMInt8Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMInt8Type$MH = RuntimeHelper.downcallHandle(
        "LLVMInt8Type",
        constants$96.LLVMInt8Type$FUNC
    );
    static final FunctionDescriptor LLVMInt16Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMInt16Type$MH = RuntimeHelper.downcallHandle(
        "LLVMInt16Type",
        constants$96.LLVMInt16Type$FUNC
    );
    static final FunctionDescriptor LLVMInt32Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMInt32Type$MH = RuntimeHelper.downcallHandle(
        "LLVMInt32Type",
        constants$96.LLVMInt32Type$FUNC
    );
    static final FunctionDescriptor LLVMInt64Type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle LLVMInt64Type$MH = RuntimeHelper.downcallHandle(
        "LLVMInt64Type",
        constants$96.LLVMInt64Type$FUNC
    );
}


